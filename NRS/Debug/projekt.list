
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800cf08  0800cf08  0001cf08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d230  0800d230  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800d230  0800d230  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d230  0800d230  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d230  0800d230  0001d230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d234  0800d234  0001d234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800d238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d0  20000350  0800d588  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001620  0800d588  00021620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c2c0  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003862  00000000  00000000  0003c640  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  0003fea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001320  00000000  00000000  00041370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002173d  00000000  00000000  00042690  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014c79  00000000  00000000  00063dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb040  00000000  00000000  00078a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133a86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006344  00000000  00000000  00133b04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ceec 	.word	0x0800ceec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800ceec 	.word	0x0800ceec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <i2c1_pisiRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af04      	add	r7, sp, #16
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	71bb      	strb	r3, [r7, #6]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	717b      	strb	r3, [r7, #5]
  naprava <<= 1;
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	71fb      	strb	r3, [r7, #7]
  return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	b299      	uxth	r1, r3
 8000bc4:	79bb      	ldrb	r3, [r7, #6]
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	230a      	movs	r3, #10
 8000bca:	9302      	str	r3, [sp, #8]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	9301      	str	r3, [sp, #4]
 8000bd0:	1d7b      	adds	r3, r7, #5
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	4804      	ldr	r0, [pc, #16]	; (8000be8 <i2c1_pisiRegister+0x40>)
 8000bd8:	f001 f970 	bl	8001ebc <HAL_I2C_Mem_Write>
 8000bdc:	4603      	mov	r3, r0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000059c 	.word	0x2000059c

08000bec <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af04      	add	r7, sp, #16
 8000bf2:	603a      	str	r2, [r7, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	717b      	strb	r3, [r7, #5]
  if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000c02:	797b      	ldrb	r3, [r7, #5]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d906      	bls.n	8000c16 <i2c1_beriRegistre+0x2a>
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b19      	cmp	r3, #25
 8000c0c:	d103      	bne.n	8000c16 <i2c1_beriRegistre+0x2a>
    reg |= 0x80;
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c14:	71bb      	strb	r3, [r7, #6]
  naprava <<= 1;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	b299      	uxth	r1, r3
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	b298      	uxth	r0, r3
 8000c24:	797b      	ldrb	r3, [r7, #5]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	797a      	ldrb	r2, [r7, #5]
 8000c2a:	9202      	str	r2, [sp, #8]
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2301      	movs	r3, #1
 8000c34:	4602      	mov	r2, r0
 8000c36:	4803      	ldr	r0, [pc, #12]	; (8000c44 <i2c1_beriRegistre+0x58>)
 8000c38:	f001 fa54 	bl	80020e4 <HAL_I2C_Mem_Read>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2000059c 	.word	0x2000059c

08000c48 <initLSM303DLHC>:

void initLSM303DLHC()
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  HAL_Delay(10);
 8000c4c:	200a      	movs	r0, #10
 8000c4e:	f000 fdc7 	bl	80017e0 <HAL_Delay>
  // Za potrebe testa, moramo testni napravi sporociti kateri senzor imamo
  #define OLD_SENSOR 0x73 // Odkomentiramo za LSM303DLHC / stari senzor
  //#define NEW_SENSOR 0x6E // Odkomentiramo za LSM303AGR / novi senzor

  #if defined(OLD_SENSOR) && !defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, OLD_SENSOR); // Povemo testni napravi, da imamo stari senzor
 8000c52:	2273      	movs	r2, #115	; 0x73
 8000c54:	214f      	movs	r1, #79	; 0x4f
 8000c56:	201e      	movs	r0, #30
 8000c58:	f7ff ffa6 	bl	8000ba8 <i2c1_pisiRegister>
  #elif !defined(OLD_SENSOR) && defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, NEW_SENSOR); // Povemo testni napravi, da imamo novi senzor
  #else
  for(;;); // V primeru napake, pocakamo tukaj
  #endif
  HAL_Delay(100);
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	f000 fdbf 	bl	80017e0 <HAL_Delay>

  // inicializiraj pospeskometer
  i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 8000c62:	2227      	movs	r2, #39	; 0x27
 8000c64:	2120      	movs	r1, #32
 8000c66:	2019      	movs	r0, #25
 8000c68:	f7ff ff9e 	bl	8000ba8 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 8000c6c:	2288      	movs	r2, #136	; 0x88
 8000c6e:	2123      	movs	r1, #35	; 0x23
 8000c70:	2019      	movs	r0, #25
 8000c72:	f7ff ff99 	bl	8000ba8 <i2c1_pisiRegister>
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <compare.10369>:
  MX_SPI1_Init();
  MX_USB_DEVICE_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */

  int compare(int X, int Y, int Z) {
 8000c7a:	b480      	push	{r7}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	f8c7 c000 	str.w	ip, [r7]
      X = abs(X);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	bfb8      	it	lt
 8000c90:	425b      	neglt	r3, r3
 8000c92:	60fb      	str	r3, [r7, #12]
      Y = abs(Y);
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bfb8      	it	lt
 8000c9a:	425b      	neglt	r3, r3
 8000c9c:	60bb      	str	r3, [r7, #8]
      Z = abs(Z);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bfb8      	it	lt
 8000ca4:	425b      	neglt	r3, r3
 8000ca6:	607b      	str	r3, [r7, #4]
      if (X > Y) {
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	dd05      	ble.n	8000cbc <compare.10369+0x42>
          if (X > Z) return 0;
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dd09      	ble.n	8000ccc <compare.10369+0x52>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	e009      	b.n	8000cd0 <compare.10369+0x56>
      } else if (Y > Z) return 1;
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dd01      	ble.n	8000cc8 <compare.10369+0x4e>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e003      	b.n	8000cd0 <compare.10369+0x56>
      else return 2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e001      	b.n	8000cd0 <compare.10369+0x56>

      return -1;
 8000ccc:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	0000      	movs	r0, r0
	...

08000ce0 <main>:
{
 8000ce0:	b5b0      	push	{r4, r5, r7, lr}
 8000ce2:	b0b6      	sub	sp, #216	; 0xd8
 8000ce4:	af00      	add	r7, sp, #0
int main(void)
 8000ce6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HAL_Init();
 8000cee:	f000 fd11 	bl	8001714 <HAL_Init>
  SystemClock_Config();
 8000cf2:	f000 f9e9 	bl	80010c8 <SystemClock_Config>
  MX_GPIO_Init();
 8000cf6:	f000 fb11 	bl	800131c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cfa:	f000 fa45 	bl	8001188 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000cfe:	f000 fa81 	bl	8001204 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000d02:	f008 fb0b 	bl	800931c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000d06:	f000 fabb 	bl	8001280 <MX_TIM3_Init>


  // zazenemo casovnik ter cakamo do preliva vrednosti
  HAL_TIM_Base_Start(&htim3);
 8000d0a:	48d3      	ldr	r0, [pc, #844]	; (8001058 <main+0x378>)
 8000d0c:	f004 fc44 	bl	8005598 <HAL_TIM_Base_Start>

  // pocistimo zastavico za preliv vrednosti
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000d10:	4bd1      	ldr	r3, [pc, #836]	; (8001058 <main+0x378>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f06f 0201 	mvn.w	r2, #1
 8000d18:	611a      	str	r2, [r3, #16]

  __HAL_I2C_ENABLE(&hi2c1);
 8000d1a:	4bd0      	ldr	r3, [pc, #832]	; (800105c <main+0x37c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4bce      	ldr	r3, [pc, #824]	; (800105c <main+0x37c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f042 0201 	orr.w	r2, r2, #1
 8000d28:	601a      	str	r2, [r3, #0]

  int16_t meritev[4];
  meritev[0] = 0xaaab;// glava za zaznamek zacetek paketa
 8000d2a:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8000d2e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

  char st = '2';
 8000d32:	2332      	movs	r3, #50	; 0x32
 8000d34:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  int counter = 999;
 8000d38:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000d3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  int counter2 = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  int16_t pcounter1 = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
  int16_t pcounter2 = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
  double Y;
  double Z;
  double mAccelCurrent;
  double mAccelLast;
  int temp;
  int numberOfBumps = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  clock_t t;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initLSM303DLHC();
 8000d58:	f7ff ff76 	bl	8000c48 <initLSM303DLHC>
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d62:	f000 ffeb 	bl	8001d3c <HAL_GPIO_ReadPin>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d02d      	beq.n	8000dc8 <main+0xe8>
		  HAL_Delay(500);
 8000d6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d70:	f000 fd36 	bl	80017e0 <HAL_Delay>
		  if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000d74:	2101      	movs	r1, #1
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f000 ffdf 	bl	8001d3c <HAL_GPIO_ReadPin>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d121      	bne.n	8000dc8 <main+0xe8>
			  switch(counter2) {
 8000d84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <main+0xb2>
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d007      	beq.n	8000da0 <main+0xc0>
 8000d90:	e01a      	b.n	8000dc8 <main+0xe8>
				  case 0:
					  counter = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
					  counter2 = 1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					  break;
 8000d9e:	e013      	b.n	8000dc8 <main+0xe8>
				  case 1:
					  counter = 1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
					  counter2 = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					  char bumps[125];
					  sprintf(bumps, "%i", numberOfBumps);
 8000dac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	49ab      	ldr	r1, [pc, #684]	; (8001060 <main+0x380>)
 8000db4:	4618      	mov	r0, r3
 8000db6:	f009 fc07 	bl	800a5c8 <siprintf>
					  CDC_Transmit_FS(&numberOfBumps, 1);
 8000dba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f008 fb69 	bl	8009498 <CDC_Transmit_FS>
					  break;
 8000dc6:	bf00      	nop
			  }
		  }
	  }
	  switch(counter) {
 8000dc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <main+0xf8>
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	f000 814b 	beq.w	800106c <main+0x38c>
 8000dd6:	e174      	b.n	80010c2 <main+0x3e2>
		  case 0:
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dde:	48a1      	ldr	r0, [pc, #644]	; (8001064 <main+0x384>)
 8000de0:	f000 ffc4 	bl	8001d6c <HAL_GPIO_WritePin>
			  meritev[1] = pcounter2; //stevilka paketa
 8000de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000de8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
			  i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritev[2], 6); //enkrat klicem, shrani v vse meritev[2], meritev[3] in meritev [4]
 8000dec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000df0:	1d1a      	adds	r2, r3, #4
 8000df2:	2306      	movs	r3, #6
 8000df4:	2128      	movs	r1, #40	; 0x28
 8000df6:	2019      	movs	r0, #25
 8000df8:	f7ff fef8 	bl	8000bec <i2c1_beriRegistre>
			  	  	  	  	  	  	  	  	  	  	  	  	  	  	  //dolzina je 2 zato, ker beremo 2 po 2 (0x28, 0x2A, 0x2B) - razlika med njimi je 2
			  X = (double)meritev[2]*8/65535;
 8000dfc:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fb8f 	bl	8000524 <__aeabi_i2d>
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	4b97      	ldr	r3, [pc, #604]	; (8001068 <main+0x388>)
 8000e0c:	f7ff fbf4 	bl	80005f8 <__aeabi_dmul>
 8000e10:	4603      	mov	r3, r0
 8000e12:	460c      	mov	r4, r1
 8000e14:	4618      	mov	r0, r3
 8000e16:	4621      	mov	r1, r4
 8000e18:	a389      	add	r3, pc, #548	; (adr r3, 8001040 <main+0x360>)
 8000e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1e:	f7ff fd15 	bl	800084c <__aeabi_ddiv>
 8000e22:	4603      	mov	r3, r0
 8000e24:	460c      	mov	r4, r1
 8000e26:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			  Y = (double)meritev[3]*8/65535;
 8000e2a:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fb78 	bl	8000524 <__aeabi_i2d>
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	4b8b      	ldr	r3, [pc, #556]	; (8001068 <main+0x388>)
 8000e3a:	f7ff fbdd 	bl	80005f8 <__aeabi_dmul>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	460c      	mov	r4, r1
 8000e42:	4618      	mov	r0, r3
 8000e44:	4621      	mov	r1, r4
 8000e46:	a37e      	add	r3, pc, #504	; (adr r3, 8001040 <main+0x360>)
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	f7ff fcfe 	bl	800084c <__aeabi_ddiv>
 8000e50:	4603      	mov	r3, r0
 8000e52:	460c      	mov	r4, r1
 8000e54:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
			  Z = (double)meritev[4]*8/65535;
 8000e58:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fb61 	bl	8000524 <__aeabi_i2d>
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	4b80      	ldr	r3, [pc, #512]	; (8001068 <main+0x388>)
 8000e68:	f7ff fbc6 	bl	80005f8 <__aeabi_dmul>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	460c      	mov	r4, r1
 8000e70:	4618      	mov	r0, r3
 8000e72:	4621      	mov	r1, r4
 8000e74:	a372      	add	r3, pc, #456	; (adr r3, 8001040 <main+0x360>)
 8000e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7a:	f7ff fce7 	bl	800084c <__aeabi_ddiv>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460c      	mov	r4, r1
 8000e82:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
	          //trenutno vrednost pospeškometra shranim v mAccelLast
	          mAccelLast = mAccelCurrent;
 8000e86:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8000e8a:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	          //izračunam trenutno vrednost pospeškometra
	          mAccelCurrent = sqrt(pow(X, 2) + pow(Y, 2) + pow(Z, 2));
 8000e8e:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 8001048 <main+0x368>
 8000e92:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 8000e96:	f00a ff77 	bl	800bd88 <pow>
 8000e9a:	ec55 4b10 	vmov	r4, r5, d0
 8000e9e:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 8001048 <main+0x368>
 8000ea2:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 8000ea6:	f00a ff6f 	bl	800bd88 <pow>
 8000eaa:	ec53 2b10 	vmov	r2, r3, d0
 8000eae:	4620      	mov	r0, r4
 8000eb0:	4629      	mov	r1, r5
 8000eb2:	f7ff f9eb 	bl	800028c <__adddf3>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460c      	mov	r4, r1
 8000eba:	4625      	mov	r5, r4
 8000ebc:	461c      	mov	r4, r3
 8000ebe:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8001048 <main+0x368>
 8000ec2:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 8000ec6:	f00a ff5f 	bl	800bd88 <pow>
 8000eca:	ec53 2b10 	vmov	r2, r3, d0
 8000ece:	4620      	mov	r0, r4
 8000ed0:	4629      	mov	r1, r5
 8000ed2:	f7ff f9db 	bl	800028c <__adddf3>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460c      	mov	r4, r1
 8000eda:	ec44 3b17 	vmov	d7, r3, r4
 8000ede:	eeb0 0a47 	vmov.f32	s0, s14
 8000ee2:	eef0 0a67 	vmov.f32	s1, s15
 8000ee6:	f00b f8bf 	bl	800c068 <sqrt>
 8000eea:	ed87 0b30 	vstr	d0, [r7, #192]	; 0xc0
	          temp = compare((int) X, (int) Y, (int) Z);
 8000eee:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8000ef2:	f7ff fe31 	bl	8000b58 <__aeabi_d2iz>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8000efc:	f7ff fe2c 	bl	8000b58 <__aeabi_d2iz>
 8000f00:	4605      	mov	r5, r0
 8000f02:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8000f06:	f7ff fe27 	bl	8000b58 <__aeabi_d2iz>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f10:	469c      	mov	ip, r3
 8000f12:	4629      	mov	r1, r5
 8000f14:	4620      	mov	r0, r4
 8000f16:	f7ff feb0 	bl	8000c7a <compare.10369>
 8000f1a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	          if (temp == 0) {
 8000f1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d129      	bne.n	8000f7a <main+0x29a>
	        	  if ((mAccelLast - mAccelCurrent) > 0.33) {
 8000f26:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000f2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8000f2e:	f7ff f9ab 	bl	8000288 <__aeabi_dsub>
 8000f32:	4603      	mov	r3, r0
 8000f34:	460c      	mov	r4, r1
 8000f36:	4618      	mov	r0, r3
 8000f38:	4621      	mov	r1, r4
 8000f3a:	a345      	add	r3, pc, #276	; (adr r3, 8001050 <main+0x370>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff fdea 	bl	8000b18 <__aeabi_dcmpgt>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d072      	beq.n	8001030 <main+0x350>
	        		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f50:	4844      	ldr	r0, [pc, #272]	; (8001064 <main+0x384>)
 8000f52:	f000 ff0b 	bl	8001d6c <HAL_GPIO_WritePin>
	        		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f5c:	4841      	ldr	r0, [pc, #260]	; (8001064 <main+0x384>)
 8000f5e:	f000 ff05 	bl	8001d6c <HAL_GPIO_WritePin>
	        		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f68:	483e      	ldr	r0, [pc, #248]	; (8001064 <main+0x384>)
 8000f6a:	f000 feff 	bl	8001d6c <HAL_GPIO_WritePin>
	        		  numberOfBumps++;
 8000f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f72:	3301      	adds	r3, #1
 8000f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000f78:	e05a      	b.n	8001030 <main+0x350>
	        	  }
	          } else if (temp == 1) {
 8000f7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d129      	bne.n	8000fd6 <main+0x2f6>
	        	  if ((mAccelLast - mAccelCurrent) > 0.33) {
 8000f82:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000f86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8000f8a:	f7ff f97d 	bl	8000288 <__aeabi_dsub>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460c      	mov	r4, r1
 8000f92:	4618      	mov	r0, r3
 8000f94:	4621      	mov	r1, r4
 8000f96:	a32e      	add	r3, pc, #184	; (adr r3, 8001050 <main+0x370>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f7ff fdbc 	bl	8000b18 <__aeabi_dcmpgt>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d044      	beq.n	8001030 <main+0x350>
	        		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fac:	482d      	ldr	r0, [pc, #180]	; (8001064 <main+0x384>)
 8000fae:	f000 fedd 	bl	8001d6c <HAL_GPIO_WritePin>
	        		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb8:	482a      	ldr	r0, [pc, #168]	; (8001064 <main+0x384>)
 8000fba:	f000 fed7 	bl	8001d6c <HAL_GPIO_WritePin>
	        		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc4:	4827      	ldr	r0, [pc, #156]	; (8001064 <main+0x384>)
 8000fc6:	f000 fed1 	bl	8001d6c <HAL_GPIO_WritePin>
	        		  numberOfBumps++;
 8000fca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fce:	3301      	adds	r3, #1
 8000fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000fd4:	e02c      	b.n	8001030 <main+0x350>
	        	  }
	          } else if (temp == 2) {
 8000fd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d128      	bne.n	8001030 <main+0x350>
	        	  if ((mAccelLast - mAccelCurrent) > 0.33) {
 8000fde:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000fe2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8000fe6:	f7ff f94f 	bl	8000288 <__aeabi_dsub>
 8000fea:	4603      	mov	r3, r0
 8000fec:	460c      	mov	r4, r1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	a317      	add	r3, pc, #92	; (adr r3, 8001050 <main+0x370>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff fd8e 	bl	8000b18 <__aeabi_dcmpgt>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d016      	beq.n	8001030 <main+0x350>
	        		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001008:	4816      	ldr	r0, [pc, #88]	; (8001064 <main+0x384>)
 800100a:	f000 feaf 	bl	8001d6c <HAL_GPIO_WritePin>
	        		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001014:	4813      	ldr	r0, [pc, #76]	; (8001064 <main+0x384>)
 8001016:	f000 fea9 	bl	8001d6c <HAL_GPIO_WritePin>
	        		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <main+0x384>)
 8001022:	f000 fea3 	bl	8001d6c <HAL_GPIO_WritePin>
	        		  numberOfBumps++;
 8001026:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800102a:	3301      	adds	r3, #1
 800102c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	        	  }
			  }
			  //char vrniAscii[125];
			  //sprintf(vrniAscii, "{\"ACC\":%i, \"X\":%.3f, \"Y\":%.3f, \"Z\":%.3f}\n\r", (int)pcounter2, (double)meritev[2]*8/65535, (double)meritev[3]*8/65535, (double)meritev[4]*8/65535);
			  //CDC_Transmit_FS(&vrniAscii, strlen(vrniAscii));
			  pcounter2++;
 8001030:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 8001034:	b29b      	uxth	r3, r3
 8001036:	3301      	adds	r3, #1
 8001038:	b29b      	uxth	r3, r3
 800103a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
			  break;
 800103e:	e040      	b.n	80010c2 <main+0x3e2>
 8001040:	00000000 	.word	0x00000000
 8001044:	40efffe0 	.word	0x40efffe0
 8001048:	00000000 	.word	0x00000000
 800104c:	40000000 	.word	0x40000000
 8001050:	51eb851f 	.word	0x51eb851f
 8001054:	3fd51eb8 	.word	0x3fd51eb8
 8001058:	200005e8 	.word	0x200005e8
 800105c:	2000059c 	.word	0x2000059c
 8001060:	0800cf08 	.word	0x0800cf08
 8001064:	48001000 	.word	0x48001000
 8001068:	40200000 	.word	0x40200000
		  case 1:
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001072:	4814      	ldr	r0, [pc, #80]	; (80010c4 <main+0x3e4>)
 8001074:	f000 fe7a 	bl	8001d6c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107e:	4811      	ldr	r0, [pc, #68]	; (80010c4 <main+0x3e4>)
 8001080:	f000 fe74 	bl	8001d6c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800108a:	480e      	ldr	r0, [pc, #56]	; (80010c4 <main+0x3e4>)
 800108c:	f000 fe6e 	bl	8001d6c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001096:	480b      	ldr	r0, [pc, #44]	; (80010c4 <main+0x3e4>)
 8001098:	f000 fe68 	bl	8001d6c <HAL_GPIO_WritePin>
			  pcounter2 = 0 ;
 800109c:	2300      	movs	r3, #0
 800109e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
	          mAccelLast = 0;
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	f04f 0400 	mov.w	r4, #0
 80010aa:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	          mAccelCurrent = 0;
 80010ae:	f04f 0300 	mov.w	r3, #0
 80010b2:	f04f 0400 	mov.w	r4, #0
 80010b6:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
	          numberOfBumps = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  break;
 80010c0:	bf00      	nop
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80010c2:	e64b      	b.n	8000d5c <main+0x7c>
 80010c4:	48001000 	.word	0x48001000

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b09e      	sub	sp, #120	; 0x78
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010d2:	2228      	movs	r2, #40	; 0x28
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f008 fe12 	bl	8009d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	463b      	mov	r3, r7
 80010ee:	223c      	movs	r2, #60	; 0x3c
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f008 fe04 	bl	8009d00 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80010f8:	2303      	movs	r3, #3
 80010fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001100:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001106:	2301      	movs	r3, #1
 8001108:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110a:	2310      	movs	r3, #16
 800110c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110e:	2302      	movs	r3, #2
 8001110:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001116:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001118:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800111c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001122:	4618      	mov	r0, r3
 8001124:	f002 fe98 	bl	8003e58 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800112e:	f000 f975 	bl	800141c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	230f      	movs	r3, #15
 8001134:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2302      	movs	r3, #2
 8001138:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001148:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800114c:	2102      	movs	r1, #2
 800114e:	4618      	mov	r0, r3
 8001150:	f003 fd8a 	bl	8004c68 <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800115a:	f000 f95f 	bl	800141c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <SystemClock_Config+0xbc>)
 8001160:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001166:	2300      	movs	r3, #0
 8001168:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	4618      	mov	r0, r3
 800116e:	f003 ff61 	bl	8005034 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001178:	f000 f950 	bl	800141c <Error_Handler>
  }
}
 800117c:	bf00      	nop
 800117e:	3778      	adds	r7, #120	; 0x78
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	00020020 	.word	0x00020020

08001188 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_I2C1_Init+0x74>)
 800118e:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <MX_I2C1_Init+0x78>)
 8001190:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_I2C1_Init+0x74>)
 8001194:	f240 220b 	movw	r2, #523	; 0x20b
 8001198:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_I2C1_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_I2C1_Init+0x74>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_I2C1_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_I2C1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_I2C1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_I2C1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_I2C1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <MX_I2C1_Init+0x74>)
 80011c6:	f000 fde9 	bl	8001d9c <HAL_I2C_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d0:	f000 f924 	bl	800141c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011d4:	2100      	movs	r1, #0
 80011d6:	4809      	ldr	r0, [pc, #36]	; (80011fc <MX_I2C1_Init+0x74>)
 80011d8:	f001 faba 	bl	8002750 <HAL_I2CEx_ConfigAnalogFilter>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80011e2:	f000 f91b 	bl	800141c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011e6:	2100      	movs	r1, #0
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_I2C1_Init+0x74>)
 80011ea:	f001 fafc 	bl	80027e6 <HAL_I2CEx_ConfigDigitalFilter>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80011f4:	f000 f912 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2000059c 	.word	0x2000059c
 8001200:	40005400 	.word	0x40005400

08001204 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_SPI1_Init+0x74>)
 800120a:	4a1c      	ldr	r2, [pc, #112]	; (800127c <MX_SPI1_Init+0x78>)
 800120c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_SPI1_Init+0x74>)
 8001210:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001216:	4b18      	ldr	r3, [pc, #96]	; (8001278 <MX_SPI1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_SPI1_Init+0x74>)
 800121e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001222:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_SPI1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <MX_SPI1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_SPI1_Init+0x74>)
 8001232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001236:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_SPI1_Init+0x74>)
 800123a:	2208      	movs	r2, #8
 800123c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_SPI1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_SPI1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_SPI1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_SPI1_Init+0x74>)
 8001252:	2207      	movs	r2, #7
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_SPI1_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_SPI1_Init+0x74>)
 800125e:	2208      	movs	r2, #8
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_SPI1_Init+0x74>)
 8001264:	f004 f896 	bl	8005394 <HAL_SPI_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800126e:	f000 f8d5 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000634 	.word	0x20000634
 800127c:	40013000 	.word	0x40013000

08001280 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_TIM3_Init+0x94>)
 80012a0:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <MX_TIM3_Init+0x98>)
 80012a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <MX_TIM3_Init+0x94>)
 80012a6:	2247      	movs	r2, #71	; 0x47
 80012a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_TIM3_Init+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_TIM3_Init+0x94>)
 80012b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_TIM3_Init+0x94>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_TIM3_Init+0x94>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012c4:	4813      	ldr	r0, [pc, #76]	; (8001314 <MX_TIM3_Init+0x94>)
 80012c6:	f004 f910 	bl	80054ea <HAL_TIM_Base_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012d0:	f000 f8a4 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	4619      	mov	r1, r3
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_TIM3_Init+0x94>)
 80012e2:	f004 f9bb 	bl	800565c <HAL_TIM_ConfigClockSource>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012ec:	f000 f896 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_TIM3_Init+0x94>)
 80012fe:	f004 fb91 	bl	8005a24 <HAL_TIMEx_MasterConfigSynchronization>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001308:	f000 f888 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200005e8 	.word	0x200005e8
 8001318:	40000400 	.word	0x40000400

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001332:	4b37      	ldr	r3, [pc, #220]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	4a36      	ldr	r2, [pc, #216]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800133c:	6153      	str	r3, [r2, #20]
 800133e:	4b34      	ldr	r3, [pc, #208]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <MX_GPIO_Init+0xf4>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	4a30      	ldr	r2, [pc, #192]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001350:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001354:	6153      	str	r3, [r2, #20]
 8001356:	4b2e      	ldr	r3, [pc, #184]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	4a2a      	ldr	r2, [pc, #168]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001368:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800136c:	6153      	str	r3, [r2, #20]
 800136e:	4b28      	ldr	r3, [pc, #160]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b25      	ldr	r3, [pc, #148]	; (8001410 <MX_GPIO_Init+0xf4>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	4a24      	ldr	r2, [pc, #144]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	6153      	str	r3, [r2, #20]
 8001386:	4b22      	ldr	r3, [pc, #136]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139c:	6153      	str	r3, [r2, #20]
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <MX_GPIO_Init+0xf4>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80013aa:	2200      	movs	r2, #0
 80013ac:	f64f 7108 	movw	r1, #65288	; 0xff08
 80013b0:	4818      	ldr	r0, [pc, #96]	; (8001414 <MX_GPIO_Init+0xf8>)
 80013b2:	f000 fcdb 	bl	8001d6c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80013b6:	2337      	movs	r3, #55	; 0x37
 80013b8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_GPIO_Init+0xfc>)
 80013bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4812      	ldr	r0, [pc, #72]	; (8001414 <MX_GPIO_Init+0xf8>)
 80013ca:	f000 fb3d 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80013ce:	f64f 7308 	movw	r3, #65288	; 0xff08
 80013d2:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	480b      	ldr	r0, [pc, #44]	; (8001414 <MX_GPIO_Init+0xf8>)
 80013e8:	f000 fb2e 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ec:	2301      	movs	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f000 fb21 	bl	8001a48 <HAL_GPIO_Init>

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	48001000 	.word	0x48001000
 8001418:	10120000 	.word	0x10120000

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_MspInit+0x44>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <HAL_MspInit+0x44>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6193      	str	r3, [r2, #24]
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_MspInit+0x44>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_MspInit+0x44>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_MspInit+0x44>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	61d3      	str	r3, [r2, #28]
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_MspInit+0x44>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001462:	2007      	movs	r0, #7
 8001464:	f000 faae 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <HAL_I2C_MspInit+0x7c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d127      	bne.n	80014e6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <HAL_I2C_MspInit+0x80>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	4a16      	ldr	r2, [pc, #88]	; (80014f4 <HAL_I2C_MspInit+0x80>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a0:	6153      	str	r3, [r2, #20]
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <HAL_I2C_MspInit+0x80>)
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80014ae:	23c0      	movs	r3, #192	; 0xc0
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b2:	2312      	movs	r3, #18
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014be:	2304      	movs	r3, #4
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	480b      	ldr	r0, [pc, #44]	; (80014f8 <HAL_I2C_MspInit+0x84>)
 80014ca:	f000 fabd 	bl	8001a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_I2C_MspInit+0x80>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <HAL_I2C_MspInit+0x80>)
 80014d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d8:	61d3      	str	r3, [r2, #28]
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_I2C_MspInit+0x80>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	; 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40005400 	.word	0x40005400
 80014f4:	40021000 	.word	0x40021000
 80014f8:	48000400 	.word	0x48000400

080014fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_SPI_MspInit+0x7c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d128      	bne.n	8001570 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_SPI_MspInit+0x80>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	4a16      	ldr	r2, [pc, #88]	; (800157c <HAL_SPI_MspInit+0x80>)
 8001524:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001528:	6193      	str	r3, [r2, #24]
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_SPI_MspInit+0x80>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_SPI_MspInit+0x80>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <HAL_SPI_MspInit+0x80>)
 800153c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001540:	6153      	str	r3, [r2, #20]
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_SPI_MspInit+0x80>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800154e:	23e0      	movs	r3, #224	; 0xe0
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800155e:	2305      	movs	r3, #5
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156c:	f000 fa6c 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	; 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40013000 	.word	0x40013000
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <HAL_TIM_Base_MspInit+0x38>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d10b      	bne.n	80015aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_TIM_Base_MspInit+0x3c>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <HAL_TIM_Base_MspInit+0x3c>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	61d3      	str	r3, [r2, #28]
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <HAL_TIM_Base_MspInit+0x3c>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40000400 	.word	0x40000400
 80015bc:	40021000 	.word	0x40021000

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001614:	f000 f8c4 	bl	80017a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001622:	f001 fa30 	bl	8002a86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20001330 	.word	0x20001330

08001630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001638:	4a14      	ldr	r2, [pc, #80]	; (800168c <_sbrk+0x5c>)
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <_sbrk+0x60>)
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <_sbrk+0x64>)
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <_sbrk+0x68>)
 8001650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	429a      	cmp	r2, r3
 800165e:	d207      	bcs.n	8001670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001660:	f008 fb24 	bl	8009cac <__errno>
 8001664:	4602      	mov	r2, r0
 8001666:	230c      	movs	r3, #12
 8001668:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	e009      	b.n	8001684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <_sbrk+0x64>)
 8001680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	2000a000 	.word	0x2000a000
 8001690:	00000400 	.word	0x00000400
 8001694:	2000036c 	.word	0x2000036c
 8001698:	20001620 	.word	0x20001620

0800169c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <SystemInit+0x20>)
 80016a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <SystemInit+0x20>)
 80016a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c4:	480d      	ldr	r0, [pc, #52]	; (80016fc <LoopForever+0x6>)
  ldr r1, =_edata
 80016c6:	490e      	ldr	r1, [pc, #56]	; (8001700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <LoopForever+0xe>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016dc:	4c0b      	ldr	r4, [pc, #44]	; (800170c <LoopForever+0x16>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ea:	f7ff ffd7 	bl	800169c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ee:	f008 fae3 	bl	8009cb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016f2:	f7ff faf5 	bl	8000ce0 <main>

080016f6 <LoopForever>:

LoopForever:
    b LoopForever
 80016f6:	e7fe      	b.n	80016f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016f8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80016fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001700:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001704:	0800d238 	.word	0x0800d238
  ldr r2, =_sbss
 8001708:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800170c:	20001620 	.word	0x20001620

08001710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001710:	e7fe      	b.n	8001710 <ADC1_2_IRQHandler>
	...

08001714 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_Init+0x28>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_Init+0x28>)
 800171e:	f043 0310 	orr.w	r3, r3, #16
 8001722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 f94d 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f808 	bl	8001740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001730:	f7ff fe7c 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40022000 	.word	0x40022000

08001740 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_InitTick+0x54>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_InitTick+0x58>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	fbb3 f3f1 	udiv	r3, r3, r1
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f965 	bl	8001a2e <HAL_SYSTICK_Config>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e00e      	b.n	800178c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b0f      	cmp	r3, #15
 8001772:	d80a      	bhi.n	800178a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001774:	2200      	movs	r2, #0
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f000 f92d 	bl	80019da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001780:	4a06      	ldr	r2, [pc, #24]	; (800179c <HAL_InitTick+0x5c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e000      	b.n	800178c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000000 	.word	0x20000000
 8001798:	20000008 	.word	0x20000008
 800179c:	20000004 	.word	0x20000004

080017a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_IncTick+0x20>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_IncTick+0x24>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <HAL_IncTick+0x24>)
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000008 	.word	0x20000008
 80017c4:	20000698 	.word	0x20000698

080017c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <HAL_GetTick+0x14>)
 80017ce:	681b      	ldr	r3, [r3, #0]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000698 	.word	0x20000698

080017e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e8:	f7ff ffee 	bl	80017c8 <HAL_GetTick>
 80017ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f8:	d005      	beq.n	8001806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_Delay+0x40>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001806:	bf00      	nop
 8001808:	f7ff ffde 	bl	80017c8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	429a      	cmp	r2, r3
 8001816:	d8f7      	bhi.n	8001808 <HAL_Delay+0x28>
  {
  }
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000008 	.word	0x20000008

08001824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800184c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001856:	4a04      	ldr	r2, [pc, #16]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	60d3      	str	r3, [r2, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <__NVIC_GetPriorityGrouping+0x18>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0307 	and.w	r3, r3, #7
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db0b      	blt.n	80018b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f003 021f 	and.w	r2, r3, #31
 80018a0:	4907      	ldr	r1, [pc, #28]	; (80018c0 <__NVIC_EnableIRQ+0x38>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	2001      	movs	r0, #1
 80018aa:	fa00 f202 	lsl.w	r2, r0, r2
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f7ff ff8e 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff29 	bl	8001824 <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff3e 	bl	800186c <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff8e 	bl	8001918 <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5d 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff31 	bl	8001888 <__NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ffa2 	bl	8001980 <SysTick_Config>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a56:	e154      	b.n	8001d02 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8146 	beq.w	8001cfc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d00b      	beq.n	8001a90 <HAL_GPIO_Init+0x48>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d007      	beq.n	8001a90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a84:	2b11      	cmp	r3, #17
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b12      	cmp	r3, #18
 8001a8e:	d130      	bne.n	8001af2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	091b      	lsrs	r3, r3, #4
 8001adc:	f003 0201 	and.w	r2, r3, #1
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0xea>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b12      	cmp	r3, #18
 8001b30:	d123      	bne.n	8001b7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	08da      	lsrs	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3208      	adds	r2, #8
 8001b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	220f      	movs	r2, #15
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	6939      	ldr	r1, [r7, #16]
 8001b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0203 	and.w	r2, r3, #3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 80a0 	beq.w	8001cfc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbc:	4b58      	ldr	r3, [pc, #352]	; (8001d20 <HAL_GPIO_Init+0x2d8>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a57      	ldr	r2, [pc, #348]	; (8001d20 <HAL_GPIO_Init+0x2d8>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b55      	ldr	r3, [pc, #340]	; (8001d20 <HAL_GPIO_Init+0x2d8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bd4:	4a53      	ldr	r2, [pc, #332]	; (8001d24 <HAL_GPIO_Init+0x2dc>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bfe:	d019      	beq.n	8001c34 <HAL_GPIO_Init+0x1ec>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a49      	ldr	r2, [pc, #292]	; (8001d28 <HAL_GPIO_Init+0x2e0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d013      	beq.n	8001c30 <HAL_GPIO_Init+0x1e8>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a48      	ldr	r2, [pc, #288]	; (8001d2c <HAL_GPIO_Init+0x2e4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d00d      	beq.n	8001c2c <HAL_GPIO_Init+0x1e4>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a47      	ldr	r2, [pc, #284]	; (8001d30 <HAL_GPIO_Init+0x2e8>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d007      	beq.n	8001c28 <HAL_GPIO_Init+0x1e0>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a46      	ldr	r2, [pc, #280]	; (8001d34 <HAL_GPIO_Init+0x2ec>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d101      	bne.n	8001c24 <HAL_GPIO_Init+0x1dc>
 8001c20:	2304      	movs	r3, #4
 8001c22:	e008      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c24:	2305      	movs	r3, #5
 8001c26:	e006      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e004      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e002      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c34:	2300      	movs	r3, #0
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	f002 0203 	and.w	r2, r2, #3
 8001c3c:	0092      	lsls	r2, r2, #2
 8001c3e:	4093      	lsls	r3, r2
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c46:	4937      	ldr	r1, [pc, #220]	; (8001d24 <HAL_GPIO_Init+0x2dc>)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c54:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c78:	4a2f      	ldr	r2, [pc, #188]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c7e:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ca2:	4a25      	ldr	r2, [pc, #148]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca8:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ccc:	4a1a      	ldr	r2, [pc, #104]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cf6:	4a10      	ldr	r2, [pc, #64]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f47f aea3 	bne.w	8001a58 <HAL_GPIO_Init+0x10>
  }
}
 8001d12:	bf00      	nop
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010000 	.word	0x40010000
 8001d28:	48000400 	.word	0x48000400
 8001d2c:	48000800 	.word	0x48000800
 8001d30:	48000c00 	.word	0x48000c00
 8001d34:	48001000 	.word	0x48001000
 8001d38:	40010400 	.word	0x40010400

08001d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	887b      	ldrh	r3, [r7, #2]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e001      	b.n	8001d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d88:	e002      	b.n	8001d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e081      	b.n	8001eb2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fb56 	bl	8001474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2224      	movs	r2, #36	; 0x24
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	e006      	b.n	8001e24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d104      	bne.n	8001e36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	ea42 0103 	orr.w	r1, r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	021a      	lsls	r2, r3, #8
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69d9      	ldr	r1, [r3, #28]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1a      	ldr	r2, [r3, #32]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	4608      	mov	r0, r1
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4603      	mov	r3, r0
 8001ecc:	817b      	strh	r3, [r7, #10]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	813b      	strh	r3, [r7, #8]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b20      	cmp	r3, #32
 8001ee0:	f040 80f9 	bne.w	80020d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <HAL_I2C_Mem_Write+0x34>
 8001eea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d105      	bne.n	8001efc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0ed      	b.n	80020d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_I2C_Mem_Write+0x4e>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e0e6      	b.n	80020d8 <HAL_I2C_Mem_Write+0x21c>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f12:	f7ff fc59 	bl	80017c8 <HAL_GetTick>
 8001f16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2319      	movs	r3, #25
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 fac3 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0d1      	b.n	80020d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2221      	movs	r2, #33	; 0x21
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2240      	movs	r2, #64	; 0x40
 8001f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a3a      	ldr	r2, [r7, #32]
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f5c:	88f8      	ldrh	r0, [r7, #6]
 8001f5e:	893a      	ldrh	r2, [r7, #8]
 8001f60:	8979      	ldrh	r1, [r7, #10]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f9d3 	bl	8002318 <I2C_RequestMemoryWrite>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0a9      	b.n	80020d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2bff      	cmp	r3, #255	; 0xff
 8001f8c:	d90e      	bls.n	8001fac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	22ff      	movs	r2, #255	; 0xff
 8001f92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	8979      	ldrh	r1, [r7, #10]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 fba5 	bl	80026f4 <I2C_TransferConfig>
 8001faa:	e00f      	b.n	8001fcc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	8979      	ldrh	r1, [r7, #10]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 fb94 	bl	80026f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 faad 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e07b      	b.n	80020d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d034      	beq.n	8002084 <HAL_I2C_Mem_Write+0x1c8>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	2b00      	cmp	r3, #0
 8002020:	d130      	bne.n	8002084 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002028:	2200      	movs	r2, #0
 800202a:	2180      	movs	r1, #128	; 0x80
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 fa3f 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e04d      	b.n	80020d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002040:	b29b      	uxth	r3, r3
 8002042:	2bff      	cmp	r3, #255	; 0xff
 8002044:	d90e      	bls.n	8002064 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	22ff      	movs	r2, #255	; 0xff
 800204a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	b2da      	uxtb	r2, r3
 8002052:	8979      	ldrh	r1, [r7, #10]
 8002054:	2300      	movs	r3, #0
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 fb49 	bl	80026f4 <I2C_TransferConfig>
 8002062:	e00f      	b.n	8002084 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002072:	b2da      	uxtb	r2, r3
 8002074:	8979      	ldrh	r1, [r7, #10]
 8002076:	2300      	movs	r3, #0
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 fb38 	bl	80026f4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d19e      	bne.n	8001fcc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fa8c 	bl	80025b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e01a      	b.n	80020d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2220      	movs	r2, #32
 80020a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_I2C_Mem_Write+0x224>)
 80020b6:	400b      	ands	r3, r1
 80020b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e000      	b.n	80020d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80020d6:	2302      	movs	r3, #2
  }
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	fe00e800 	.word	0xfe00e800

080020e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	817b      	strh	r3, [r7, #10]
 80020f6:	460b      	mov	r3, r1
 80020f8:	813b      	strh	r3, [r7, #8]
 80020fa:	4613      	mov	r3, r2
 80020fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b20      	cmp	r3, #32
 8002108:	f040 80fd 	bne.w	8002306 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <HAL_I2C_Mem_Read+0x34>
 8002112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800211e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0f1      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_I2C_Mem_Read+0x4e>
 800212e:	2302      	movs	r3, #2
 8002130:	e0ea      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800213a:	f7ff fb45 	bl	80017c8 <HAL_GetTick>
 800213e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2319      	movs	r3, #25
 8002146:	2201      	movs	r2, #1
 8002148:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f9af 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0d5      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2222      	movs	r2, #34	; 0x22
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2240      	movs	r2, #64	; 0x40
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a3a      	ldr	r2, [r7, #32]
 8002176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800217c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002184:	88f8      	ldrh	r0, [r7, #6]
 8002186:	893a      	ldrh	r2, [r7, #8]
 8002188:	8979      	ldrh	r1, [r7, #10]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	4603      	mov	r3, r0
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f913 	bl	80023c0 <I2C_RequestMemoryRead>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0ad      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2bff      	cmp	r3, #255	; 0xff
 80021b4:	d90e      	bls.n	80021d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	22ff      	movs	r2, #255	; 0xff
 80021ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	8979      	ldrh	r1, [r7, #10]
 80021c4:	4b52      	ldr	r3, [pc, #328]	; (8002310 <HAL_I2C_Mem_Read+0x22c>)
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 fa91 	bl	80026f4 <I2C_TransferConfig>
 80021d2:	e00f      	b.n	80021f4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	8979      	ldrh	r1, [r7, #10]
 80021e6:	4b4a      	ldr	r3, [pc, #296]	; (8002310 <HAL_I2C_Mem_Read+0x22c>)
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fa80 	bl	80026f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fa:	2200      	movs	r2, #0
 80021fc:	2104      	movs	r1, #4
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f956 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e07c      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002236:	b29b      	uxth	r3, r3
 8002238:	3b01      	subs	r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d034      	beq.n	80022b4 <HAL_I2C_Mem_Read+0x1d0>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224e:	2b00      	cmp	r3, #0
 8002250:	d130      	bne.n	80022b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	2200      	movs	r2, #0
 800225a:	2180      	movs	r1, #128	; 0x80
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f927 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e04d      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002270:	b29b      	uxth	r3, r3
 8002272:	2bff      	cmp	r3, #255	; 0xff
 8002274:	d90e      	bls.n	8002294 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	22ff      	movs	r2, #255	; 0xff
 800227a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	b2da      	uxtb	r2, r3
 8002282:	8979      	ldrh	r1, [r7, #10]
 8002284:	2300      	movs	r3, #0
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 fa31 	bl	80026f4 <I2C_TransferConfig>
 8002292:	e00f      	b.n	80022b4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	8979      	ldrh	r1, [r7, #10]
 80022a6:	2300      	movs	r3, #0
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fa20 	bl	80026f4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d19a      	bne.n	80021f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f974 	bl	80025b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e01a      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2220      	movs	r2, #32
 80022d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_I2C_Mem_Read+0x230>)
 80022e6:	400b      	ands	r3, r1
 80022e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2220      	movs	r2, #32
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002306:	2302      	movs	r3, #2
  }
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	80002400 	.word	0x80002400
 8002314:	fe00e800 	.word	0xfe00e800

08002318 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	4608      	mov	r0, r1
 8002322:	4611      	mov	r1, r2
 8002324:	461a      	mov	r2, r3
 8002326:	4603      	mov	r3, r0
 8002328:	817b      	strh	r3, [r7, #10]
 800232a:	460b      	mov	r3, r1
 800232c:	813b      	strh	r3, [r7, #8]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	8979      	ldrh	r1, [r7, #10]
 8002338:	4b20      	ldr	r3, [pc, #128]	; (80023bc <I2C_RequestMemoryWrite+0xa4>)
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f9d7 	bl	80026f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	69b9      	ldr	r1, [r7, #24]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f8f0 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e02c      	b.n	80023b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d105      	bne.n	800236c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002360:	893b      	ldrh	r3, [r7, #8]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
 800236a:	e015      	b.n	8002398 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800236c:	893b      	ldrh	r3, [r7, #8]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	b29b      	uxth	r3, r3
 8002372:	b2da      	uxtb	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	69b9      	ldr	r1, [r7, #24]
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f8d6 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e012      	b.n	80023b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800238e:	893b      	ldrh	r3, [r7, #8]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2200      	movs	r2, #0
 80023a0:	2180      	movs	r1, #128	; 0x80
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f884 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	80002000 	.word	0x80002000

080023c0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	4608      	mov	r0, r1
 80023ca:	4611      	mov	r1, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	4603      	mov	r3, r0
 80023d0:	817b      	strh	r3, [r7, #10]
 80023d2:	460b      	mov	r3, r1
 80023d4:	813b      	strh	r3, [r7, #8]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	8979      	ldrh	r1, [r7, #10]
 80023e0:	4b20      	ldr	r3, [pc, #128]	; (8002464 <I2C_RequestMemoryRead+0xa4>)
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2300      	movs	r3, #0
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f984 	bl	80026f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	69b9      	ldr	r1, [r7, #24]
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f89d 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e02c      	b.n	800245a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d105      	bne.n	8002412 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002406:	893b      	ldrh	r3, [r7, #8]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
 8002410:	e015      	b.n	800243e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002412:	893b      	ldrh	r3, [r7, #8]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	b29b      	uxth	r3, r3
 8002418:	b2da      	uxtb	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	69b9      	ldr	r1, [r7, #24]
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f883 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e012      	b.n	800245a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002434:	893b      	ldrh	r3, [r7, #8]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2200      	movs	r2, #0
 8002446:	2140      	movs	r1, #64	; 0x40
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 f831 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	80002000 	.word	0x80002000

08002468 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b02      	cmp	r3, #2
 800247c:	d103      	bne.n	8002486 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2200      	movs	r2, #0
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b01      	cmp	r3, #1
 8002492:	d007      	beq.n	80024a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	619a      	str	r2, [r3, #24]
  }
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024c0:	e022      	b.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d01e      	beq.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ca:	f7ff f97d 	bl	80017c8 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d302      	bcc.n	80024e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d113      	bne.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e00f      	b.n	8002528 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4013      	ands	r3, r2
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	429a      	cmp	r2, r3
 8002516:	bf0c      	ite	eq
 8002518:	2301      	moveq	r3, #1
 800251a:	2300      	movne	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	429a      	cmp	r2, r3
 8002524:	d0cd      	beq.n	80024c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800253c:	e02c      	b.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f870 	bl	8002628 <I2C_IsAcknowledgeFailed>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e02a      	b.n	80025a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d01e      	beq.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255a:	f7ff f935 	bl	80017c8 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	429a      	cmp	r2, r3
 8002568:	d302      	bcc.n	8002570 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d113      	bne.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	f043 0220 	orr.w	r2, r3, #32
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e007      	b.n	80025a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d1cb      	bne.n	800253e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025bc:	e028      	b.n	8002610 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f830 	bl	8002628 <I2C_IsAcknowledgeFailed>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e026      	b.n	8002620 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d2:	f7ff f8f9 	bl	80017c8 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d302      	bcc.n	80025e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d113      	bne.n	8002610 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	f043 0220 	orr.w	r2, r3, #32
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e007      	b.n	8002620 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b20      	cmp	r3, #32
 800261c:	d1cf      	bne.n	80025be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b10      	cmp	r3, #16
 8002640:	d151      	bne.n	80026e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002642:	e022      	b.n	800268a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d01e      	beq.n	800268a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264c:	f7ff f8bc 	bl	80017c8 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	429a      	cmp	r2, r3
 800265a:	d302      	bcc.n	8002662 <I2C_IsAcknowledgeFailed+0x3a>
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d113      	bne.n	800268a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f043 0220 	orr.w	r2, r3, #32
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e02e      	b.n	80026e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b20      	cmp	r3, #32
 8002696:	d1d5      	bne.n	8002644 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2210      	movs	r2, #16
 800269e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2220      	movs	r2, #32
 80026a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f7ff fedd 	bl	8002468 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80026ba:	400b      	ands	r3, r1
 80026bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f043 0204 	orr.w	r2, r3, #4
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	fe00e800 	.word	0xfe00e800

080026f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	817b      	strh	r3, [r7, #10]
 8002702:	4613      	mov	r3, r2
 8002704:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	0d5b      	lsrs	r3, r3, #21
 8002710:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002714:	4b0d      	ldr	r3, [pc, #52]	; (800274c <I2C_TransferConfig+0x58>)
 8002716:	430b      	orrs	r3, r1
 8002718:	43db      	mvns	r3, r3
 800271a:	ea02 0103 	and.w	r1, r2, r3
 800271e:	897b      	ldrh	r3, [r7, #10]
 8002720:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002724:	7a7b      	ldrb	r3, [r7, #9]
 8002726:	041b      	lsls	r3, r3, #16
 8002728:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	431a      	orrs	r2, r3
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	431a      	orrs	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	03ff63ff 	.word	0x03ff63ff

08002750 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b20      	cmp	r3, #32
 8002764:	d138      	bne.n	80027d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002770:	2302      	movs	r3, #2
 8002772:	e032      	b.n	80027da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2224      	movs	r2, #36	; 0x24
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6819      	ldr	r1, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e000      	b.n	80027da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027d8:	2302      	movs	r3, #2
  }
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d139      	bne.n	8002870 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002806:	2302      	movs	r3, #2
 8002808:	e033      	b.n	8002872 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2224      	movs	r2, #36	; 0x24
 8002816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002838:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	e000      	b.n	8002872 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002870:	2302      	movs	r3, #2
  }
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800287e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002880:	b08b      	sub	sp, #44	; 0x2c
 8002882:	af06      	add	r7, sp, #24
 8002884:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0d0      	b.n	8002a32 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d106      	bne.n	80028aa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f006 ff2b 	bl	8009700 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2203      	movs	r2, #3
 80028ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 f94b 	bl	8005b52 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028bc:	2300      	movs	r3, #0
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	e04c      	b.n	800295c <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	3301      	adds	r3, #1
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	440b      	add	r3, r1
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	b298      	uxth	r0, r3
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	440b      	add	r3, r1
 80028fe:	3336      	adds	r3, #54	; 0x36
 8002900:	4602      	mov	r2, r0
 8002902:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	3303      	adds	r3, #3
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	3338      	adds	r3, #56	; 0x38
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	440b      	add	r3, r1
 800293c:	333c      	adds	r3, #60	; 0x3c
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	440b      	add	r3, r1
 8002950:	3340      	adds	r3, #64	; 0x40
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	3301      	adds	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	429a      	cmp	r2, r3
 8002964:	d3ad      	bcc.n	80028c2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
 800296a:	e044      	b.n	80029f6 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002994:	7bfa      	ldrb	r2, [r7, #15]
 8002996:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	440b      	add	r3, r1
 80029d2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	3301      	adds	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d3b5      	bcc.n	800296c <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	687e      	ldr	r6, [r7, #4]
 8002a08:	466d      	mov	r5, sp
 8002a0a:	f106 0410 	add.w	r4, r6, #16
 8002a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	602b      	str	r3, [r5, #0]
 8002a16:	1d33      	adds	r3, r6, #4
 8002a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a1a:	6838      	ldr	r0, [r7, #0]
 8002a1c:	f003 f8b4 	bl	8005b88 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a3a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_PCD_Start+0x16>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e016      	b.n	8002a7e <HAL_PCD_Start+0x44>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f003 f861 	bl	8005b24 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002a62:	2101      	movs	r1, #1
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f007 f8e9 	bl	8009c3c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f005 f83a 	bl	8007ae8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f005 f833 	bl	8007afe <USB_ReadInterrupts>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa2:	d102      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 faf6 	bl	8003096 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f005 f825 	bl	8007afe <USB_ReadInterrupts>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002abe:	d112      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad2:	b292      	uxth	r2, r2
 8002ad4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f006 feb2 	bl	8009842 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ade:	2100      	movs	r1, #0
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f8c7 	bl	8002c74 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f005 f807 	bl	8007afe <USB_ReadInterrupts>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002afa:	d10b      	bne.n	8002b14 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b0e:	b292      	uxth	r2, r2
 8002b10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f004 fff0 	bl	8007afe <USB_ReadInterrupts>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b28:	d10b      	bne.n	8002b42 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b3c:	b292      	uxth	r2, r2
 8002b3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f004 ffd9 	bl	8007afe <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b56:	d126      	bne.n	8002ba6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0204 	bic.w	r2, r2, #4
 8002b6a:	b292      	uxth	r2, r2
 8002b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0208 	bic.w	r2, r2, #8
 8002b82:	b292      	uxth	r2, r2
 8002b84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f006 fe93 	bl	80098b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ba0:	b292      	uxth	r2, r2
 8002ba2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 ffa7 	bl	8007afe <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bba:	d126      	bne.n	8002c0a <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0208 	orr.w	r2, r2, #8
 8002bce:	b292      	uxth	r2, r2
 8002bd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be6:	b292      	uxth	r2, r2
 8002be8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0204 	orr.w	r2, r2, #4
 8002bfe:	b292      	uxth	r2, r2
 8002c00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f006 fe3b 	bl	8009880 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f004 ff75 	bl	8007afe <USB_ReadInterrupts>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c1e:	d10e      	bne.n	8002c3e <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c32:	b292      	uxth	r2, r2
 8002c34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f006 fdf4 	bl	8009826 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f004 ff5b 	bl	8007afe <USB_ReadInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c52:	d10b      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c66:	b292      	uxth	r2, r2
 8002c68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_PCD_SetAddress+0x1a>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e013      	b.n	8002cb6 <HAL_PCD_SetAddress+0x42>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f004 ff0a 	bl	8007ac0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	4608      	mov	r0, r1
 8002cc8:	4611      	mov	r1, r2
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4603      	mov	r3, r0
 8002cce:	70fb      	strb	r3, [r7, #3]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	803b      	strh	r3, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	da0e      	bge.n	8002d02 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	705a      	strb	r2, [r3, #1]
 8002d00:	e00e      	b.n	8002d20 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	f003 0207 	and.w	r2, r3, #7
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4413      	add	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d2c:	883a      	ldrh	r2, [r7, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	78ba      	ldrb	r2, [r7, #2]
 8002d36:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	785b      	ldrb	r3, [r3, #1]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d004      	beq.n	8002d4a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d4a:	78bb      	ldrb	r3, [r7, #2]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d102      	bne.n	8002d56 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_PCD_EP_Open+0xa6>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e00e      	b.n	8002d82 <HAL_PCD_EP_Open+0xc4>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68f9      	ldr	r1, [r7, #12]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f002 ff2a 	bl	8005bcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002d80:	7afb      	ldrb	r3, [r7, #11]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	da0e      	bge.n	8002dbc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	705a      	strb	r2, [r3, #1]
 8002dba:	e00e      	b.n	8002dda <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	f003 0207 	and.w	r2, r3, #7
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_PCD_EP_Close+0x6a>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e00e      	b.n	8002e12 <HAL_PCD_EP_Close+0x88>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68f9      	ldr	r1, [r7, #12]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f003 fa50 	bl	80062a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	460b      	mov	r3, r1
 8002e28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e2a:	7afb      	ldrb	r3, [r7, #11]
 8002e2c:	f003 0207 	and.w	r2, r3, #7
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2200      	movs	r2, #0
 8002e52:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2200      	movs	r2, #0
 8002e58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e5a:	7afb      	ldrb	r3, [r7, #11]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e66:	7afb      	ldrb	r3, [r7, #11]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6979      	ldr	r1, [r7, #20]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fc03 	bl	8006682 <USB_EPStartXfer>
 8002e7c:	e005      	b.n	8002e8a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6979      	ldr	r1, [r7, #20]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 fbfc 	bl	8006682 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 0207 	and.w	r2, r3, #7
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	440b      	add	r3, r1
 8002eb2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed4:	7afb      	ldrb	r3, [r7, #11]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2200      	movs	r2, #0
 8002f08:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f10:	7afb      	ldrb	r3, [r7, #11]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f1c:	7afb      	ldrb	r3, [r7, #11]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6979      	ldr	r1, [r7, #20]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f003 fba8 	bl	8006682 <USB_EPStartXfer>
 8002f32:	e005      	b.n	8002f40 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6979      	ldr	r1, [r7, #20]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 fba1 	bl	8006682 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b084      	sub	sp, #16
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	460b      	mov	r3, r1
 8002f54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 0207 	and.w	r2, r3, #7
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d901      	bls.n	8002f68 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e03e      	b.n	8002fe6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	da0e      	bge.n	8002f8e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	4413      	add	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	705a      	strb	r2, [r3, #1]
 8002f8c:	e00c      	b.n	8002fa8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_PCD_EP_SetStall+0x7e>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e00e      	b.n	8002fe6 <HAL_PCD_EP_SetStall+0x9c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68f9      	ldr	r1, [r7, #12]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f004 fc73 	bl	80078c2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	f003 020f 	and.w	r2, r3, #15
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d901      	bls.n	800300c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e040      	b.n	800308e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800300c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003010:	2b00      	cmp	r3, #0
 8003012:	da0e      	bge.n	8003032 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	4413      	add	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	705a      	strb	r2, [r3, #1]
 8003030:	e00e      	b.n	8003050 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	f003 0207 	and.w	r2, r3, #7
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	b2da      	uxtb	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_PCD_EP_ClrStall+0x82>
 800306c:	2302      	movs	r3, #2
 800306e:	e00e      	b.n	800308e <HAL_PCD_EP_ClrStall+0xa0>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68f9      	ldr	r1, [r7, #12]
 800307e:	4618      	mov	r0, r3
 8003080:	f004 fc70 	bl	8007964 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b08e      	sub	sp, #56	; 0x38
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800309e:	e2df      	b.n	8003660 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030a8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80030aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80030b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f040 8158 	bne.w	8003370 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80030c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d152      	bne.n	8003170 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030da:	81fb      	strh	r3, [r7, #14]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	89fb      	ldrh	r3, [r7, #14]
 80030e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3328      	adds	r3, #40	; 0x28
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4413      	add	r3, r2
 8003108:	3302      	adds	r3, #2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	4413      	add	r3, r2
 8003112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	441a      	add	r2, r3
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800312e:	2100      	movs	r1, #0
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f006 fb5e 	bl	80097f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 828e 	beq.w	8003660 <PCD_EP_ISR_Handler+0x5ca>
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f040 8289 	bne.w	8003660 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800315a:	b2da      	uxtb	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	b292      	uxth	r2, r2
 8003162:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800316e:	e277      	b.n	8003660 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003180:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003186:	2b00      	cmp	r3, #0
 8003188:	d034      	beq.n	80031f4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003192:	b29b      	uxth	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	3306      	adds	r3, #6
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	f004 fced 	bl	8007ba8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031da:	4013      	ands	r3, r2
 80031dc:	823b      	strh	r3, [r7, #16]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	8a3a      	ldrh	r2, [r7, #16]
 80031e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031e8:	b292      	uxth	r2, r2
 80031ea:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f006 fad3 	bl	8009798 <HAL_PCD_SetupStageCallback>
 80031f2:	e235      	b.n	8003660 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031f4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f280 8231 	bge.w	8003660 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	b29a      	uxth	r2, r3
 8003206:	f640 738f 	movw	r3, #3983	; 0xf8f
 800320a:	4013      	ands	r3, r2
 800320c:	83bb      	strh	r3, [r7, #28]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	8bba      	ldrh	r2, [r7, #28]
 8003214:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003218:	b292      	uxth	r2, r2
 800321a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003224:	b29b      	uxth	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	3306      	adds	r3, #6
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d019      	beq.n	8003284 <PCD_EP_ISR_Handler+0x1ee>
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d015      	beq.n	8003284 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	6959      	ldr	r1, [r3, #20]
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003268:	b29b      	uxth	r3, r3
 800326a:	f004 fc9d 	bl	8007ba8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	441a      	add	r2, r3
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800327c:	2100      	movs	r1, #0
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f006 fa9c 	bl	80097bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003292:	b29b      	uxth	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	4413      	add	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d112      	bne.n	80032d2 <PCD_EP_ISR_Handler+0x23c>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	801a      	strh	r2, [r3, #0]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	801a      	strh	r2, [r3, #0]
 80032d0:	e02f      	b.n	8003332 <PCD_EP_ISR_Handler+0x29c>
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b3e      	cmp	r3, #62	; 0x3e
 80032d8:	d813      	bhi.n	8003302 <PCD_EP_ISR_Handler+0x26c>
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	633b      	str	r3, [r7, #48]	; 0x30
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <PCD_EP_ISR_Handler+0x25e>
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	3301      	adds	r3, #1
 80032f2:	633b      	str	r3, [r7, #48]	; 0x30
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	029b      	lsls	r3, r3, #10
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	801a      	strh	r2, [r3, #0]
 8003300:	e017      	b.n	8003332 <PCD_EP_ISR_Handler+0x29c>
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	633b      	str	r3, [r7, #48]	; 0x30
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <PCD_EP_ISR_Handler+0x286>
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	3b01      	subs	r3, #1
 800331a:	633b      	str	r3, [r7, #48]	; 0x30
 800331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331e:	b29b      	uxth	r3, r3
 8003320:	029b      	lsls	r3, r3, #10
 8003322:	b29b      	uxth	r3, r3
 8003324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800332c:	b29a      	uxth	r2, r3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	b29b      	uxth	r3, r3
 800333a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800333e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003342:	827b      	strh	r3, [r7, #18]
 8003344:	8a7b      	ldrh	r3, [r7, #18]
 8003346:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800334a:	827b      	strh	r3, [r7, #18]
 800334c:	8a7b      	ldrh	r3, [r7, #18]
 800334e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003352:	827b      	strh	r3, [r7, #18]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	8a7b      	ldrh	r3, [r7, #18]
 800335a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800335e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336a:	b29b      	uxth	r3, r3
 800336c:	8013      	strh	r3, [r2, #0]
 800336e:	e177      	b.n	8003660 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003382:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003386:	2b00      	cmp	r3, #0
 8003388:	f280 80ea 	bge.w	8003560 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	b29a      	uxth	r2, r3
 800339e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033a2:	4013      	ands	r3, r2
 80033a4:	853b      	strh	r3, [r7, #40]	; 0x28
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80033b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033ba:	b292      	uxth	r2, r2
 80033bc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033be:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	7b1b      	ldrb	r3, [r3, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d122      	bne.n	8003422 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	3306      	adds	r3, #6
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003404:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003406:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8087 	beq.w	800351c <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	6959      	ldr	r1, [r3, #20]
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	88da      	ldrh	r2, [r3, #6]
 800341a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800341c:	f004 fbc4 	bl	8007ba8 <USB_ReadPMA>
 8003420:	e07c      	b.n	800351c <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	78db      	ldrb	r3, [r3, #3]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d108      	bne.n	800343c <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800342a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800342c:	461a      	mov	r2, r3
 800342e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f923 	bl	800367c <HAL_PCD_EP_DB_Receive>
 8003436:	4603      	mov	r3, r0
 8003438:	86fb      	strh	r3, [r7, #54]	; 0x36
 800343a:	e06f      	b.n	800351c <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	b29b      	uxth	r3, r3
 800344e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003456:	847b      	strh	r3, [r7, #34]	; 0x22
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	441a      	add	r2, r3
 8003466:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800346c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003474:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003478:	b29b      	uxth	r3, r3
 800347a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	b29b      	uxth	r3, r3
 800348e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d021      	beq.n	80034da <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800349e:	b29b      	uxth	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	3302      	adds	r3, #2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034be:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80034c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d02a      	beq.n	800351c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	6959      	ldr	r1, [r3, #20]
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	891a      	ldrh	r2, [r3, #8]
 80034d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034d4:	f004 fb68 	bl	8007ba8 <USB_ReadPMA>
 80034d8:	e020      	b.n	800351c <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	461a      	mov	r2, r3
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	3306      	adds	r3, #6
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003502:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003504:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	6959      	ldr	r1, [r3, #20]
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	895a      	ldrh	r2, [r3, #10]
 8003516:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003518:	f004 fb46 	bl	8007ba8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	69da      	ldr	r2, [r3, #28]
 8003520:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003522:	441a      	add	r2, r3
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800352e:	441a      	add	r2, r3
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d004      	beq.n	8003546 <PCD_EP_ISR_Handler+0x4b0>
 800353c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	429a      	cmp	r2, r3
 8003544:	d206      	bcs.n	8003554 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f006 f935 	bl	80097bc <HAL_PCD_DataOutStageCallback>
 8003552:	e005      	b.n	8003560 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800355a:	4618      	mov	r0, r3
 800355c:	f003 f891 	bl	8006682 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003560:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d07a      	beq.n	8003660 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800356a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	4413      	add	r3, r2
 800357c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003598:	843b      	strh	r3, [r7, #32]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	441a      	add	r2, r3
 80035a8:	8c3b      	ldrh	r3, [r7, #32]
 80035aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	78db      	ldrb	r3, [r3, #3]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d108      	bne.n	80035d0 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d146      	bne.n	8003654 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80035c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d141      	bne.n	8003654 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035d8:	b29b      	uxth	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4413      	add	r3, r2
 80035e4:	3302      	adds	r3, #2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035f8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	8bfb      	ldrh	r3, [r7, #30]
 8003600:	429a      	cmp	r2, r3
 8003602:	d906      	bls.n	8003612 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	699a      	ldr	r2, [r3, #24]
 8003608:	8bfb      	ldrh	r3, [r7, #30]
 800360a:	1ad2      	subs	r2, r2, r3
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	619a      	str	r2, [r3, #24]
 8003610:	e002      	b.n	8003618 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d106      	bne.n	800362e <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f006 f8e3 	bl	80097f2 <HAL_PCD_DataInStageCallback>
 800362c:	e018      	b.n	8003660 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	8bfb      	ldrh	r3, [r7, #30]
 8003634:	441a      	add	r2, r3
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	8bfb      	ldrh	r3, [r7, #30]
 8003640:	441a      	add	r2, r3
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800364c:	4618      	mov	r0, r3
 800364e:	f003 f818 	bl	8006682 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003652:	e005      	b.n	8003660 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003654:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003656:	461a      	mov	r2, r3
 8003658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f91b 	bl	8003896 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003668:	b29b      	uxth	r3, r3
 800366a:	b21b      	sxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	f6ff ad17 	blt.w	80030a0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3738      	adds	r7, #56	; 0x38
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	4613      	mov	r3, r2
 8003688:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d07e      	beq.n	8003792 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369c:	b29b      	uxth	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	3302      	adds	r3, #2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036bc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	8b7b      	ldrh	r3, [r7, #26]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d306      	bcc.n	80036d6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	699a      	ldr	r2, [r3, #24]
 80036cc:	8b7b      	ldrh	r3, [r7, #26]
 80036ce:	1ad2      	subs	r2, r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	619a      	str	r2, [r3, #24]
 80036d4:	e002      	b.n	80036dc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2200      	movs	r2, #0
 80036da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d123      	bne.n	800372c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fe:	833b      	strh	r3, [r7, #24]
 8003700:	8b3b      	ldrh	r3, [r7, #24]
 8003702:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003706:	833b      	strh	r3, [r7, #24]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	441a      	add	r2, r3
 8003716:	8b3b      	ldrh	r3, [r7, #24]
 8003718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800371c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003728:	b29b      	uxth	r3, r3
 800372a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01f      	beq.n	8003776 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003750:	82fb      	strh	r3, [r7, #22]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	441a      	add	r2, r3
 8003760:	8afb      	ldrh	r3, [r7, #22]
 8003762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800376a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003772:	b29b      	uxth	r3, r3
 8003774:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003776:	8b7b      	ldrh	r3, [r7, #26]
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8087 	beq.w	800388c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6959      	ldr	r1, [r3, #20]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	891a      	ldrh	r2, [r3, #8]
 800378a:	8b7b      	ldrh	r3, [r7, #26]
 800378c:	f004 fa0c 	bl	8007ba8 <USB_ReadPMA>
 8003790:	e07c      	b.n	800388c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800379a:	b29b      	uxth	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	3306      	adds	r3, #6
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	699a      	ldr	r2, [r3, #24]
 80037c0:	8b7b      	ldrh	r3, [r7, #26]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d306      	bcc.n	80037d4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	8b7b      	ldrh	r3, [r7, #26]
 80037cc:	1ad2      	subs	r2, r2, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	619a      	str	r2, [r3, #24]
 80037d2:	e002      	b.n	80037da <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2200      	movs	r2, #0
 80037d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d123      	bne.n	800382a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fc:	83fb      	strh	r3, [r7, #30]
 80037fe:	8bfb      	ldrh	r3, [r7, #30]
 8003800:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003804:	83fb      	strh	r3, [r7, #30]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	441a      	add	r2, r3
 8003814:	8bfb      	ldrh	r3, [r7, #30]
 8003816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800381a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800381e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003826:	b29b      	uxth	r3, r3
 8003828:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d11f      	bne.n	8003874 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384e:	83bb      	strh	r3, [r7, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	441a      	add	r2, r3
 800385e:	8bbb      	ldrh	r3, [r7, #28]
 8003860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800386c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003870:	b29b      	uxth	r3, r3
 8003872:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003874:	8b7b      	ldrh	r3, [r7, #26]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	6959      	ldr	r1, [r3, #20]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	895a      	ldrh	r2, [r3, #10]
 8003886:	8b7b      	ldrh	r3, [r7, #26]
 8003888:	f004 f98e 	bl	8007ba8 <USB_ReadPMA>
    }
  }

  return count;
 800388c:	8b7b      	ldrh	r3, [r7, #26]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3720      	adds	r7, #32
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b092      	sub	sp, #72	; 0x48
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	4613      	mov	r3, r2
 80038a2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8132 	beq.w	8003b14 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	3302      	adds	r3, #2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d906      	bls.n	80038f2 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	699a      	ldr	r2, [r3, #24]
 80038e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038ea:	1ad2      	subs	r2, r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	619a      	str	r2, [r3, #24]
 80038f0:	e002      	b.n	80038f8 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2200      	movs	r2, #0
 80038f6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d12c      	bne.n	800395a <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	4619      	mov	r1, r3
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f005 ff73 	bl	80097f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 822f 	beq.w	8003d76 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b29b      	uxth	r3, r3
 800392a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003932:	827b      	strh	r3, [r7, #18]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	441a      	add	r2, r3
 8003942:	8a7b      	ldrh	r3, [r7, #18]
 8003944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800394c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003954:	b29b      	uxth	r3, r3
 8003956:	8013      	strh	r3, [r2, #0]
 8003958:	e20d      	b.n	8003d76 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01f      	beq.n	80039a4 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	461a      	mov	r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	b29b      	uxth	r3, r3
 8003976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800397a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	441a      	add	r2, r3
 800398e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800399c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	f040 81e3 	bne.w	8003d76 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039b6:	441a      	add	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039c2:	441a      	add	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	6a1a      	ldr	r2, [r3, #32]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d309      	bcc.n	80039e8 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6a1a      	ldr	r2, [r3, #32]
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	1ad2      	subs	r2, r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	621a      	str	r2, [r3, #32]
 80039e6:	e014      	b.n	8003a12 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80039f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039f2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80039fc:	e009      	b.n	8003a12 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	785b      	ldrb	r3, [r3, #1]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d155      	bne.n	8003ac6 <HAL_PCD_EP_DB_Transmit+0x230>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	4413      	add	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	011a      	lsls	r2, r3, #4
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d112      	bne.n	8003a6e <HAL_PCD_EP_DB_Transmit+0x1d8>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	801a      	strh	r2, [r3, #0]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	801a      	strh	r2, [r3, #0]
 8003a6c:	e047      	b.n	8003afe <HAL_PCD_EP_DB_Transmit+0x268>
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	2b3e      	cmp	r3, #62	; 0x3e
 8003a72:	d811      	bhi.n	8003a98 <HAL_PCD_EP_DB_Transmit+0x202>
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_PCD_EP_DB_Transmit+0x1f4>
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	3301      	adds	r3, #1
 8003a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	029b      	lsls	r3, r3, #10
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	801a      	strh	r2, [r3, #0]
 8003a96:	e032      	b.n	8003afe <HAL_PCD_EP_DB_Transmit+0x268>
 8003a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <HAL_PCD_EP_DB_Transmit+0x218>
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	029b      	lsls	r3, r3, #10
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	801a      	strh	r2, [r3, #0]
 8003ac4:	e01b      	b.n	8003afe <HAL_PCD_EP_DB_Transmit+0x268>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	785b      	ldrb	r3, [r3, #1]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d117      	bne.n	8003afe <HAL_PCD_EP_DB_Transmit+0x268>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	623b      	str	r3, [r7, #32]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	623b      	str	r3, [r7, #32]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	011a      	lsls	r2, r3, #4
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	4413      	add	r3, r2
 8003af0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6959      	ldr	r1, [r3, #20]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	891a      	ldrh	r2, [r3, #8]
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	f004 f806 	bl	8007b1e <USB_WritePMA>
 8003b12:	e130      	b.n	8003d76 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4413      	add	r3, r2
 8003b28:	3306      	adds	r3, #6
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b3c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d306      	bcc.n	8003b56 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b4e:	1ad2      	subs	r2, r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	619a      	str	r2, [r3, #24]
 8003b54:	e002      	b.n	8003b5c <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d12c      	bne.n	8003bbe <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f005 fe41 	bl	80097f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f040 80fd 	bne.w	8003d76 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	441a      	add	r2, r3
 8003ba6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	8013      	strh	r3, [r2, #0]
 8003bbc:	e0db      	b.n	8003d76 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d11f      	bne.n	8003c08 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	441a      	add	r2, r3
 8003bf2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	f040 80b1 	bne.w	8003d76 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	695a      	ldr	r2, [r3, #20]
 8003c18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c1a:	441a      	add	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c26:	441a      	add	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	6a1a      	ldr	r2, [r3, #32]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d309      	bcc.n	8003c4c <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	6a1a      	ldr	r2, [r3, #32]
 8003c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c44:	1ad2      	subs	r2, r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	621a      	str	r2, [r3, #32]
 8003c4a:	e014      	b.n	8003c76 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8003c54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c56:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c60:	e009      	b.n	8003c76 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	785b      	ldrb	r3, [r3, #1]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d155      	bne.n	8003d30 <HAL_PCD_EP_DB_Transmit+0x49a>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	647b      	str	r3, [r7, #68]	; 0x44
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c98:	4413      	add	r3, r2
 8003c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	011a      	lsls	r2, r3, #4
 8003ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003caa:	643b      	str	r3, [r7, #64]	; 0x40
 8003cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d112      	bne.n	8003cd8 <HAL_PCD_EP_DB_Transmit+0x442>
 8003cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc0:	801a      	strh	r2, [r3, #0]
 8003cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd4:	801a      	strh	r2, [r3, #0]
 8003cd6:	e044      	b.n	8003d62 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	2b3e      	cmp	r3, #62	; 0x3e
 8003cdc:	d811      	bhi.n	8003d02 <HAL_PCD_EP_DB_Transmit+0x46c>
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_PCD_EP_DB_Transmit+0x45e>
 8003cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	029b      	lsls	r3, r3, #10
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cfe:	801a      	strh	r2, [r3, #0]
 8003d00:	e02f      	b.n	8003d62 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <HAL_PCD_EP_DB_Transmit+0x482>
 8003d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d14:	3b01      	subs	r3, #1
 8003d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	029b      	lsls	r3, r3, #10
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2c:	801a      	strh	r2, [r3, #0]
 8003d2e:	e018      	b.n	8003d62 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	785b      	ldrb	r3, [r3, #1]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d114      	bne.n	8003d62 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d46:	4413      	add	r3, r2
 8003d48:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	011a      	lsls	r2, r3, #4
 8003d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d52:	4413      	add	r3, r2
 8003d54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d58:	633b      	str	r3, [r7, #48]	; 0x30
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	6959      	ldr	r1, [r3, #20]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	895a      	ldrh	r2, [r3, #10]
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f003 fed4 	bl	8007b1e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d90:	823b      	strh	r3, [r7, #16]
 8003d92:	8a3b      	ldrh	r3, [r7, #16]
 8003d94:	f083 0310 	eor.w	r3, r3, #16
 8003d98:	823b      	strh	r3, [r7, #16]
 8003d9a:	8a3b      	ldrh	r3, [r7, #16]
 8003d9c:	f083 0320 	eor.w	r3, r3, #32
 8003da0:	823b      	strh	r3, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	441a      	add	r2, r3
 8003db0:	8a3b      	ldrh	r3, [r7, #16]
 8003db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3748      	adds	r7, #72	; 0x48
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	607b      	str	r3, [r7, #4]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	817b      	strh	r3, [r7, #10]
 8003dde:	4613      	mov	r3, r2
 8003de0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003de2:	897b      	ldrh	r3, [r7, #10]
 8003de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dee:	897b      	ldrh	r3, [r7, #10]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4413      	add	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	e009      	b.n	8003e1a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e06:	897a      	ldrh	r2, [r7, #10]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003e1a:	893b      	ldrh	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d107      	bne.n	8003e30 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2200      	movs	r2, #0
 8003e24:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	80da      	strh	r2, [r3, #6]
 8003e2e:	e00b      	b.n	8003e48 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2201      	movs	r2, #1
 8003e34:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	0c1b      	lsrs	r3, r3, #16
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	1d3b      	adds	r3, r7, #4
 8003e62:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e64:	1d3b      	adds	r3, r7, #4
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d102      	bne.n	8003e72 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f000 bef4 	b.w	8004c5a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e72:	1d3b      	adds	r3, r7, #4
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 816a 	beq.w	8004156 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e82:	4bb3      	ldr	r3, [pc, #716]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e8e:	4bb0      	ldr	r3, [pc, #704]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d159      	bne.n	8003f4e <HAL_RCC_OscConfig+0xf6>
 8003e9a:	4bad      	ldr	r3, [pc, #692]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea6:	d152      	bne.n	8003f4e <HAL_RCC_OscConfig+0xf6>
 8003ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eac:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ebc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec0:	fab3 f383 	clz	r3, r3
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d102      	bne.n	8003eda <HAL_RCC_OscConfig+0x82>
 8003ed4:	4b9e      	ldr	r3, [pc, #632]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	e015      	b.n	8003f06 <HAL_RCC_OscConfig+0xae>
 8003eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ede:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003ee6:	fa93 f3a3 	rbit	r3, r3
 8003eea:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ef2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003ef6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003f02:	4b93      	ldr	r3, [pc, #588]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f0a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003f0e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003f12:	fa92 f2a2 	rbit	r2, r2
 8003f16:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003f1a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003f1e:	fab2 f282 	clz	r2, r2
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	f042 0220 	orr.w	r2, r2, #32
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	f002 021f 	and.w	r2, r2, #31
 8003f2e:	2101      	movs	r1, #1
 8003f30:	fa01 f202 	lsl.w	r2, r1, r2
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 810c 	beq.w	8004154 <HAL_RCC_OscConfig+0x2fc>
 8003f3c:	1d3b      	adds	r3, r7, #4
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f040 8106 	bne.w	8004154 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f000 be86 	b.w	8004c5a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4e:	1d3b      	adds	r3, r7, #4
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d106      	bne.n	8003f68 <HAL_RCC_OscConfig+0x110>
 8003f5a:	4b7d      	ldr	r3, [pc, #500]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a7c      	ldr	r2, [pc, #496]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e030      	b.n	8003fca <HAL_RCC_OscConfig+0x172>
 8003f68:	1d3b      	adds	r3, r7, #4
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0x134>
 8003f72:	4b77      	ldr	r3, [pc, #476]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a76      	ldr	r2, [pc, #472]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	4b74      	ldr	r3, [pc, #464]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a73      	ldr	r2, [pc, #460]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	e01e      	b.n	8003fca <HAL_RCC_OscConfig+0x172>
 8003f8c:	1d3b      	adds	r3, r7, #4
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f96:	d10c      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x15a>
 8003f98:	4b6d      	ldr	r3, [pc, #436]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a6c      	ldr	r2, [pc, #432]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003f9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	4b6a      	ldr	r3, [pc, #424]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a69      	ldr	r2, [pc, #420]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	e00b      	b.n	8003fca <HAL_RCC_OscConfig+0x172>
 8003fb2:	4b67      	ldr	r3, [pc, #412]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a66      	ldr	r2, [pc, #408]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	4b64      	ldr	r3, [pc, #400]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a63      	ldr	r2, [pc, #396]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003fc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fca:	4b61      	ldr	r3, [pc, #388]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	f023 020f 	bic.w	r2, r3, #15
 8003fd2:	1d3b      	adds	r3, r7, #4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	495d      	ldr	r1, [pc, #372]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d059      	beq.n	800409c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fd fbee 	bl	80017c8 <HAL_GetTick>
 8003fec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff0:	e00a      	b.n	8004008 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff2:	f7fd fbe9 	bl	80017c8 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	d902      	bls.n	8004008 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	f000 be29 	b.w	8004c5a <HAL_RCC_OscConfig+0xe02>
 8004008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800400c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004010:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800401c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004020:	fab3 f383 	clz	r3, r3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	b2db      	uxtb	r3, r3
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d102      	bne.n	800403a <HAL_RCC_OscConfig+0x1e2>
 8004034:	4b46      	ldr	r3, [pc, #280]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	e015      	b.n	8004066 <HAL_RCC_OscConfig+0x20e>
 800403a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800403e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004046:	fa93 f3a3 	rbit	r3, r3
 800404a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800404e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004052:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004056:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800405a:	fa93 f3a3 	rbit	r3, r3
 800405e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004062:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800406a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800406e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004072:	fa92 f2a2 	rbit	r2, r2
 8004076:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800407a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800407e:	fab2 f282 	clz	r2, r2
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	f042 0220 	orr.w	r2, r2, #32
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	f002 021f 	and.w	r2, r2, #31
 800408e:	2101      	movs	r1, #1
 8004090:	fa01 f202 	lsl.w	r2, r1, r2
 8004094:	4013      	ands	r3, r2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0ab      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x19a>
 800409a:	e05c      	b.n	8004156 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409c:	f7fd fb94 	bl	80017c8 <HAL_GetTick>
 80040a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a4:	e00a      	b.n	80040bc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a6:	f7fd fb8f 	bl	80017c8 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b64      	cmp	r3, #100	; 0x64
 80040b4:	d902      	bls.n	80040bc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	f000 bdcf 	b.w	8004c5a <HAL_RCC_OscConfig+0xe02>
 80040bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040c0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80040c8:	fa93 f3a3 	rbit	r3, r3
 80040cc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80040d0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d4:	fab3 f383 	clz	r3, r3
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d102      	bne.n	80040ee <HAL_RCC_OscConfig+0x296>
 80040e8:	4b19      	ldr	r3, [pc, #100]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	e015      	b.n	800411a <HAL_RCC_OscConfig+0x2c2>
 80040ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80040fa:	fa93 f3a3 	rbit	r3, r3
 80040fe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004102:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004106:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800410a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004116:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <HAL_RCC_OscConfig+0x2f8>)
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800411e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004122:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004126:	fa92 f2a2 	rbit	r2, r2
 800412a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800412e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004132:	fab2 f282 	clz	r2, r2
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	f042 0220 	orr.w	r2, r2, #32
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	f002 021f 	and.w	r2, r2, #31
 8004142:	2101      	movs	r1, #1
 8004144:	fa01 f202 	lsl.w	r2, r1, r2
 8004148:	4013      	ands	r3, r2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1ab      	bne.n	80040a6 <HAL_RCC_OscConfig+0x24e>
 800414e:	e002      	b.n	8004156 <HAL_RCC_OscConfig+0x2fe>
 8004150:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 816f 	beq.w	8004444 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004166:	4bd0      	ldr	r3, [pc, #832]	; (80044a8 <HAL_RCC_OscConfig+0x650>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004172:	4bcd      	ldr	r3, [pc, #820]	; (80044a8 <HAL_RCC_OscConfig+0x650>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	2b08      	cmp	r3, #8
 800417c:	d16c      	bne.n	8004258 <HAL_RCC_OscConfig+0x400>
 800417e:	4bca      	ldr	r3, [pc, #808]	; (80044a8 <HAL_RCC_OscConfig+0x650>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d166      	bne.n	8004258 <HAL_RCC_OscConfig+0x400>
 800418a:	2302      	movs	r3, #2
 800418c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004190:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800419c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a0:	fab3 f383 	clz	r3, r3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d102      	bne.n	80041ba <HAL_RCC_OscConfig+0x362>
 80041b4:	4bbc      	ldr	r3, [pc, #752]	; (80044a8 <HAL_RCC_OscConfig+0x650>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	e013      	b.n	80041e2 <HAL_RCC_OscConfig+0x38a>
 80041ba:	2302      	movs	r3, #2
 80041bc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80041c4:	fa93 f3a3 	rbit	r3, r3
 80041c8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80041cc:	2302      	movs	r3, #2
 80041ce:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80041d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80041d6:	fa93 f3a3 	rbit	r3, r3
 80041da:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80041de:	4bb2      	ldr	r3, [pc, #712]	; (80044a8 <HAL_RCC_OscConfig+0x650>)
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	2202      	movs	r2, #2
 80041e4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80041e8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80041ec:	fa92 f2a2 	rbit	r2, r2
 80041f0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80041f4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80041f8:	fab2 f282 	clz	r2, r2
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	f042 0220 	orr.w	r2, r2, #32
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	f002 021f 	and.w	r2, r2, #31
 8004208:	2101      	movs	r1, #1
 800420a:	fa01 f202 	lsl.w	r2, r1, r2
 800420e:	4013      	ands	r3, r2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d007      	beq.n	8004224 <HAL_RCC_OscConfig+0x3cc>
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d002      	beq.n	8004224 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	f000 bd1b 	b.w	8004c5a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004224:	4ba0      	ldr	r3, [pc, #640]	; (80044a8 <HAL_RCC_OscConfig+0x650>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800422c:	1d3b      	adds	r3, r7, #4
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	21f8      	movs	r1, #248	; 0xf8
 8004234:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004238:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800423c:	fa91 f1a1 	rbit	r1, r1
 8004240:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004244:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004248:	fab1 f181 	clz	r1, r1
 800424c:	b2c9      	uxtb	r1, r1
 800424e:	408b      	lsls	r3, r1
 8004250:	4995      	ldr	r1, [pc, #596]	; (80044a8 <HAL_RCC_OscConfig+0x650>)
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004256:	e0f5      	b.n	8004444 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004258:	1d3b      	adds	r3, r7, #4
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 8085 	beq.w	800436e <HAL_RCC_OscConfig+0x516>
 8004264:	2301      	movs	r3, #1
 8004266:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800426e:	fa93 f3a3 	rbit	r3, r3
 8004272:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004276:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800427a:	fab3 f383 	clz	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004284:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	461a      	mov	r2, r3
 800428c:	2301      	movs	r3, #1
 800428e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fd fa9a 	bl	80017c8 <HAL_GetTick>
 8004294:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004298:	e00a      	b.n	80042b0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800429a:	f7fd fa95 	bl	80017c8 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d902      	bls.n	80042b0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	f000 bcd5 	b.w	8004c5a <HAL_RCC_OscConfig+0xe02>
 80042b0:	2302      	movs	r3, #2
 80042b2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80042c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d102      	bne.n	80042e0 <HAL_RCC_OscConfig+0x488>
 80042da:	4b73      	ldr	r3, [pc, #460]	; (80044a8 <HAL_RCC_OscConfig+0x650>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	e013      	b.n	8004308 <HAL_RCC_OscConfig+0x4b0>
 80042e0:	2302      	movs	r3, #2
 80042e2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80042f2:	2302      	movs	r3, #2
 80042f4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80042f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004304:	4b68      	ldr	r3, [pc, #416]	; (80044a8 <HAL_RCC_OscConfig+0x650>)
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2202      	movs	r2, #2
 800430a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800430e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004312:	fa92 f2a2 	rbit	r2, r2
 8004316:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800431a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800431e:	fab2 f282 	clz	r2, r2
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	f042 0220 	orr.w	r2, r2, #32
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	f002 021f 	and.w	r2, r2, #31
 800432e:	2101      	movs	r1, #1
 8004330:	fa01 f202 	lsl.w	r2, r1, r2
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0af      	beq.n	800429a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433a:	4b5b      	ldr	r3, [pc, #364]	; (80044a8 <HAL_RCC_OscConfig+0x650>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	21f8      	movs	r1, #248	; 0xf8
 800434a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004352:	fa91 f1a1 	rbit	r1, r1
 8004356:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800435a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800435e:	fab1 f181 	clz	r1, r1
 8004362:	b2c9      	uxtb	r1, r1
 8004364:	408b      	lsls	r3, r1
 8004366:	4950      	ldr	r1, [pc, #320]	; (80044a8 <HAL_RCC_OscConfig+0x650>)
 8004368:	4313      	orrs	r3, r2
 800436a:	600b      	str	r3, [r1, #0]
 800436c:	e06a      	b.n	8004444 <HAL_RCC_OscConfig+0x5ec>
 800436e:	2301      	movs	r3, #1
 8004370:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004374:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004378:	fa93 f3a3 	rbit	r3, r3
 800437c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004380:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004384:	fab3 f383 	clz	r3, r3
 8004388:	b2db      	uxtb	r3, r3
 800438a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800438e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	461a      	mov	r2, r3
 8004396:	2300      	movs	r3, #0
 8004398:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439a:	f7fd fa15 	bl	80017c8 <HAL_GetTick>
 800439e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a2:	e00a      	b.n	80043ba <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a4:	f7fd fa10 	bl	80017c8 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d902      	bls.n	80043ba <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	f000 bc50 	b.w	8004c5a <HAL_RCC_OscConfig+0xe02>
 80043ba:	2302      	movs	r3, #2
 80043bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80043c4:	fa93 f3a3 	rbit	r3, r3
 80043c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80043cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d0:	fab3 f383 	clz	r3, r3
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d102      	bne.n	80043ea <HAL_RCC_OscConfig+0x592>
 80043e4:	4b30      	ldr	r3, [pc, #192]	; (80044a8 <HAL_RCC_OscConfig+0x650>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	e013      	b.n	8004412 <HAL_RCC_OscConfig+0x5ba>
 80043ea:	2302      	movs	r3, #2
 80043ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043f4:	fa93 f3a3 	rbit	r3, r3
 80043f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80043fc:	2302      	movs	r3, #2
 80043fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004402:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004406:	fa93 f3a3 	rbit	r3, r3
 800440a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800440e:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <HAL_RCC_OscConfig+0x650>)
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	2202      	movs	r2, #2
 8004414:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004418:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800441c:	fa92 f2a2 	rbit	r2, r2
 8004420:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004424:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004428:	fab2 f282 	clz	r2, r2
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	f042 0220 	orr.w	r2, r2, #32
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	f002 021f 	and.w	r2, r2, #31
 8004438:	2101      	movs	r1, #1
 800443a:	fa01 f202 	lsl.w	r2, r1, r2
 800443e:	4013      	ands	r3, r2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1af      	bne.n	80043a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004444:	1d3b      	adds	r3, r7, #4
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 80da 	beq.w	8004608 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004454:	1d3b      	adds	r3, r7, #4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d069      	beq.n	8004532 <HAL_RCC_OscConfig+0x6da>
 800445e:	2301      	movs	r3, #1
 8004460:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004464:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004468:	fa93 f3a3 	rbit	r3, r3
 800446c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004474:	fab3 f383 	clz	r3, r3
 8004478:	b2db      	uxtb	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_RCC_OscConfig+0x654>)
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	461a      	mov	r2, r3
 8004484:	2301      	movs	r3, #1
 8004486:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004488:	f7fd f99e 	bl	80017c8 <HAL_GetTick>
 800448c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004490:	e00e      	b.n	80044b0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004492:	f7fd f999 	bl	80017c8 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d906      	bls.n	80044b0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e3d9      	b.n	8004c5a <HAL_RCC_OscConfig+0xe02>
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	10908120 	.word	0x10908120
 80044b0:	2302      	movs	r3, #2
 80044b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044ba:	fa93 f3a3 	rbit	r3, r3
 80044be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80044c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80044c6:	2202      	movs	r2, #2
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	fa93 f2a3 	rbit	r2, r3
 80044d4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80044de:	2202      	movs	r2, #2
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	fa93 f2a3 	rbit	r2, r3
 80044ec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80044f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f2:	4ba5      	ldr	r3, [pc, #660]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 80044f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80044fa:	2102      	movs	r1, #2
 80044fc:	6019      	str	r1, [r3, #0]
 80044fe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	fa93 f1a3 	rbit	r1, r3
 8004508:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800450c:	6019      	str	r1, [r3, #0]
  return result;
 800450e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	fab3 f383 	clz	r3, r3
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	2101      	movs	r1, #1
 8004526:	fa01 f303 	lsl.w	r3, r1, r3
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0b0      	beq.n	8004492 <HAL_RCC_OscConfig+0x63a>
 8004530:	e06a      	b.n	8004608 <HAL_RCC_OscConfig+0x7b0>
 8004532:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004536:	2201      	movs	r2, #1
 8004538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	fa93 f2a3 	rbit	r2, r3
 8004544:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004548:	601a      	str	r2, [r3, #0]
  return result;
 800454a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800454e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004550:	fab3 f383 	clz	r3, r3
 8004554:	b2db      	uxtb	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	4b8c      	ldr	r3, [pc, #560]	; (800478c <HAL_RCC_OscConfig+0x934>)
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	461a      	mov	r2, r3
 8004560:	2300      	movs	r3, #0
 8004562:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004564:	f7fd f930 	bl	80017c8 <HAL_GetTick>
 8004568:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456c:	e009      	b.n	8004582 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800456e:	f7fd f92b 	bl	80017c8 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e36b      	b.n	8004c5a <HAL_RCC_OscConfig+0xe02>
 8004582:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004586:	2202      	movs	r2, #2
 8004588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	fa93 f2a3 	rbit	r2, r3
 8004594:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800459e:	2202      	movs	r2, #2
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	fa93 f2a3 	rbit	r2, r3
 80045ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80045b6:	2202      	movs	r2, #2
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	fa93 f2a3 	rbit	r2, r3
 80045c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80045c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ca:	4b6f      	ldr	r3, [pc, #444]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 80045cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80045d2:	2102      	movs	r1, #2
 80045d4:	6019      	str	r1, [r3, #0]
 80045d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	fa93 f1a3 	rbit	r1, r3
 80045e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80045e4:	6019      	str	r1, [r3, #0]
  return result;
 80045e6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	fab3 f383 	clz	r3, r3
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	2101      	movs	r1, #1
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	4013      	ands	r3, r2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1b2      	bne.n	800456e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004608:	1d3b      	adds	r3, r7, #4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8158 	beq.w	80048c8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004618:	2300      	movs	r3, #0
 800461a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800461e:	4b5a      	ldr	r3, [pc, #360]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d112      	bne.n	8004650 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800462a:	4b57      	ldr	r3, [pc, #348]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	4a56      	ldr	r2, [pc, #344]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 8004630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004634:	61d3      	str	r3, [r2, #28]
 8004636:	4b54      	ldr	r3, [pc, #336]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800463e:	f107 0308 	add.w	r3, r7, #8
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f107 0308 	add.w	r3, r7, #8
 8004648:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800464a:	2301      	movs	r3, #1
 800464c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004650:	4b4f      	ldr	r3, [pc, #316]	; (8004790 <HAL_RCC_OscConfig+0x938>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d11a      	bne.n	8004692 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800465c:	4b4c      	ldr	r3, [pc, #304]	; (8004790 <HAL_RCC_OscConfig+0x938>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a4b      	ldr	r2, [pc, #300]	; (8004790 <HAL_RCC_OscConfig+0x938>)
 8004662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004666:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004668:	f7fd f8ae 	bl	80017c8 <HAL_GetTick>
 800466c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004670:	e009      	b.n	8004686 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004672:	f7fd f8a9 	bl	80017c8 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b64      	cmp	r3, #100	; 0x64
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e2e9      	b.n	8004c5a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004686:	4b42      	ldr	r3, [pc, #264]	; (8004790 <HAL_RCC_OscConfig+0x938>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0ef      	beq.n	8004672 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004692:	1d3b      	adds	r3, r7, #4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d106      	bne.n	80046aa <HAL_RCC_OscConfig+0x852>
 800469c:	4b3a      	ldr	r3, [pc, #232]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	4a39      	ldr	r2, [pc, #228]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6213      	str	r3, [r2, #32]
 80046a8:	e02f      	b.n	800470a <HAL_RCC_OscConfig+0x8b2>
 80046aa:	1d3b      	adds	r3, r7, #4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10c      	bne.n	80046ce <HAL_RCC_OscConfig+0x876>
 80046b4:	4b34      	ldr	r3, [pc, #208]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	4a33      	ldr	r2, [pc, #204]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	6213      	str	r3, [r2, #32]
 80046c0:	4b31      	ldr	r3, [pc, #196]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	4a30      	ldr	r2, [pc, #192]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 80046c6:	f023 0304 	bic.w	r3, r3, #4
 80046ca:	6213      	str	r3, [r2, #32]
 80046cc:	e01d      	b.n	800470a <HAL_RCC_OscConfig+0x8b2>
 80046ce:	1d3b      	adds	r3, r7, #4
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	2b05      	cmp	r3, #5
 80046d6:	d10c      	bne.n	80046f2 <HAL_RCC_OscConfig+0x89a>
 80046d8:	4b2b      	ldr	r3, [pc, #172]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	4a2a      	ldr	r2, [pc, #168]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 80046de:	f043 0304 	orr.w	r3, r3, #4
 80046e2:	6213      	str	r3, [r2, #32]
 80046e4:	4b28      	ldr	r3, [pc, #160]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	4a27      	ldr	r2, [pc, #156]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6213      	str	r3, [r2, #32]
 80046f0:	e00b      	b.n	800470a <HAL_RCC_OscConfig+0x8b2>
 80046f2:	4b25      	ldr	r3, [pc, #148]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	4a24      	ldr	r2, [pc, #144]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	6213      	str	r3, [r2, #32]
 80046fe:	4b22      	ldr	r3, [pc, #136]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	4a21      	ldr	r2, [pc, #132]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 8004704:	f023 0304 	bic.w	r3, r3, #4
 8004708:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d06b      	beq.n	80047ec <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004714:	f7fd f858 	bl	80017c8 <HAL_GetTick>
 8004718:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471c:	e00b      	b.n	8004736 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800471e:	f7fd f853 	bl	80017c8 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e291      	b.n	8004c5a <HAL_RCC_OscConfig+0xe02>
 8004736:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800473a:	2202      	movs	r2, #2
 800473c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	fa93 f2a3 	rbit	r2, r3
 8004748:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004752:	2202      	movs	r2, #2
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	fa93 f2a3 	rbit	r2, r3
 8004760:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004764:	601a      	str	r2, [r3, #0]
  return result;
 8004766:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800476a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	fab3 f383 	clz	r3, r3
 8004770:	b2db      	uxtb	r3, r3
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	b2db      	uxtb	r3, r3
 8004776:	f043 0302 	orr.w	r3, r3, #2
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d109      	bne.n	8004794 <HAL_RCC_OscConfig+0x93c>
 8004780:	4b01      	ldr	r3, [pc, #4]	; (8004788 <HAL_RCC_OscConfig+0x930>)
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	e014      	b.n	80047b0 <HAL_RCC_OscConfig+0x958>
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000
 800478c:	10908120 	.word	0x10908120
 8004790:	40007000 	.word	0x40007000
 8004794:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004798:	2202      	movs	r2, #2
 800479a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	fa93 f2a3 	rbit	r2, r3
 80047a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	4bbb      	ldr	r3, [pc, #748]	; (8004a9c <HAL_RCC_OscConfig+0xc44>)
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80047b4:	2102      	movs	r1, #2
 80047b6:	6011      	str	r1, [r2, #0]
 80047b8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	fa92 f1a2 	rbit	r1, r2
 80047c2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80047c6:	6011      	str	r1, [r2, #0]
  return result;
 80047c8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	fab2 f282 	clz	r2, r2
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	f002 021f 	and.w	r2, r2, #31
 80047de:	2101      	movs	r1, #1
 80047e0:	fa01 f202 	lsl.w	r2, r1, r2
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d099      	beq.n	800471e <HAL_RCC_OscConfig+0x8c6>
 80047ea:	e063      	b.n	80048b4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ec:	f7fc ffec 	bl	80017c8 <HAL_GetTick>
 80047f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f4:	e00b      	b.n	800480e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f6:	f7fc ffe7 	bl	80017c8 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	; 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e225      	b.n	8004c5a <HAL_RCC_OscConfig+0xe02>
 800480e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004812:	2202      	movs	r2, #2
 8004814:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004816:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	fa93 f2a3 	rbit	r2, r3
 8004820:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800482a:	2202      	movs	r2, #2
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	fa93 f2a3 	rbit	r2, r3
 8004838:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800483c:	601a      	str	r2, [r3, #0]
  return result;
 800483e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004842:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004844:	fab3 f383 	clz	r3, r3
 8004848:	b2db      	uxtb	r3, r3
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f043 0302 	orr.w	r3, r3, #2
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d102      	bne.n	800485e <HAL_RCC_OscConfig+0xa06>
 8004858:	4b90      	ldr	r3, [pc, #576]	; (8004a9c <HAL_RCC_OscConfig+0xc44>)
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	e00d      	b.n	800487a <HAL_RCC_OscConfig+0xa22>
 800485e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004862:	2202      	movs	r2, #2
 8004864:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004866:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	fa93 f2a3 	rbit	r2, r3
 8004870:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	4b89      	ldr	r3, [pc, #548]	; (8004a9c <HAL_RCC_OscConfig+0xc44>)
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800487e:	2102      	movs	r1, #2
 8004880:	6011      	str	r1, [r2, #0]
 8004882:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	fa92 f1a2 	rbit	r1, r2
 800488c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004890:	6011      	str	r1, [r2, #0]
  return result;
 8004892:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	fab2 f282 	clz	r2, r2
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	f002 021f 	and.w	r2, r2, #31
 80048a8:	2101      	movs	r1, #1
 80048aa:	fa01 f202 	lsl.w	r2, r1, r2
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1a0      	bne.n	80047f6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d105      	bne.n	80048c8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048bc:	4b77      	ldr	r3, [pc, #476]	; (8004a9c <HAL_RCC_OscConfig+0xc44>)
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	4a76      	ldr	r2, [pc, #472]	; (8004a9c <HAL_RCC_OscConfig+0xc44>)
 80048c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c8:	1d3b      	adds	r3, r7, #4
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 81c2 	beq.w	8004c58 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048d4:	4b71      	ldr	r3, [pc, #452]	; (8004a9c <HAL_RCC_OscConfig+0xc44>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 030c 	and.w	r3, r3, #12
 80048dc:	2b08      	cmp	r3, #8
 80048de:	f000 819c 	beq.w	8004c1a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e2:	1d3b      	adds	r3, r7, #4
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	f040 8114 	bne.w	8004b16 <HAL_RCC_OscConfig+0xcbe>
 80048ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80048f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	fa93 f2a3 	rbit	r2, r3
 8004902:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004906:	601a      	str	r2, [r3, #0]
  return result;
 8004908:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800490c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490e:	fab3 f383 	clz	r3, r3
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004918:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	461a      	mov	r2, r3
 8004920:	2300      	movs	r3, #0
 8004922:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004924:	f7fc ff50 	bl	80017c8 <HAL_GetTick>
 8004928:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800492c:	e009      	b.n	8004942 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492e:	f7fc ff4b 	bl	80017c8 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e18b      	b.n	8004c5a <HAL_RCC_OscConfig+0xe02>
 8004942:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004946:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800494a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	fa93 f2a3 	rbit	r2, r3
 8004956:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800495a:	601a      	str	r2, [r3, #0]
  return result;
 800495c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004960:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004962:	fab3 f383 	clz	r3, r3
 8004966:	b2db      	uxtb	r3, r3
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b01      	cmp	r3, #1
 8004974:	d102      	bne.n	800497c <HAL_RCC_OscConfig+0xb24>
 8004976:	4b49      	ldr	r3, [pc, #292]	; (8004a9c <HAL_RCC_OscConfig+0xc44>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	e01b      	b.n	80049b4 <HAL_RCC_OscConfig+0xb5c>
 800497c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004986:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	fa93 f2a3 	rbit	r2, r3
 8004990:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800499a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	fa93 f2a3 	rbit	r2, r3
 80049aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	4b3a      	ldr	r3, [pc, #232]	; (8004a9c <HAL_RCC_OscConfig+0xc44>)
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80049b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80049bc:	6011      	str	r1, [r2, #0]
 80049be:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	fa92 f1a2 	rbit	r1, r2
 80049c8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80049cc:	6011      	str	r1, [r2, #0]
  return result;
 80049ce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	fab2 f282 	clz	r2, r2
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	f042 0220 	orr.w	r2, r2, #32
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	f002 021f 	and.w	r2, r2, #31
 80049e4:	2101      	movs	r1, #1
 80049e6:	fa01 f202 	lsl.w	r2, r1, r2
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d19e      	bne.n	800492e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049f0:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <HAL_RCC_OscConfig+0xc44>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049f8:	1d3b      	adds	r3, r7, #4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	430b      	orrs	r3, r1
 8004a06:	4925      	ldr	r1, [pc, #148]	; (8004a9c <HAL_RCC_OscConfig+0xc44>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	604b      	str	r3, [r1, #4]
 8004a0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	fa93 f2a3 	rbit	r2, r3
 8004a20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a24:	601a      	str	r2, [r3, #0]
  return result;
 8004a26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a2a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a2c:	fab3 f383 	clz	r3, r3
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	2301      	movs	r3, #1
 8004a40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a42:	f7fc fec1 	bl	80017c8 <HAL_GetTick>
 8004a46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a4a:	e009      	b.n	8004a60 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fc febc 	bl	80017c8 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e0fc      	b.n	8004c5a <HAL_RCC_OscConfig+0xe02>
 8004a60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	fa93 f2a3 	rbit	r2, r3
 8004a74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004a78:	601a      	str	r2, [r3, #0]
  return result;
 8004a7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004a7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a80:	fab3 f383 	clz	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d105      	bne.n	8004aa0 <HAL_RCC_OscConfig+0xc48>
 8004a94:	4b01      	ldr	r3, [pc, #4]	; (8004a9c <HAL_RCC_OscConfig+0xc44>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	e01e      	b.n	8004ad8 <HAL_RCC_OscConfig+0xc80>
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aaa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	fa93 f2a3 	rbit	r2, r3
 8004ab4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004abe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	fa93 f2a3 	rbit	r2, r3
 8004ace:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	4b63      	ldr	r3, [pc, #396]	; (8004c64 <HAL_RCC_OscConfig+0xe0c>)
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004adc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ae0:	6011      	str	r1, [r2, #0]
 8004ae2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	fa92 f1a2 	rbit	r1, r2
 8004aec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004af0:	6011      	str	r1, [r2, #0]
  return result;
 8004af2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	fab2 f282 	clz	r2, r2
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	f042 0220 	orr.w	r2, r2, #32
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	f002 021f 	and.w	r2, r2, #31
 8004b08:	2101      	movs	r1, #1
 8004b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d09b      	beq.n	8004a4c <HAL_RCC_OscConfig+0xbf4>
 8004b14:	e0a0      	b.n	8004c58 <HAL_RCC_OscConfig+0xe00>
 8004b16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	fa93 f2a3 	rbit	r2, r3
 8004b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b2e:	601a      	str	r2, [r3, #0]
  return result;
 8004b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b34:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b36:	fab3 f383 	clz	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	461a      	mov	r2, r3
 8004b48:	2300      	movs	r3, #0
 8004b4a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f7fc fe3c 	bl	80017c8 <HAL_GetTick>
 8004b50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b54:	e009      	b.n	8004b6a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b56:	f7fc fe37 	bl	80017c8 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e077      	b.n	8004c5a <HAL_RCC_OscConfig+0xe02>
 8004b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	fa93 f2a3 	rbit	r2, r3
 8004b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b82:	601a      	str	r2, [r3, #0]
  return result;
 8004b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b8a:	fab3 f383 	clz	r3, r3
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	095b      	lsrs	r3, r3, #5
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d102      	bne.n	8004ba4 <HAL_RCC_OscConfig+0xd4c>
 8004b9e:	4b31      	ldr	r3, [pc, #196]	; (8004c64 <HAL_RCC_OscConfig+0xe0c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	e01b      	b.n	8004bdc <HAL_RCC_OscConfig+0xd84>
 8004ba4:	f107 0320 	add.w	r3, r7, #32
 8004ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bae:	f107 0320 	add.w	r3, r7, #32
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	fa93 f2a3 	rbit	r2, r3
 8004bb8:	f107 031c 	add.w	r3, r7, #28
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	f107 0318 	add.w	r3, r7, #24
 8004bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	f107 0318 	add.w	r3, r7, #24
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	fa93 f2a3 	rbit	r2, r3
 8004bd2:	f107 0314 	add.w	r3, r7, #20
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	4b22      	ldr	r3, [pc, #136]	; (8004c64 <HAL_RCC_OscConfig+0xe0c>)
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	f107 0210 	add.w	r2, r7, #16
 8004be0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004be4:	6011      	str	r1, [r2, #0]
 8004be6:	f107 0210 	add.w	r2, r7, #16
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	fa92 f1a2 	rbit	r1, r2
 8004bf0:	f107 020c 	add.w	r2, r7, #12
 8004bf4:	6011      	str	r1, [r2, #0]
  return result;
 8004bf6:	f107 020c 	add.w	r2, r7, #12
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	fab2 f282 	clz	r2, r2
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	f042 0220 	orr.w	r2, r2, #32
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	f002 021f 	and.w	r2, r2, #31
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d19e      	bne.n	8004b56 <HAL_RCC_OscConfig+0xcfe>
 8004c18:	e01e      	b.n	8004c58 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c1a:	1d3b      	adds	r3, r7, #4
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e018      	b.n	8004c5a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c28:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <HAL_RCC_OscConfig+0xe0c>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c30:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004c34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c38:	1d3b      	adds	r3, r7, #4
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d108      	bne.n	8004c54 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004c42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004c46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40021000 	.word	0x40021000

08004c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b09e      	sub	sp, #120	; 0x78
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e162      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c80:	4b90      	ldr	r3, [pc, #576]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d910      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b8d      	ldr	r3, [pc, #564]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 0207 	bic.w	r2, r3, #7
 8004c96:	498b      	ldr	r1, [pc, #556]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9e:	4b89      	ldr	r3, [pc, #548]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e14a      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d008      	beq.n	8004cce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cbc:	4b82      	ldr	r3, [pc, #520]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	497f      	ldr	r1, [pc, #508]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 80dc 	beq.w	8004e94 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d13c      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xf6>
 8004ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ce8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cec:	fa93 f3a3 	rbit	r3, r3
 8004cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf4:	fab3 f383 	clz	r3, r3
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d102      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xa6>
 8004d08:	4b6f      	ldr	r3, [pc, #444]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	e00f      	b.n	8004d2e <HAL_RCC_ClockConfig+0xc6>
 8004d0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d16:	fa93 f3a3 	rbit	r3, r3
 8004d1a:	667b      	str	r3, [r7, #100]	; 0x64
 8004d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d20:	663b      	str	r3, [r7, #96]	; 0x60
 8004d22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d24:	fa93 f3a3 	rbit	r3, r3
 8004d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d2a:	4b67      	ldr	r3, [pc, #412]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d32:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d36:	fa92 f2a2 	rbit	r2, r2
 8004d3a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004d3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d3e:	fab2 f282 	clz	r2, r2
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	f042 0220 	orr.w	r2, r2, #32
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	f002 021f 	and.w	r2, r2, #31
 8004d4e:	2101      	movs	r1, #1
 8004d50:	fa01 f202 	lsl.w	r2, r1, r2
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d17b      	bne.n	8004e52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e0f3      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d13c      	bne.n	8004de0 <HAL_RCC_ClockConfig+0x178>
 8004d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d76:	fab3 f383 	clz	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d102      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x128>
 8004d8a:	4b4f      	ldr	r3, [pc, #316]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	e00f      	b.n	8004db0 <HAL_RCC_ClockConfig+0x148>
 8004d90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d98:	fa93 f3a3 	rbit	r3, r3
 8004d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004da2:	643b      	str	r3, [r7, #64]	; 0x40
 8004da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da6:	fa93 f3a3 	rbit	r3, r3
 8004daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dac:	4b46      	ldr	r3, [pc, #280]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004db4:	63ba      	str	r2, [r7, #56]	; 0x38
 8004db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004db8:	fa92 f2a2 	rbit	r2, r2
 8004dbc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc0:	fab2 f282 	clz	r2, r2
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	f042 0220 	orr.w	r2, r2, #32
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	f002 021f 	and.w	r2, r2, #31
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d13a      	bne.n	8004e52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0b2      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
 8004de0:	2302      	movs	r3, #2
 8004de2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	fa93 f3a3 	rbit	r3, r3
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dee:	fab3 f383 	clz	r3, r3
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d102      	bne.n	8004e08 <HAL_RCC_ClockConfig+0x1a0>
 8004e02:	4b31      	ldr	r3, [pc, #196]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	e00d      	b.n	8004e24 <HAL_RCC_ClockConfig+0x1bc>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	fa93 f3a3 	rbit	r3, r3
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
 8004e14:	2302      	movs	r3, #2
 8004e16:	623b      	str	r3, [r7, #32]
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	fa93 f3a3 	rbit	r3, r3
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	4b29      	ldr	r3, [pc, #164]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	2202      	movs	r2, #2
 8004e26:	61ba      	str	r2, [r7, #24]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	fa92 f2a2 	rbit	r2, r2
 8004e2e:	617a      	str	r2, [r7, #20]
  return result;
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	fab2 f282 	clz	r2, r2
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	f042 0220 	orr.w	r2, r2, #32
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	f002 021f 	and.w	r2, r2, #31
 8004e42:	2101      	movs	r1, #1
 8004e44:	fa01 f202 	lsl.w	r2, r1, r2
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e079      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e52:	4b1d      	ldr	r3, [pc, #116]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f023 0203 	bic.w	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	491a      	ldr	r1, [pc, #104]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e64:	f7fc fcb0 	bl	80017c8 <HAL_GetTick>
 8004e68:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6a:	e00a      	b.n	8004e82 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e6c:	f7fc fcac 	bl	80017c8 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e061      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <HAL_RCC_ClockConfig+0x260>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f003 020c 	and.w	r2, r3, #12
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d1eb      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d214      	bcs.n	8004ecc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea2:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f023 0207 	bic.w	r2, r3, #7
 8004eaa:	4906      	ldr	r1, [pc, #24]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb2:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <HAL_RCC_ClockConfig+0x25c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d005      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e040      	b.n	8004f46 <HAL_RCC_ClockConfig+0x2de>
 8004ec4:	40022000 	.word	0x40022000
 8004ec8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <HAL_RCC_ClockConfig+0x2e8>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	491a      	ldr	r1, [pc, #104]	; (8004f50 <HAL_RCC_ClockConfig+0x2e8>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d009      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ef6:	4b16      	ldr	r3, [pc, #88]	; (8004f50 <HAL_RCC_ClockConfig+0x2e8>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4912      	ldr	r1, [pc, #72]	; (8004f50 <HAL_RCC_ClockConfig+0x2e8>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f0a:	f000 f829 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 8004f0e:	4601      	mov	r1, r0
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <HAL_RCC_ClockConfig+0x2e8>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f18:	22f0      	movs	r2, #240	; 0xf0
 8004f1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	fa92 f2a2 	rbit	r2, r2
 8004f22:	60fa      	str	r2, [r7, #12]
  return result;
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	fab2 f282 	clz	r2, r2
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	40d3      	lsrs	r3, r2
 8004f2e:	4a09      	ldr	r2, [pc, #36]	; (8004f54 <HAL_RCC_ClockConfig+0x2ec>)
 8004f30:	5cd3      	ldrb	r3, [r2, r3]
 8004f32:	fa21 f303 	lsr.w	r3, r1, r3
 8004f36:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <HAL_RCC_ClockConfig+0x2f0>)
 8004f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f3a:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <HAL_RCC_ClockConfig+0x2f4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fc fbfe 	bl	8001740 <HAL_InitTick>
  
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3778      	adds	r7, #120	; 0x78
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000
 8004f54:	0800cf54 	.word	0x0800cf54
 8004f58:	20000000 	.word	0x20000000
 8004f5c:	20000004 	.word	0x20000004

08004f60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b08b      	sub	sp, #44	; 0x2c
 8004f64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004f7a:	4b29      	ldr	r3, [pc, #164]	; (8005020 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d002      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0x30>
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCC_GetSysClockFreq+0x36>
 8004f8e:	e03c      	b.n	800500a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f90:	4b24      	ldr	r3, [pc, #144]	; (8005024 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f92:	623b      	str	r3, [r7, #32]
      break;
 8004f94:	e03c      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004f9c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004fa0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	fa92 f2a2 	rbit	r2, r2
 8004fa8:	607a      	str	r2, [r7, #4]
  return result;
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	fab2 f282 	clz	r2, r2
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	40d3      	lsrs	r3, r2
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004fb6:	5cd3      	ldrb	r3, [r2, r3]
 8004fb8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004fba:	4b19      	ldr	r3, [pc, #100]	; (8005020 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	220f      	movs	r2, #15
 8004fc4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	fa92 f2a2 	rbit	r2, r2
 8004fcc:	60fa      	str	r2, [r7, #12]
  return result;
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	fab2 f282 	clz	r2, r2
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	40d3      	lsrs	r3, r2
 8004fd8:	4a14      	ldr	r2, [pc, #80]	; (800502c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004fda:	5cd3      	ldrb	r3, [r2, r3]
 8004fdc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d008      	beq.n	8004ffa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004fe8:	4a0e      	ldr	r2, [pc, #56]	; (8005024 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff8:	e004      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	4a0c      	ldr	r2, [pc, #48]	; (8005030 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ffe:	fb02 f303 	mul.w	r3, r2, r3
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	623b      	str	r3, [r7, #32]
      break;
 8005008:	e002      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800500a:	4b06      	ldr	r3, [pc, #24]	; (8005024 <HAL_RCC_GetSysClockFreq+0xc4>)
 800500c:	623b      	str	r3, [r7, #32]
      break;
 800500e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005010:	6a3b      	ldr	r3, [r7, #32]
}
 8005012:	4618      	mov	r0, r3
 8005014:	372c      	adds	r7, #44	; 0x2c
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40021000 	.word	0x40021000
 8005024:	007a1200 	.word	0x007a1200
 8005028:	0800cf64 	.word	0x0800cf64
 800502c:	0800cf74 	.word	0x0800cf74
 8005030:	003d0900 	.word	0x003d0900

08005034 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b092      	sub	sp, #72	; 0x48
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005044:	2300      	movs	r3, #0
 8005046:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 80d4 	beq.w	8005200 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005058:	4b4e      	ldr	r3, [pc, #312]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10e      	bne.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005064:	4b4b      	ldr	r3, [pc, #300]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	4a4a      	ldr	r2, [pc, #296]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800506a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506e:	61d3      	str	r3, [r2, #28]
 8005070:	4b48      	ldr	r3, [pc, #288]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800507c:	2301      	movs	r3, #1
 800507e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005082:	4b45      	ldr	r3, [pc, #276]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508a:	2b00      	cmp	r3, #0
 800508c:	d118      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800508e:	4b42      	ldr	r3, [pc, #264]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a41      	ldr	r2, [pc, #260]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005098:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800509a:	f7fc fb95 	bl	80017c8 <HAL_GetTick>
 800509e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a0:	e008      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a2:	f7fc fb91 	bl	80017c8 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b64      	cmp	r3, #100	; 0x64
 80050ae:	d901      	bls.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e169      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b4:	4b38      	ldr	r3, [pc, #224]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050c0:	4b34      	ldr	r3, [pc, #208]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 8084 	beq.w	80051da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050dc:	429a      	cmp	r2, r3
 80050de:	d07c      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050e0:	4b2c      	ldr	r3, [pc, #176]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	fa93 f3a3 	rbit	r3, r3
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050fa:	fab3 f383 	clz	r3, r3
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	4b26      	ldr	r3, [pc, #152]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	461a      	mov	r2, r3
 800510a:	2301      	movs	r3, #1
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005112:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	fa93 f3a3 	rbit	r3, r3
 800511a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800511c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800511e:	fab3 f383 	clz	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	4b1d      	ldr	r3, [pc, #116]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005128:	4413      	add	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	461a      	mov	r2, r3
 800512e:	2300      	movs	r3, #0
 8005130:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005132:	4a18      	ldr	r2, [pc, #96]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005136:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d04b      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005142:	f7fc fb41 	bl	80017c8 <HAL_GetTick>
 8005146:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005148:	e00a      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fc fb3d 	bl	80017c8 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	; 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e113      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005160:	2302      	movs	r3, #2
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	fa93 f3a3 	rbit	r3, r3
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
 800516c:	2302      	movs	r3, #2
 800516e:	623b      	str	r3, [r7, #32]
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	fa93 f3a3 	rbit	r3, r3
 8005176:	61fb      	str	r3, [r7, #28]
  return result;
 8005178:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517a:	fab3 f383 	clz	r3, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	095b      	lsrs	r3, r3, #5
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f043 0302 	orr.w	r3, r3, #2
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d108      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800518e:	4b01      	ldr	r3, [pc, #4]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	e00d      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005194:	40021000 	.word	0x40021000
 8005198:	40007000 	.word	0x40007000
 800519c:	10908100 	.word	0x10908100
 80051a0:	2302      	movs	r3, #2
 80051a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	fa93 f3a3 	rbit	r3, r3
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	4b78      	ldr	r3, [pc, #480]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	2202      	movs	r2, #2
 80051b2:	613a      	str	r2, [r7, #16]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	fa92 f2a2 	rbit	r2, r2
 80051ba:	60fa      	str	r2, [r7, #12]
  return result;
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	fab2 f282 	clz	r2, r2
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	f002 021f 	and.w	r2, r2, #31
 80051ce:	2101      	movs	r1, #1
 80051d0:	fa01 f202 	lsl.w	r2, r1, r2
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0b7      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80051da:	4b6d      	ldr	r3, [pc, #436]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	496a      	ldr	r1, [pc, #424]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d105      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f4:	4b66      	ldr	r3, [pc, #408]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	4a65      	ldr	r2, [pc, #404]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800520c:	4b60      	ldr	r3, [pc, #384]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	f023 0203 	bic.w	r2, r3, #3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	495d      	ldr	r1, [pc, #372]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800521a:	4313      	orrs	r3, r2
 800521c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d008      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800522a:	4b59      	ldr	r3, [pc, #356]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	4956      	ldr	r1, [pc, #344]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005238:	4313      	orrs	r3, r2
 800523a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005248:	4b51      	ldr	r3, [pc, #324]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	494e      	ldr	r1, [pc, #312]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005256:	4313      	orrs	r3, r2
 8005258:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d008      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005266:	4b4a      	ldr	r3, [pc, #296]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	f023 0210 	bic.w	r2, r3, #16
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	4947      	ldr	r1, [pc, #284]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005274:	4313      	orrs	r3, r2
 8005276:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005284:	4b42      	ldr	r3, [pc, #264]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	493f      	ldr	r1, [pc, #252]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005292:	4313      	orrs	r3, r2
 8005294:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d008      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052a2:	4b3b      	ldr	r3, [pc, #236]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	f023 0220 	bic.w	r2, r3, #32
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	4938      	ldr	r1, [pc, #224]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052c0:	4b33      	ldr	r3, [pc, #204]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	4930      	ldr	r1, [pc, #192]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052de:	4b2c      	ldr	r3, [pc, #176]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	4929      	ldr	r1, [pc, #164]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052fc:	4b24      	ldr	r3, [pc, #144]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	4921      	ldr	r1, [pc, #132]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800530a:	4313      	orrs	r3, r2
 800530c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005316:	2b00      	cmp	r3, #0
 8005318:	d008      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800531a:	4b1d      	ldr	r3, [pc, #116]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	491a      	ldr	r1, [pc, #104]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005328:	4313      	orrs	r3, r2
 800532a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d008      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005338:	4b15      	ldr	r3, [pc, #84]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	4912      	ldr	r1, [pc, #72]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005346:	4313      	orrs	r3, r2
 8005348:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005356:	4b0e      	ldr	r3, [pc, #56]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	490b      	ldr	r1, [pc, #44]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005364:	4313      	orrs	r3, r2
 8005366:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005374:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005380:	4903      	ldr	r1, [pc, #12]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005382:	4313      	orrs	r3, r2
 8005384:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3748      	adds	r7, #72	; 0x48
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40021000 	.word	0x40021000

08005394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e09d      	b.n	80054e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d108      	bne.n	80053c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053b6:	d009      	beq.n	80053cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	61da      	str	r2, [r3, #28]
 80053be:	e005      	b.n	80053cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fc f888 	bl	80014fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005402:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800540c:	d902      	bls.n	8005414 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	e002      	b.n	800541a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005418:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005422:	d007      	beq.n	8005434 <HAL_SPI_Init+0xa0>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800542c:	d002      	beq.n	8005434 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	ea42 0103 	orr.w	r1, r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	0c1b      	lsrs	r3, r3, #16
 8005490:	f003 0204 	and.w	r2, r3, #4
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054b0:	ea42 0103 	orr.w	r1, r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b082      	sub	sp, #8
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e049      	b.n	8005590 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d106      	bne.n	8005516 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7fc f835 	bl	8001580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2202      	movs	r2, #2
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3304      	adds	r3, #4
 8005526:	4619      	mov	r1, r3
 8005528:	4610      	mov	r0, r2
 800552a:	f000 f951 	bl	80057d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d001      	beq.n	80055b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e042      	b.n	8005636 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a21      	ldr	r2, [pc, #132]	; (8005644 <HAL_TIM_Base_Start+0xac>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d018      	beq.n	80055f4 <HAL_TIM_Base_Start+0x5c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ca:	d013      	beq.n	80055f4 <HAL_TIM_Base_Start+0x5c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a1d      	ldr	r2, [pc, #116]	; (8005648 <HAL_TIM_Base_Start+0xb0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00e      	beq.n	80055f4 <HAL_TIM_Base_Start+0x5c>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a1c      	ldr	r2, [pc, #112]	; (800564c <HAL_TIM_Base_Start+0xb4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d009      	beq.n	80055f4 <HAL_TIM_Base_Start+0x5c>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1a      	ldr	r2, [pc, #104]	; (8005650 <HAL_TIM_Base_Start+0xb8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d004      	beq.n	80055f4 <HAL_TIM_Base_Start+0x5c>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a19      	ldr	r2, [pc, #100]	; (8005654 <HAL_TIM_Base_Start+0xbc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d115      	bne.n	8005620 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	4b17      	ldr	r3, [pc, #92]	; (8005658 <HAL_TIM_Base_Start+0xc0>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b06      	cmp	r3, #6
 8005604:	d015      	beq.n	8005632 <HAL_TIM_Base_Start+0x9a>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800560c:	d011      	beq.n	8005632 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0201 	orr.w	r2, r2, #1
 800561c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561e:	e008      	b.n	8005632 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	e000      	b.n	8005634 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005632:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40012c00 	.word	0x40012c00
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40013400 	.word	0x40013400
 8005654:	40014000 	.word	0x40014000
 8005658:	00010007 	.word	0x00010007

0800565c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_TIM_ConfigClockSource+0x18>
 8005670:	2302      	movs	r3, #2
 8005672:	e0a8      	b.n	80057c6 <HAL_TIM_ConfigClockSource+0x16a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005692:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005696:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800569e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d067      	beq.n	8005780 <HAL_TIM_ConfigClockSource+0x124>
 80056b0:	2b40      	cmp	r3, #64	; 0x40
 80056b2:	d80b      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x70>
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d073      	beq.n	80057a0 <HAL_TIM_ConfigClockSource+0x144>
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d802      	bhi.n	80056c2 <HAL_TIM_ConfigClockSource+0x66>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d06f      	beq.n	80057a0 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80056c0:	e078      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d06c      	beq.n	80057a0 <HAL_TIM_ConfigClockSource+0x144>
 80056c6:	2b30      	cmp	r3, #48	; 0x30
 80056c8:	d06a      	beq.n	80057a0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80056ca:	e073      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80056cc:	2b70      	cmp	r3, #112	; 0x70
 80056ce:	d00d      	beq.n	80056ec <HAL_TIM_ConfigClockSource+0x90>
 80056d0:	2b70      	cmp	r3, #112	; 0x70
 80056d2:	d804      	bhi.n	80056de <HAL_TIM_ConfigClockSource+0x82>
 80056d4:	2b50      	cmp	r3, #80	; 0x50
 80056d6:	d033      	beq.n	8005740 <HAL_TIM_ConfigClockSource+0xe4>
 80056d8:	2b60      	cmp	r3, #96	; 0x60
 80056da:	d041      	beq.n	8005760 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80056dc:	e06a      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e2:	d066      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x156>
 80056e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e8:	d017      	beq.n	800571a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80056ea:	e063      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	6899      	ldr	r1, [r3, #8]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f000 f972 	bl	80059e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800570e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	609a      	str	r2, [r3, #8]
      break;
 8005718:	e04c      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6899      	ldr	r1, [r3, #8]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f000 f95b 	bl	80059e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800573c:	609a      	str	r2, [r3, #8]
      break;
 800573e:	e039      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	6859      	ldr	r1, [r3, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	461a      	mov	r2, r3
 800574e:	f000 f8cf 	bl	80058f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2150      	movs	r1, #80	; 0x50
 8005758:	4618      	mov	r0, r3
 800575a:	f000 f928 	bl	80059ae <TIM_ITRx_SetConfig>
      break;
 800575e:	e029      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	6859      	ldr	r1, [r3, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	461a      	mov	r2, r3
 800576e:	f000 f8ee 	bl	800594e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2160      	movs	r1, #96	; 0x60
 8005778:	4618      	mov	r0, r3
 800577a:	f000 f918 	bl	80059ae <TIM_ITRx_SetConfig>
      break;
 800577e:	e019      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6818      	ldr	r0, [r3, #0]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	6859      	ldr	r1, [r3, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	461a      	mov	r2, r3
 800578e:	f000 f8af 	bl	80058f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2140      	movs	r1, #64	; 0x40
 8005798:	4618      	mov	r0, r3
 800579a:	f000 f908 	bl	80059ae <TIM_ITRx_SetConfig>
      break;
 800579e:	e009      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4619      	mov	r1, r3
 80057aa:	4610      	mov	r0, r2
 80057ac:	f000 f8ff 	bl	80059ae <TIM_ITRx_SetConfig>
        break;
 80057b0:	e000      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80057b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a3c      	ldr	r2, [pc, #240]	; (80058d4 <TIM_Base_SetConfig+0x104>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00f      	beq.n	8005808 <TIM_Base_SetConfig+0x38>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ee:	d00b      	beq.n	8005808 <TIM_Base_SetConfig+0x38>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a39      	ldr	r2, [pc, #228]	; (80058d8 <TIM_Base_SetConfig+0x108>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <TIM_Base_SetConfig+0x38>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a38      	ldr	r2, [pc, #224]	; (80058dc <TIM_Base_SetConfig+0x10c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <TIM_Base_SetConfig+0x38>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a37      	ldr	r2, [pc, #220]	; (80058e0 <TIM_Base_SetConfig+0x110>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d108      	bne.n	800581a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2d      	ldr	r2, [pc, #180]	; (80058d4 <TIM_Base_SetConfig+0x104>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01b      	beq.n	800585a <TIM_Base_SetConfig+0x8a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005828:	d017      	beq.n	800585a <TIM_Base_SetConfig+0x8a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2a      	ldr	r2, [pc, #168]	; (80058d8 <TIM_Base_SetConfig+0x108>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <TIM_Base_SetConfig+0x8a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a29      	ldr	r2, [pc, #164]	; (80058dc <TIM_Base_SetConfig+0x10c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00f      	beq.n	800585a <TIM_Base_SetConfig+0x8a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a28      	ldr	r2, [pc, #160]	; (80058e0 <TIM_Base_SetConfig+0x110>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00b      	beq.n	800585a <TIM_Base_SetConfig+0x8a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a27      	ldr	r2, [pc, #156]	; (80058e4 <TIM_Base_SetConfig+0x114>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d007      	beq.n	800585a <TIM_Base_SetConfig+0x8a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a26      	ldr	r2, [pc, #152]	; (80058e8 <TIM_Base_SetConfig+0x118>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d003      	beq.n	800585a <TIM_Base_SetConfig+0x8a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a25      	ldr	r2, [pc, #148]	; (80058ec <TIM_Base_SetConfig+0x11c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d108      	bne.n	800586c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a10      	ldr	r2, [pc, #64]	; (80058d4 <TIM_Base_SetConfig+0x104>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00f      	beq.n	80058b8 <TIM_Base_SetConfig+0xe8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a11      	ldr	r2, [pc, #68]	; (80058e0 <TIM_Base_SetConfig+0x110>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00b      	beq.n	80058b8 <TIM_Base_SetConfig+0xe8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a10      	ldr	r2, [pc, #64]	; (80058e4 <TIM_Base_SetConfig+0x114>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d007      	beq.n	80058b8 <TIM_Base_SetConfig+0xe8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a0f      	ldr	r2, [pc, #60]	; (80058e8 <TIM_Base_SetConfig+0x118>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_Base_SetConfig+0xe8>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a0e      	ldr	r2, [pc, #56]	; (80058ec <TIM_Base_SetConfig+0x11c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d103      	bne.n	80058c0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	615a      	str	r2, [r3, #20]
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40013400 	.word	0x40013400
 80058e4:	40014000 	.word	0x40014000
 80058e8:	40014400 	.word	0x40014400
 80058ec:	40014800 	.word	0x40014800

080058f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	f023 0201 	bic.w	r2, r3, #1
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800591a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f023 030a 	bic.w	r3, r3, #10
 800592c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	621a      	str	r2, [r3, #32]
}
 8005942:	bf00      	nop
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800594e:	b480      	push	{r7}
 8005950:	b087      	sub	sp, #28
 8005952:	af00      	add	r7, sp, #0
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f023 0210 	bic.w	r2, r3, #16
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	031b      	lsls	r3, r3, #12
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800598a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	621a      	str	r2, [r3, #32]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b085      	sub	sp, #20
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f043 0307 	orr.w	r3, r3, #7
 80059d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	609a      	str	r2, [r3, #8]
}
 80059d8:	bf00      	nop
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	021a      	lsls	r2, r3, #8
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	431a      	orrs	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	609a      	str	r2, [r3, #8]
}
 8005a18:	bf00      	nop
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e063      	b.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a2b      	ldr	r2, [pc, #172]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d004      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a2a      	ldr	r2, [pc, #168]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d108      	bne.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1b      	ldr	r2, [pc, #108]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d018      	beq.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aae:	d013      	beq.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a18      	ldr	r2, [pc, #96]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a17      	ldr	r2, [pc, #92]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a12      	ldr	r2, [pc, #72]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a13      	ldr	r2, [pc, #76]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d10c      	bne.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ade:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	40012c00 	.word	0x40012c00
 8005b14:	40013400 	.word	0x40013400
 8005b18:	40000400 	.word	0x40000400
 8005b1c:	40000800 	.word	0x40000800
 8005b20:	40014000 	.word	0x40014000

08005b24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b34:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005b38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b5a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005b5e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	43db      	mvns	r3, r3
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	4013      	ands	r3, r2
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b88:	b084      	sub	sp, #16
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	f107 0014 	add.w	r0, r7, #20
 8005b96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	b004      	add	sp, #16
 8005bc8:	4770      	bx	lr
	...

08005bcc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b09b      	sub	sp, #108	; 0x6c
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	78db      	ldrb	r3, [r3, #3]
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d81f      	bhi.n	8005c3e <USB_ActivateEndpoint+0x72>
 8005bfe:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <USB_ActivateEndpoint+0x38>)
 8005c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c04:	08005c15 	.word	0x08005c15
 8005c08:	08005c31 	.word	0x08005c31
 8005c0c:	08005c47 	.word	0x08005c47
 8005c10:	08005c23 	.word	0x08005c23
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005c14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c1c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c20:	e012      	b.n	8005c48 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005c22:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c26:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005c2a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c2e:	e00b      	b.n	8005c48 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005c30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c38:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c3c:	e004      	b.n	8005c48 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005c44:	e000      	b.n	8005c48 <USB_ActivateEndpoint+0x7c>
      break;
 8005c46:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	441a      	add	r2, r3
 8005c52:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	b21b      	sxth	r3, r3
 8005c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c82:	b21a      	sxth	r2, r3
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	b21b      	sxth	r3, r3
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	b21b      	sxth	r3, r3
 8005c8e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	441a      	add	r2, r3
 8005c9c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	7b1b      	ldrb	r3, [r3, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f040 8149 	bne.w	8005f50 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	785b      	ldrb	r3, [r3, #1]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 8084 	beq.w	8005dd0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	617b      	str	r3, [r7, #20]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	4413      	add	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	011a      	lsls	r2, r3, #4
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	88db      	ldrh	r3, [r3, #6]
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	81fb      	strh	r3, [r7, #14]
 8005d0a:	89fb      	ldrh	r3, [r7, #14]
 8005d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01b      	beq.n	8005d4c <USB_ActivateEndpoint+0x180>
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2a:	81bb      	strh	r3, [r7, #12]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	441a      	add	r2, r3
 8005d36:	89bb      	ldrh	r3, [r7, #12]
 8005d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	78db      	ldrb	r3, [r3, #3]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d020      	beq.n	8005d96 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d6a:	813b      	strh	r3, [r7, #8]
 8005d6c:	893b      	ldrh	r3, [r7, #8]
 8005d6e:	f083 0320 	eor.w	r3, r3, #32
 8005d72:	813b      	strh	r3, [r7, #8]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	441a      	add	r2, r3
 8005d7e:	893b      	ldrh	r3, [r7, #8]
 8005d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	8013      	strh	r3, [r2, #0]
 8005d94:	e27f      	b.n	8006296 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dac:	817b      	strh	r3, [r7, #10]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	441a      	add	r2, r3
 8005db8:	897b      	ldrh	r3, [r7, #10]
 8005dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	8013      	strh	r3, [r2, #0]
 8005dce:	e262      	b.n	8006296 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	461a      	mov	r2, r3
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	4413      	add	r3, r2
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	011a      	lsls	r2, r3, #4
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	88db      	ldrh	r3, [r3, #6]
 8005df8:	085b      	lsrs	r3, r3, #1
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	627b      	str	r3, [r7, #36]	; 0x24
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	4413      	add	r3, r2
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	011a      	lsls	r2, r3, #4
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	4413      	add	r3, r2
 8005e22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e26:	623b      	str	r3, [r7, #32]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d112      	bne.n	8005e56 <USB_ActivateEndpoint+0x28a>
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	801a      	strh	r2, [r3, #0]
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	801a      	strh	r2, [r3, #0]
 8005e54:	e02f      	b.n	8005eb6 <USB_ActivateEndpoint+0x2ea>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e5c:	d813      	bhi.n	8005e86 <USB_ActivateEndpoint+0x2ba>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	085b      	lsrs	r3, r3, #1
 8005e64:	663b      	str	r3, [r7, #96]	; 0x60
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <USB_ActivateEndpoint+0x2ac>
 8005e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e74:	3301      	adds	r3, #1
 8005e76:	663b      	str	r3, [r7, #96]	; 0x60
 8005e78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	029b      	lsls	r3, r3, #10
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	801a      	strh	r2, [r3, #0]
 8005e84:	e017      	b.n	8005eb6 <USB_ActivateEndpoint+0x2ea>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d102      	bne.n	8005ea0 <USB_ActivateEndpoint+0x2d4>
 8005e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	663b      	str	r3, [r7, #96]	; 0x60
 8005ea0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	029b      	lsls	r3, r3, #10
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	83fb      	strh	r3, [r7, #30]
 8005ec4:	8bfb      	ldrh	r3, [r7, #30]
 8005ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d01b      	beq.n	8005f06 <USB_ActivateEndpoint+0x33a>
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee4:	83bb      	strh	r3, [r7, #28]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	441a      	add	r2, r3
 8005ef0:	8bbb      	ldrh	r3, [r7, #28]
 8005ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1c:	837b      	strh	r3, [r7, #26]
 8005f1e:	8b7b      	ldrh	r3, [r7, #26]
 8005f20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f24:	837b      	strh	r3, [r7, #26]
 8005f26:	8b7b      	ldrh	r3, [r7, #26]
 8005f28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f2c:	837b      	strh	r3, [r7, #26]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	441a      	add	r2, r3
 8005f38:	8b7b      	ldrh	r3, [r7, #26]
 8005f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	8013      	strh	r3, [r2, #0]
 8005f4e:	e1a2      	b.n	8006296 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	441a      	add	r2, r3
 8005f74:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f80:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f9c:	4413      	add	r3, r2
 8005f9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	011a      	lsls	r2, r3, #4
 8005fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fae:	657b      	str	r3, [r7, #84]	; 0x54
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	891b      	ldrh	r3, [r3, #8]
 8005fb4:	085b      	lsrs	r3, r3, #1
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fbe:	801a      	strh	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd0:	4413      	add	r3, r2
 8005fd2:	653b      	str	r3, [r7, #80]	; 0x50
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	011a      	lsls	r2, r3, #4
 8005fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	895b      	ldrh	r3, [r3, #10]
 8005fe8:	085b      	lsrs	r3, r3, #1
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	785b      	ldrb	r3, [r3, #1]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f040 8091 	bne.w	8006120 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800600c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800600e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01b      	beq.n	800604e <USB_ActivateEndpoint+0x482>
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	b29b      	uxth	r3, r3
 8006024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	441a      	add	r2, r3
 8006038:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800603a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800603e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006042:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604a:	b29b      	uxth	r3, r3
 800604c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	873b      	strh	r3, [r7, #56]	; 0x38
 800605c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800605e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d01b      	beq.n	800609e <USB_ActivateEndpoint+0x4d2>
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	441a      	add	r2, r3
 8006088:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800608a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006096:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80060b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80060be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	441a      	add	r2, r3
 80060d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060fc:	867b      	strh	r3, [r7, #50]	; 0x32
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	441a      	add	r2, r3
 8006108:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800610a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800610e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611a:	b29b      	uxth	r3, r3
 800611c:	8013      	strh	r3, [r2, #0]
 800611e:	e0ba      	b.n	8006296 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006130:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01d      	beq.n	8006178 <USB_ActivateEndpoint+0x5ac>
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006152:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	441a      	add	r2, r3
 8006160:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800616c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006174:	b29b      	uxth	r3, r3
 8006176:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006188:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800618c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01d      	beq.n	80061d0 <USB_ActivateEndpoint+0x604>
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	441a      	add	r2, r3
 80061b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80061bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	78db      	ldrb	r3, [r3, #3]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d024      	beq.n	8006222 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80061f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80061f6:	f083 0320 	eor.w	r3, r3, #32
 80061fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	441a      	add	r2, r3
 8006208:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800620c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621c:	b29b      	uxth	r3, r3
 800621e:	8013      	strh	r3, [r2, #0]
 8006220:	e01d      	b.n	800625e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29b      	uxth	r3, r3
 8006230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006238:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	441a      	add	r2, r3
 8006246:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800624a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800624e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800625a:	b29b      	uxth	r3, r3
 800625c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006274:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	441a      	add	r2, r3
 8006280:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006292:	b29b      	uxth	r3, r3
 8006294:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006296:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800629a:	4618      	mov	r0, r3
 800629c:	376c      	adds	r7, #108	; 0x6c
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop

080062a8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b08d      	sub	sp, #52	; 0x34
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	7b1b      	ldrb	r3, [r3, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f040 808e 	bne.w	80063d8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d044      	beq.n	800634e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	81bb      	strh	r3, [r7, #12]
 80062d2:	89bb      	ldrh	r3, [r7, #12]
 80062d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01b      	beq.n	8006314 <USB_DeactivateEndpoint+0x6c>
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f2:	817b      	strh	r3, [r7, #10]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	441a      	add	r2, r3
 80062fe:	897b      	ldrh	r3, [r7, #10]
 8006300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006310:	b29b      	uxth	r3, r3
 8006312:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	b29b      	uxth	r3, r3
 8006322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800632a:	813b      	strh	r3, [r7, #8]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	441a      	add	r2, r3
 8006336:	893b      	ldrh	r3, [r7, #8]
 8006338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800633c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006348:	b29b      	uxth	r3, r3
 800634a:	8013      	strh	r3, [r2, #0]
 800634c:	e192      	b.n	8006674 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	827b      	strh	r3, [r7, #18]
 800635c:	8a7b      	ldrh	r3, [r7, #18]
 800635e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d01b      	beq.n	800639e <USB_DeactivateEndpoint+0xf6>
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29b      	uxth	r3, r3
 8006374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637c:	823b      	strh	r3, [r7, #16]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	441a      	add	r2, r3
 8006388:	8a3b      	ldrh	r3, [r7, #16]
 800638a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800638e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006392:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639a:	b29b      	uxth	r3, r3
 800639c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b4:	81fb      	strh	r3, [r7, #14]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	441a      	add	r2, r3
 80063c0:	89fb      	ldrh	r3, [r7, #14]
 80063c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	8013      	strh	r3, [r2, #0]
 80063d6:	e14d      	b.n	8006674 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	785b      	ldrb	r3, [r3, #1]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f040 80a5 	bne.w	800652c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	843b      	strh	r3, [r7, #32]
 80063f0:	8c3b      	ldrh	r3, [r7, #32]
 80063f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d01b      	beq.n	8006432 <USB_DeactivateEndpoint+0x18a>
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006410:	83fb      	strh	r3, [r7, #30]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	441a      	add	r2, r3
 800641c:	8bfb      	ldrh	r3, [r7, #30]
 800641e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006426:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800642a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800642e:	b29b      	uxth	r3, r3
 8006430:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	83bb      	strh	r3, [r7, #28]
 8006440:	8bbb      	ldrh	r3, [r7, #28]
 8006442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006446:	2b00      	cmp	r3, #0
 8006448:	d01b      	beq.n	8006482 <USB_DeactivateEndpoint+0x1da>
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800645c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006460:	837b      	strh	r3, [r7, #26]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	441a      	add	r2, r3
 800646c:	8b7b      	ldrh	r3, [r7, #26]
 800646e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800647a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800647e:	b29b      	uxth	r3, r3
 8006480:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006498:	833b      	strh	r3, [r7, #24]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	441a      	add	r2, r3
 80064a4:	8b3b      	ldrh	r3, [r7, #24]
 80064a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d0:	82fb      	strh	r3, [r7, #22]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	441a      	add	r2, r3
 80064dc:	8afb      	ldrh	r3, [r7, #22]
 80064de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006508:	82bb      	strh	r3, [r7, #20]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	441a      	add	r2, r3
 8006514:	8abb      	ldrh	r3, [r7, #20]
 8006516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800651e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006526:	b29b      	uxth	r3, r3
 8006528:	8013      	strh	r3, [r2, #0]
 800652a:	e0a3      	b.n	8006674 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800653a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800653c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d01b      	beq.n	800657c <USB_DeactivateEndpoint+0x2d4>
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	441a      	add	r2, r3
 8006566:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800656c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006578:	b29b      	uxth	r3, r3
 800657a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	857b      	strh	r3, [r7, #42]	; 0x2a
 800658a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800658c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01b      	beq.n	80065cc <USB_DeactivateEndpoint+0x324>
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065aa:	853b      	strh	r3, [r7, #40]	; 0x28
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	441a      	add	r2, r3
 80065b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80065b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	441a      	add	r2, r3
 80065ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006600:	b29b      	uxth	r3, r3
 8006602:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800661a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	441a      	add	r2, r3
 8006626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800662c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006638:	b29b      	uxth	r3, r3
 800663a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800664e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006652:	847b      	strh	r3, [r7, #34]	; 0x22
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	441a      	add	r2, r3
 800665e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800666c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006670:	b29b      	uxth	r3, r3
 8006672:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3734      	adds	r7, #52	; 0x34
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b0c4      	sub	sp, #272	; 0x110
 8006686:	af00      	add	r7, sp, #0
 8006688:	1d3b      	adds	r3, r7, #4
 800668a:	6018      	str	r0, [r3, #0]
 800668c:	463b      	mov	r3, r7
 800668e:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006690:	463b      	mov	r3, r7
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	2b01      	cmp	r3, #1
 8006698:	f040 8557 	bne.w	800714a <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800669c:	463b      	mov	r3, r7
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	463b      	mov	r3, r7
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d905      	bls.n	80066b8 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80066ac:	463b      	mov	r3, r7
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80066b6:	e004      	b.n	80066c2 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80066b8:	463b      	mov	r3, r7
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80066c2:	463b      	mov	r3, r7
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	7b1b      	ldrb	r3, [r3, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d12c      	bne.n	8006726 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80066cc:	463b      	mov	r3, r7
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6959      	ldr	r1, [r3, #20]
 80066d2:	463b      	mov	r3, r7
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	88da      	ldrh	r2, [r3, #6]
 80066d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066dc:	b29b      	uxth	r3, r3
 80066de:	1d38      	adds	r0, r7, #4
 80066e0:	6800      	ldr	r0, [r0, #0]
 80066e2:	f001 fa1c 	bl	8007b1e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80066e6:	1d3b      	adds	r3, r7, #4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	1d3b      	adds	r3, r7, #4
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	461a      	mov	r2, r3
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	4413      	add	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	463b      	mov	r3, r7
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	011a      	lsls	r2, r3, #4
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	4413      	add	r3, r2
 800670a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800670e:	f107 0310 	add.w	r3, r7, #16
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006718:	b29a      	uxth	r2, r3
 800671a:	f107 0310 	add.w	r3, r7, #16
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	801a      	strh	r2, [r3, #0]
 8006722:	f000 bcdd 	b.w	80070e0 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006726:	463b      	mov	r3, r7
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	78db      	ldrb	r3, [r3, #3]
 800672c:	2b02      	cmp	r3, #2
 800672e:	f040 8347 	bne.w	8006dc0 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006732:	463b      	mov	r3, r7
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6a1a      	ldr	r2, [r3, #32]
 8006738:	463b      	mov	r3, r7
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	429a      	cmp	r2, r3
 8006740:	f240 82eb 	bls.w	8006d1a <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006744:	1d3b      	adds	r3, r7, #4
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	463b      	mov	r3, r7
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800675a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006762:	1d3b      	adds	r3, r7, #4
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	463b      	mov	r3, r7
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	441a      	add	r2, r3
 8006770:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800677c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006784:	b29b      	uxth	r3, r3
 8006786:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006788:	463b      	mov	r3, r7
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6a1a      	ldr	r2, [r3, #32]
 800678e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006792:	1ad2      	subs	r2, r2, r3
 8006794:	463b      	mov	r3, r7
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800679a:	1d3b      	adds	r3, r7, #4
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	463b      	mov	r3, r7
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8159 	beq.w	8006a68 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067b6:	1d3b      	adds	r3, r7, #4
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	637b      	str	r3, [r7, #52]	; 0x34
 80067bc:	463b      	mov	r3, r7
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d164      	bne.n	8006890 <USB_EPStartXfer+0x20e>
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067cc:	1d3b      	adds	r3, r7, #4
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	4413      	add	r3, r2
 80067dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067de:	463b      	mov	r3, r7
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	011a      	lsls	r2, r3, #4
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	4413      	add	r3, r2
 80067ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80067f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d112      	bne.n	800681e <USB_EPStartXfer+0x19c>
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006802:	b29a      	uxth	r2, r3
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006816:	b29a      	uxth	r2, r3
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	801a      	strh	r2, [r3, #0]
 800681c:	e054      	b.n	80068c8 <USB_EPStartXfer+0x246>
 800681e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006822:	2b3e      	cmp	r3, #62	; 0x3e
 8006824:	d817      	bhi.n	8006856 <USB_EPStartXfer+0x1d4>
 8006826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d004      	beq.n	8006846 <USB_EPStartXfer+0x1c4>
 800683c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006840:	3301      	adds	r3, #1
 8006842:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684a:	b29b      	uxth	r3, r3
 800684c:	029b      	lsls	r3, r3, #10
 800684e:	b29a      	uxth	r2, r3
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	801a      	strh	r2, [r3, #0]
 8006854:	e038      	b.n	80068c8 <USB_EPStartXfer+0x246>
 8006856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006864:	f003 031f 	and.w	r3, r3, #31
 8006868:	2b00      	cmp	r3, #0
 800686a:	d104      	bne.n	8006876 <USB_EPStartXfer+0x1f4>
 800686c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006870:	3b01      	subs	r3, #1
 8006872:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687a:	b29b      	uxth	r3, r3
 800687c:	029b      	lsls	r3, r3, #10
 800687e:	b29b      	uxth	r3, r3
 8006880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006888:	b29a      	uxth	r2, r3
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	801a      	strh	r2, [r3, #0]
 800688e:	e01b      	b.n	80068c8 <USB_EPStartXfer+0x246>
 8006890:	463b      	mov	r3, r7
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	785b      	ldrb	r3, [r3, #1]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d116      	bne.n	80068c8 <USB_EPStartXfer+0x246>
 800689a:	1d3b      	adds	r3, r7, #4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a8:	4413      	add	r3, r2
 80068aa:	637b      	str	r3, [r7, #52]	; 0x34
 80068ac:	463b      	mov	r3, r7
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	011a      	lsls	r2, r3, #4
 80068b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b6:	4413      	add	r3, r2
 80068b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068bc:	633b      	str	r3, [r7, #48]	; 0x30
 80068be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80068c8:	463b      	mov	r3, r7
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	895b      	ldrh	r3, [r3, #10]
 80068ce:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068d2:	463b      	mov	r3, r7
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6959      	ldr	r1, [r3, #20]
 80068d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068dc:	b29b      	uxth	r3, r3
 80068de:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80068e2:	1d38      	adds	r0, r7, #4
 80068e4:	6800      	ldr	r0, [r0, #0]
 80068e6:	f001 f91a 	bl	8007b1e <USB_WritePMA>
            ep->xfer_buff += len;
 80068ea:	463b      	mov	r3, r7
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	695a      	ldr	r2, [r3, #20]
 80068f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068f4:	441a      	add	r2, r3
 80068f6:	463b      	mov	r3, r7
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80068fc:	463b      	mov	r3, r7
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6a1a      	ldr	r2, [r3, #32]
 8006902:	463b      	mov	r3, r7
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	429a      	cmp	r2, r3
 800690a:	d909      	bls.n	8006920 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800690c:	463b      	mov	r3, r7
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6a1a      	ldr	r2, [r3, #32]
 8006912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006916:	1ad2      	subs	r2, r2, r3
 8006918:	463b      	mov	r3, r7
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	621a      	str	r2, [r3, #32]
 800691e:	e008      	b.n	8006932 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006920:	463b      	mov	r3, r7
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800692a:	463b      	mov	r3, r7
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2200      	movs	r2, #0
 8006930:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006932:	463b      	mov	r3, r7
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	785b      	ldrb	r3, [r3, #1]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d164      	bne.n	8006a06 <USB_EPStartXfer+0x384>
 800693c:	1d3b      	adds	r3, r7, #4
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	61fb      	str	r3, [r7, #28]
 8006942:	1d3b      	adds	r3, r7, #4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800694a:	b29b      	uxth	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	4413      	add	r3, r2
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	463b      	mov	r3, r7
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	011a      	lsls	r2, r3, #4
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	4413      	add	r3, r2
 8006960:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d112      	bne.n	8006994 <USB_EPStartXfer+0x312>
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006978:	b29a      	uxth	r2, r3
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	801a      	strh	r2, [r3, #0]
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	b29b      	uxth	r3, r3
 8006984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800698c:	b29a      	uxth	r2, r3
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	801a      	strh	r2, [r3, #0]
 8006992:	e057      	b.n	8006a44 <USB_EPStartXfer+0x3c2>
 8006994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006998:	2b3e      	cmp	r3, #62	; 0x3e
 800699a:	d817      	bhi.n	80069cc <USB_EPStartXfer+0x34a>
 800699c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069a0:	085b      	lsrs	r3, r3, #1
 80069a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d004      	beq.n	80069bc <USB_EPStartXfer+0x33a>
 80069b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069b6:	3301      	adds	r3, #1
 80069b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	029b      	lsls	r3, r3, #10
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	801a      	strh	r2, [r3, #0]
 80069ca:	e03b      	b.n	8006a44 <USB_EPStartXfer+0x3c2>
 80069cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069da:	f003 031f 	and.w	r3, r3, #31
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d104      	bne.n	80069ec <USB_EPStartXfer+0x36a>
 80069e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069e6:	3b01      	subs	r3, #1
 80069e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	029b      	lsls	r3, r3, #10
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	801a      	strh	r2, [r3, #0]
 8006a04:	e01e      	b.n	8006a44 <USB_EPStartXfer+0x3c2>
 8006a06:	463b      	mov	r3, r7
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	785b      	ldrb	r3, [r3, #1]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d119      	bne.n	8006a44 <USB_EPStartXfer+0x3c2>
 8006a10:	1d3b      	adds	r3, r7, #4
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
 8006a16:	1d3b      	adds	r3, r7, #4
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	461a      	mov	r2, r3
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	4413      	add	r3, r2
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
 8006a28:	463b      	mov	r3, r7
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	011a      	lsls	r2, r3, #4
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	4413      	add	r3, r2
 8006a34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a38:	623b      	str	r3, [r7, #32]
 8006a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a44:	463b      	mov	r3, r7
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	891b      	ldrh	r3, [r3, #8]
 8006a4a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a4e:	463b      	mov	r3, r7
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6959      	ldr	r1, [r3, #20]
 8006a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006a5e:	1d38      	adds	r0, r7, #4
 8006a60:	6800      	ldr	r0, [r0, #0]
 8006a62:	f001 f85c 	bl	8007b1e <USB_WritePMA>
 8006a66:	e33b      	b.n	80070e0 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a68:	463b      	mov	r3, r7
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	785b      	ldrb	r3, [r3, #1]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d164      	bne.n	8006b3c <USB_EPStartXfer+0x4ba>
 8006a72:	1d3b      	adds	r3, r7, #4
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a78:	1d3b      	adds	r3, r7, #4
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a86:	4413      	add	r3, r2
 8006a88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	011a      	lsls	r2, r3, #4
 8006a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a94:	4413      	add	r3, r2
 8006a96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d112      	bne.n	8006aca <USB_EPStartXfer+0x448>
 8006aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ab2:	801a      	strh	r2, [r3, #0]
 8006ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	e057      	b.n	8006b7a <USB_EPStartXfer+0x4f8>
 8006aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ace:	2b3e      	cmp	r3, #62	; 0x3e
 8006ad0:	d817      	bhi.n	8006b02 <USB_EPStartXfer+0x480>
 8006ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ad6:	085b      	lsrs	r3, r3, #1
 8006ad8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d004      	beq.n	8006af2 <USB_EPStartXfer+0x470>
 8006ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aec:	3301      	adds	r3, #1
 8006aee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	029b      	lsls	r3, r3, #10
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006afe:	801a      	strh	r2, [r3, #0]
 8006b00:	e03b      	b.n	8006b7a <USB_EPStartXfer+0x4f8>
 8006b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b06:	095b      	lsrs	r3, r3, #5
 8006b08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b10:	f003 031f 	and.w	r3, r3, #31
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d104      	bne.n	8006b22 <USB_EPStartXfer+0x4a0>
 8006b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	029b      	lsls	r3, r3, #10
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b38:	801a      	strh	r2, [r3, #0]
 8006b3a:	e01e      	b.n	8006b7a <USB_EPStartXfer+0x4f8>
 8006b3c:	463b      	mov	r3, r7
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	785b      	ldrb	r3, [r3, #1]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d119      	bne.n	8006b7a <USB_EPStartXfer+0x4f8>
 8006b46:	1d3b      	adds	r3, r7, #4
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b4c:	1d3b      	adds	r3, r7, #4
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	461a      	mov	r2, r3
 8006b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b5a:	4413      	add	r3, r2
 8006b5c:	657b      	str	r3, [r7, #84]	; 0x54
 8006b5e:	463b      	mov	r3, r7
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	011a      	lsls	r2, r3, #4
 8006b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b68:	4413      	add	r3, r2
 8006b6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b6e:	653b      	str	r3, [r7, #80]	; 0x50
 8006b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	891b      	ldrh	r3, [r3, #8]
 8006b80:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b84:	463b      	mov	r3, r7
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6959      	ldr	r1, [r3, #20]
 8006b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006b94:	1d38      	adds	r0, r7, #4
 8006b96:	6800      	ldr	r0, [r0, #0]
 8006b98:	f000 ffc1 	bl	8007b1e <USB_WritePMA>
            ep->xfer_buff += len;
 8006b9c:	463b      	mov	r3, r7
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695a      	ldr	r2, [r3, #20]
 8006ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ba6:	441a      	add	r2, r3
 8006ba8:	463b      	mov	r3, r7
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006bae:	463b      	mov	r3, r7
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6a1a      	ldr	r2, [r3, #32]
 8006bb4:	463b      	mov	r3, r7
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d909      	bls.n	8006bd2 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8006bbe:	463b      	mov	r3, r7
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6a1a      	ldr	r2, [r3, #32]
 8006bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bc8:	1ad2      	subs	r2, r2, r3
 8006bca:	463b      	mov	r3, r7
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	621a      	str	r2, [r3, #32]
 8006bd0:	e008      	b.n	8006be4 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8006bd2:	463b      	mov	r3, r7
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006bdc:	463b      	mov	r3, r7
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2200      	movs	r2, #0
 8006be2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006be4:	1d3b      	adds	r3, r7, #4
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	647b      	str	r3, [r7, #68]	; 0x44
 8006bea:	463b      	mov	r3, r7
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	785b      	ldrb	r3, [r3, #1]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d164      	bne.n	8006cbe <USB_EPStartXfer+0x63c>
 8006bf4:	1d3b      	adds	r3, r7, #4
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bfa:	1d3b      	adds	r3, r7, #4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	461a      	mov	r2, r3
 8006c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c08:	4413      	add	r3, r2
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c0c:	463b      	mov	r3, r7
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	011a      	lsls	r2, r3, #4
 8006c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c16:	4413      	add	r3, r2
 8006c18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d112      	bne.n	8006c4c <USB_EPStartXfer+0x5ca>
 8006c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c34:	801a      	strh	r2, [r3, #0]
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	801a      	strh	r2, [r3, #0]
 8006c4a:	e054      	b.n	8006cf6 <USB_EPStartXfer+0x674>
 8006c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c50:	2b3e      	cmp	r3, #62	; 0x3e
 8006c52:	d817      	bhi.n	8006c84 <USB_EPStartXfer+0x602>
 8006c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c58:	085b      	lsrs	r3, r3, #1
 8006c5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d004      	beq.n	8006c74 <USB_EPStartXfer+0x5f2>
 8006c6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c6e:	3301      	adds	r3, #1
 8006c70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	029b      	lsls	r3, r3, #10
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	801a      	strh	r2, [r3, #0]
 8006c82:	e038      	b.n	8006cf6 <USB_EPStartXfer+0x674>
 8006c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c88:	095b      	lsrs	r3, r3, #5
 8006c8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c92:	f003 031f 	and.w	r3, r3, #31
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d104      	bne.n	8006ca4 <USB_EPStartXfer+0x622>
 8006c9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ca4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	029b      	lsls	r3, r3, #10
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	801a      	strh	r2, [r3, #0]
 8006cbc:	e01b      	b.n	8006cf6 <USB_EPStartXfer+0x674>
 8006cbe:	463b      	mov	r3, r7
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	785b      	ldrb	r3, [r3, #1]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d116      	bne.n	8006cf6 <USB_EPStartXfer+0x674>
 8006cc8:	1d3b      	adds	r3, r7, #4
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cd6:	4413      	add	r3, r2
 8006cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8006cda:	463b      	mov	r3, r7
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	011a      	lsls	r2, r3, #4
 8006ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cea:	643b      	str	r3, [r7, #64]	; 0x40
 8006cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cf4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	895b      	ldrh	r3, [r3, #10]
 8006cfc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d00:	463b      	mov	r3, r7
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6959      	ldr	r1, [r3, #20]
 8006d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006d10:	1d38      	adds	r0, r7, #4
 8006d12:	6800      	ldr	r0, [r0, #0]
 8006d14:	f000 ff03 	bl	8007b1e <USB_WritePMA>
 8006d18:	e1e2      	b.n	80070e0 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006d1a:	463b      	mov	r3, r7
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006d24:	1d3b      	adds	r3, r7, #4
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	463b      	mov	r3, r7
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006d42:	1d3b      	adds	r3, r7, #4
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	463b      	mov	r3, r7
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	441a      	add	r2, r3
 8006d50:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d68:	1d3b      	adds	r3, r7, #4
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8006d6e:	1d3b      	adds	r3, r7, #4
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d7c:	4413      	add	r3, r2
 8006d7e:	663b      	str	r3, [r7, #96]	; 0x60
 8006d80:	463b      	mov	r3, r7
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	011a      	lsls	r2, r3, #4
 8006d88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d9c:	463b      	mov	r3, r7
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	891b      	ldrh	r3, [r3, #8]
 8006da2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006da6:	463b      	mov	r3, r7
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6959      	ldr	r1, [r3, #20]
 8006dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006db6:	1d38      	adds	r0, r7, #4
 8006db8:	6800      	ldr	r0, [r0, #0]
 8006dba:	f000 feb0 	bl	8007b1e <USB_WritePMA>
 8006dbe:	e18f      	b.n	80070e0 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006dc0:	1d3b      	adds	r3, r7, #4
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	463b      	mov	r3, r7
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 808f 	beq.w	8006efa <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ddc:	1d3b      	adds	r3, r7, #4
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006de2:	463b      	mov	r3, r7
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d164      	bne.n	8006eb6 <USB_EPStartXfer+0x834>
 8006dec:	1d3b      	adds	r3, r7, #4
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	673b      	str	r3, [r7, #112]	; 0x70
 8006df2:	1d3b      	adds	r3, r7, #4
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e00:	4413      	add	r3, r2
 8006e02:	673b      	str	r3, [r7, #112]	; 0x70
 8006e04:	463b      	mov	r3, r7
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	011a      	lsls	r2, r3, #4
 8006e0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e0e:	4413      	add	r3, r2
 8006e10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d112      	bne.n	8006e44 <USB_EPStartXfer+0x7c2>
 8006e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e2c:	801a      	strh	r2, [r3, #0]
 8006e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e40:	801a      	strh	r2, [r3, #0]
 8006e42:	e054      	b.n	8006eee <USB_EPStartXfer+0x86c>
 8006e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e48:	2b3e      	cmp	r3, #62	; 0x3e
 8006e4a:	d817      	bhi.n	8006e7c <USB_EPStartXfer+0x7fa>
 8006e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e50:	085b      	lsrs	r3, r3, #1
 8006e52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d004      	beq.n	8006e6c <USB_EPStartXfer+0x7ea>
 8006e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e66:	3301      	adds	r3, #1
 8006e68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	029b      	lsls	r3, r3, #10
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e78:	801a      	strh	r2, [r3, #0]
 8006e7a:	e038      	b.n	8006eee <USB_EPStartXfer+0x86c>
 8006e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e80:	095b      	lsrs	r3, r3, #5
 8006e82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d104      	bne.n	8006e9c <USB_EPStartXfer+0x81a>
 8006e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e96:	3b01      	subs	r3, #1
 8006e98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	029b      	lsls	r3, r3, #10
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb2:	801a      	strh	r2, [r3, #0]
 8006eb4:	e01b      	b.n	8006eee <USB_EPStartXfer+0x86c>
 8006eb6:	463b      	mov	r3, r7
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	785b      	ldrb	r3, [r3, #1]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d116      	bne.n	8006eee <USB_EPStartXfer+0x86c>
 8006ec0:	1d3b      	adds	r3, r7, #4
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	461a      	mov	r2, r3
 8006ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ece:	4413      	add	r3, r2
 8006ed0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ed2:	463b      	mov	r3, r7
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	011a      	lsls	r2, r3, #4
 8006eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006edc:	4413      	add	r3, r2
 8006ede:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ee2:	677b      	str	r3, [r7, #116]	; 0x74
 8006ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006eee:	463b      	mov	r3, r7
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	895b      	ldrh	r3, [r3, #10]
 8006ef4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8006ef8:	e097      	b.n	800702a <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006efa:	463b      	mov	r3, r7
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	785b      	ldrb	r3, [r3, #1]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d168      	bne.n	8006fd6 <USB_EPStartXfer+0x954>
 8006f04:	1d3b      	adds	r3, r7, #4
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f0c:	1d3b      	adds	r3, r7, #4
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	461a      	mov	r2, r3
 8006f18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f22:	463b      	mov	r3, r7
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	011a      	lsls	r2, r3, #4
 8006f2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f2e:	4413      	add	r3, r2
 8006f30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d112      	bne.n	8006f64 <USB_EPStartXfer+0x8e2>
 8006f3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f4c:	801a      	strh	r2, [r3, #0]
 8006f4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f60:	801a      	strh	r2, [r3, #0]
 8006f62:	e05d      	b.n	8007020 <USB_EPStartXfer+0x99e>
 8006f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f68:	2b3e      	cmp	r3, #62	; 0x3e
 8006f6a:	d817      	bhi.n	8006f9c <USB_EPStartXfer+0x91a>
 8006f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f70:	085b      	lsrs	r3, r3, #1
 8006f72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d004      	beq.n	8006f8c <USB_EPStartXfer+0x90a>
 8006f82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f86:	3301      	adds	r3, #1
 8006f88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	029b      	lsls	r3, r3, #10
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f98:	801a      	strh	r2, [r3, #0]
 8006f9a:	e041      	b.n	8007020 <USB_EPStartXfer+0x99e>
 8006f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fa0:	095b      	lsrs	r3, r3, #5
 8006fa2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006faa:	f003 031f 	and.w	r3, r3, #31
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d104      	bne.n	8006fbc <USB_EPStartXfer+0x93a>
 8006fb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006fbc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	029b      	lsls	r3, r3, #10
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fd2:	801a      	strh	r2, [r3, #0]
 8006fd4:	e024      	b.n	8007020 <USB_EPStartXfer+0x99e>
 8006fd6:	463b      	mov	r3, r7
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	785b      	ldrb	r3, [r3, #1]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d11f      	bne.n	8007020 <USB_EPStartXfer+0x99e>
 8006fe0:	1d3b      	adds	r3, r7, #4
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006fe8:	1d3b      	adds	r3, r7, #4
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ffe:	463b      	mov	r3, r7
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	011a      	lsls	r2, r3, #4
 8007006:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800700a:	4413      	add	r3, r2
 800700c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007018:	b29a      	uxth	r2, r3
 800701a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800701e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007020:	463b      	mov	r3, r7
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	891b      	ldrh	r3, [r3, #8]
 8007026:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800702a:	463b      	mov	r3, r7
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6959      	ldr	r1, [r3, #20]
 8007030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007034:	b29b      	uxth	r3, r3
 8007036:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800703a:	1d38      	adds	r0, r7, #4
 800703c:	6800      	ldr	r0, [r0, #0]
 800703e:	f000 fd6e 	bl	8007b1e <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007042:	463b      	mov	r3, r7
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	785b      	ldrb	r3, [r3, #1]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d122      	bne.n	8007092 <USB_EPStartXfer+0xa10>
 800704c:	1d3b      	adds	r3, r7, #4
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	463b      	mov	r3, r7
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	b29b      	uxth	r3, r3
 800705e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007066:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800706a:	1d3b      	adds	r3, r7, #4
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	463b      	mov	r3, r7
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	441a      	add	r2, r3
 8007078:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800707c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007088:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800708c:	b29b      	uxth	r3, r3
 800708e:	8013      	strh	r3, [r2, #0]
 8007090:	e026      	b.n	80070e0 <USB_EPStartXfer+0xa5e>
 8007092:	463b      	mov	r3, r7
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	785b      	ldrb	r3, [r3, #1]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d121      	bne.n	80070e0 <USB_EPStartXfer+0xa5e>
 800709c:	1d3b      	adds	r3, r7, #4
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	463b      	mov	r3, r7
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80070ba:	1d3b      	adds	r3, r7, #4
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	463b      	mov	r3, r7
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	441a      	add	r2, r3
 80070c8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80070cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070dc:	b29b      	uxth	r3, r3
 80070de:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80070e0:	1d3b      	adds	r3, r7, #4
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	463b      	mov	r3, r7
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f107 020e 	add.w	r2, r7, #14
 80070f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fe:	8013      	strh	r3, [r2, #0]
 8007100:	f107 030e 	add.w	r3, r7, #14
 8007104:	f107 020e 	add.w	r2, r7, #14
 8007108:	8812      	ldrh	r2, [r2, #0]
 800710a:	f082 0210 	eor.w	r2, r2, #16
 800710e:	801a      	strh	r2, [r3, #0]
 8007110:	f107 030e 	add.w	r3, r7, #14
 8007114:	f107 020e 	add.w	r2, r7, #14
 8007118:	8812      	ldrh	r2, [r2, #0]
 800711a:	f082 0220 	eor.w	r2, r2, #32
 800711e:	801a      	strh	r2, [r3, #0]
 8007120:	1d3b      	adds	r3, r7, #4
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	463b      	mov	r3, r7
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	441a      	add	r2, r3
 800712e:	f107 030e 	add.w	r3, r7, #14
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800713c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007144:	b29b      	uxth	r3, r3
 8007146:	8013      	strh	r3, [r2, #0]
 8007148:	e3b5      	b.n	80078b6 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800714a:	463b      	mov	r3, r7
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	7b1b      	ldrb	r3, [r3, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	f040 8090 	bne.w	8007276 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007156:	463b      	mov	r3, r7
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699a      	ldr	r2, [r3, #24]
 800715c:	463b      	mov	r3, r7
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	429a      	cmp	r2, r3
 8007164:	d90e      	bls.n	8007184 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8007166:	463b      	mov	r3, r7
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8007170:	463b      	mov	r3, r7
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800717a:	1ad2      	subs	r2, r2, r3
 800717c:	463b      	mov	r3, r7
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	619a      	str	r2, [r3, #24]
 8007182:	e008      	b.n	8007196 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8007184:	463b      	mov	r3, r7
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800718e:	463b      	mov	r3, r7
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2200      	movs	r2, #0
 8007194:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007196:	1d3b      	adds	r3, r7, #4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800719e:	1d3b      	adds	r3, r7, #4
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	461a      	mov	r2, r3
 80071aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071ae:	4413      	add	r3, r2
 80071b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071b4:	463b      	mov	r3, r7
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	011a      	lsls	r2, r3, #4
 80071bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071c0:	4413      	add	r3, r2
 80071c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d116      	bne.n	8007200 <USB_EPStartXfer+0xb7e>
 80071d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071de:	b29a      	uxth	r2, r3
 80071e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071fc:	801a      	strh	r2, [r3, #0]
 80071fe:	e32c      	b.n	800785a <USB_EPStartXfer+0x11d8>
 8007200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007204:	2b3e      	cmp	r3, #62	; 0x3e
 8007206:	d818      	bhi.n	800723a <USB_EPStartXfer+0xbb8>
 8007208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800720c:	085b      	lsrs	r3, r3, #1
 800720e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d004      	beq.n	8007228 <USB_EPStartXfer+0xba6>
 800721e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007222:	3301      	adds	r3, #1
 8007224:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007228:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800722c:	b29b      	uxth	r3, r3
 800722e:	029b      	lsls	r3, r3, #10
 8007230:	b29a      	uxth	r2, r3
 8007232:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007236:	801a      	strh	r2, [r3, #0]
 8007238:	e30f      	b.n	800785a <USB_EPStartXfer+0x11d8>
 800723a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800723e:	095b      	lsrs	r3, r3, #5
 8007240:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007248:	f003 031f 	and.w	r3, r3, #31
 800724c:	2b00      	cmp	r3, #0
 800724e:	d104      	bne.n	800725a <USB_EPStartXfer+0xbd8>
 8007250:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007254:	3b01      	subs	r3, #1
 8007256:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800725a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800725e:	b29b      	uxth	r3, r3
 8007260:	029b      	lsls	r3, r3, #10
 8007262:	b29b      	uxth	r3, r3
 8007264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726c:	b29a      	uxth	r2, r3
 800726e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007272:	801a      	strh	r2, [r3, #0]
 8007274:	e2f1      	b.n	800785a <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007276:	463b      	mov	r3, r7
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	78db      	ldrb	r3, [r3, #3]
 800727c:	2b02      	cmp	r3, #2
 800727e:	f040 818f 	bne.w	80075a0 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007282:	463b      	mov	r3, r7
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d175      	bne.n	8007378 <USB_EPStartXfer+0xcf6>
 800728c:	1d3b      	adds	r3, r7, #4
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007294:	1d3b      	adds	r3, r7, #4
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800729c:	b29b      	uxth	r3, r3
 800729e:	461a      	mov	r2, r3
 80072a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072a4:	4413      	add	r3, r2
 80072a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072aa:	463b      	mov	r3, r7
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	011a      	lsls	r2, r3, #4
 80072b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072b6:	4413      	add	r3, r2
 80072b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072c0:	463b      	mov	r3, r7
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d116      	bne.n	80072f8 <USB_EPStartXfer+0xc76>
 80072ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072f4:	801a      	strh	r2, [r3, #0]
 80072f6:	e065      	b.n	80073c4 <USB_EPStartXfer+0xd42>
 80072f8:	463b      	mov	r3, r7
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007300:	d81a      	bhi.n	8007338 <USB_EPStartXfer+0xcb6>
 8007302:	463b      	mov	r3, r7
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	085b      	lsrs	r3, r3, #1
 800730a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800730e:	463b      	mov	r3, r7
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b00      	cmp	r3, #0
 800731a:	d004      	beq.n	8007326 <USB_EPStartXfer+0xca4>
 800731c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007320:	3301      	adds	r3, #1
 8007322:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007326:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800732a:	b29b      	uxth	r3, r3
 800732c:	029b      	lsls	r3, r3, #10
 800732e:	b29a      	uxth	r2, r3
 8007330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007334:	801a      	strh	r2, [r3, #0]
 8007336:	e045      	b.n	80073c4 <USB_EPStartXfer+0xd42>
 8007338:	463b      	mov	r3, r7
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	095b      	lsrs	r3, r3, #5
 8007340:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007344:	463b      	mov	r3, r7
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f003 031f 	and.w	r3, r3, #31
 800734e:	2b00      	cmp	r3, #0
 8007350:	d104      	bne.n	800735c <USB_EPStartXfer+0xcda>
 8007352:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007356:	3b01      	subs	r3, #1
 8007358:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800735c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007360:	b29b      	uxth	r3, r3
 8007362:	029b      	lsls	r3, r3, #10
 8007364:	b29b      	uxth	r3, r3
 8007366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800736e:	b29a      	uxth	r2, r3
 8007370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007374:	801a      	strh	r2, [r3, #0]
 8007376:	e025      	b.n	80073c4 <USB_EPStartXfer+0xd42>
 8007378:	463b      	mov	r3, r7
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d120      	bne.n	80073c4 <USB_EPStartXfer+0xd42>
 8007382:	1d3b      	adds	r3, r7, #4
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800738a:	1d3b      	adds	r3, r7, #4
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007392:	b29b      	uxth	r3, r3
 8007394:	461a      	mov	r2, r3
 8007396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800739a:	4413      	add	r3, r2
 800739c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073a0:	463b      	mov	r3, r7
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	011a      	lsls	r2, r3, #4
 80073a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073ac:	4413      	add	r3, r2
 80073ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073b6:	463b      	mov	r3, r7
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	b29a      	uxth	r2, r3
 80073be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073c2:	801a      	strh	r2, [r3, #0]
 80073c4:	1d3b      	adds	r3, r7, #4
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073cc:	463b      	mov	r3, r7
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	785b      	ldrb	r3, [r3, #1]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d175      	bne.n	80074c2 <USB_EPStartXfer+0xe40>
 80073d6:	1d3b      	adds	r3, r7, #4
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073de:	1d3b      	adds	r3, r7, #4
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	461a      	mov	r2, r3
 80073ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073ee:	4413      	add	r3, r2
 80073f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073f4:	463b      	mov	r3, r7
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	011a      	lsls	r2, r3, #4
 80073fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007400:	4413      	add	r3, r2
 8007402:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007406:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800740a:	463b      	mov	r3, r7
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d116      	bne.n	8007442 <USB_EPStartXfer+0xdc0>
 8007414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	b29b      	uxth	r3, r3
 800741c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007420:	b29a      	uxth	r2, r3
 8007422:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29b      	uxth	r3, r3
 8007430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007438:	b29a      	uxth	r2, r3
 800743a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800743e:	801a      	strh	r2, [r3, #0]
 8007440:	e061      	b.n	8007506 <USB_EPStartXfer+0xe84>
 8007442:	463b      	mov	r3, r7
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	2b3e      	cmp	r3, #62	; 0x3e
 800744a:	d81a      	bhi.n	8007482 <USB_EPStartXfer+0xe00>
 800744c:	463b      	mov	r3, r7
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	085b      	lsrs	r3, r3, #1
 8007454:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007458:	463b      	mov	r3, r7
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d004      	beq.n	8007470 <USB_EPStartXfer+0xdee>
 8007466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746a:	3301      	adds	r3, #1
 800746c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007474:	b29b      	uxth	r3, r3
 8007476:	029b      	lsls	r3, r3, #10
 8007478:	b29a      	uxth	r2, r3
 800747a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800747e:	801a      	strh	r2, [r3, #0]
 8007480:	e041      	b.n	8007506 <USB_EPStartXfer+0xe84>
 8007482:	463b      	mov	r3, r7
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800748e:	463b      	mov	r3, r7
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	f003 031f 	and.w	r3, r3, #31
 8007498:	2b00      	cmp	r3, #0
 800749a:	d104      	bne.n	80074a6 <USB_EPStartXfer+0xe24>
 800749c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a0:	3b01      	subs	r3, #1
 80074a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	029b      	lsls	r3, r3, #10
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074be:	801a      	strh	r2, [r3, #0]
 80074c0:	e021      	b.n	8007506 <USB_EPStartXfer+0xe84>
 80074c2:	463b      	mov	r3, r7
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	785b      	ldrb	r3, [r3, #1]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d11c      	bne.n	8007506 <USB_EPStartXfer+0xe84>
 80074cc:	1d3b      	adds	r3, r7, #4
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	461a      	mov	r2, r3
 80074d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074dc:	4413      	add	r3, r2
 80074de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80074e2:	463b      	mov	r3, r7
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	011a      	lsls	r2, r3, #4
 80074ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074ee:	4413      	add	r3, r2
 80074f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80074f8:	463b      	mov	r3, r7
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	b29a      	uxth	r2, r3
 8007500:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007504:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007506:	463b      	mov	r3, r7
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 81a4 	beq.w	800785a <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007512:	1d3b      	adds	r3, r7, #4
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	463b      	mov	r3, r7
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007526:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800752a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d005      	beq.n	800753e <USB_EPStartXfer+0xebc>
 8007532:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10d      	bne.n	800755a <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800753e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007546:	2b00      	cmp	r3, #0
 8007548:	f040 8187 	bne.w	800785a <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800754c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007554:	2b00      	cmp	r3, #0
 8007556:	f040 8180 	bne.w	800785a <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800755a:	1d3b      	adds	r3, r7, #4
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	463b      	mov	r3, r7
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29b      	uxth	r3, r3
 800756c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007574:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007578:	1d3b      	adds	r3, r7, #4
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	463b      	mov	r3, r7
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	441a      	add	r2, r3
 8007586:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800758a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800758e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007596:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800759a:	b29b      	uxth	r3, r3
 800759c:	8013      	strh	r3, [r2, #0]
 800759e:	e15c      	b.n	800785a <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80075a0:	463b      	mov	r3, r7
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	78db      	ldrb	r3, [r3, #3]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	f040 8155 	bne.w	8007856 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80075ac:	463b      	mov	r3, r7
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	463b      	mov	r3, r7
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d90e      	bls.n	80075da <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80075bc:	463b      	mov	r3, r7
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80075c6:	463b      	mov	r3, r7
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	699a      	ldr	r2, [r3, #24]
 80075cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075d0:	1ad2      	subs	r2, r2, r3
 80075d2:	463b      	mov	r3, r7
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	619a      	str	r2, [r3, #24]
 80075d8:	e008      	b.n	80075ec <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80075da:	463b      	mov	r3, r7
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80075e4:	463b      	mov	r3, r7
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2200      	movs	r2, #0
 80075ea:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80075ec:	463b      	mov	r3, r7
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d16f      	bne.n	80076d6 <USB_EPStartXfer+0x1054>
 80075f6:	1d3b      	adds	r3, r7, #4
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075fe:	1d3b      	adds	r3, r7, #4
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007606:	b29b      	uxth	r3, r3
 8007608:	461a      	mov	r2, r3
 800760a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800760e:	4413      	add	r3, r2
 8007610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007614:	463b      	mov	r3, r7
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	011a      	lsls	r2, r3, #4
 800761c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007620:	4413      	add	r3, r2
 8007622:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007626:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800762a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800762e:	2b00      	cmp	r3, #0
 8007630:	d116      	bne.n	8007660 <USB_EPStartXfer+0xfde>
 8007632:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	b29b      	uxth	r3, r3
 800763a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800763e:	b29a      	uxth	r2, r3
 8007640:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007644:	801a      	strh	r2, [r3, #0]
 8007646:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	b29b      	uxth	r3, r3
 800764e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007656:	b29a      	uxth	r2, r3
 8007658:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800765c:	801a      	strh	r2, [r3, #0]
 800765e:	e05f      	b.n	8007720 <USB_EPStartXfer+0x109e>
 8007660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007664:	2b3e      	cmp	r3, #62	; 0x3e
 8007666:	d818      	bhi.n	800769a <USB_EPStartXfer+0x1018>
 8007668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800766c:	085b      	lsrs	r3, r3, #1
 800766e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d004      	beq.n	8007688 <USB_EPStartXfer+0x1006>
 800767e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007682:	3301      	adds	r3, #1
 8007684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800768c:	b29b      	uxth	r3, r3
 800768e:	029b      	lsls	r3, r3, #10
 8007690:	b29a      	uxth	r2, r3
 8007692:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007696:	801a      	strh	r2, [r3, #0]
 8007698:	e042      	b.n	8007720 <USB_EPStartXfer+0x109e>
 800769a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800769e:	095b      	lsrs	r3, r3, #5
 80076a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076a8:	f003 031f 	and.w	r3, r3, #31
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d104      	bne.n	80076ba <USB_EPStartXfer+0x1038>
 80076b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b4:	3b01      	subs	r3, #1
 80076b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076be:	b29b      	uxth	r3, r3
 80076c0:	029b      	lsls	r3, r3, #10
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80076d2:	801a      	strh	r2, [r3, #0]
 80076d4:	e024      	b.n	8007720 <USB_EPStartXfer+0x109e>
 80076d6:	463b      	mov	r3, r7
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d11f      	bne.n	8007720 <USB_EPStartXfer+0x109e>
 80076e0:	1d3b      	adds	r3, r7, #4
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076e8:	1d3b      	adds	r3, r7, #4
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	461a      	mov	r2, r3
 80076f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076f8:	4413      	add	r3, r2
 80076fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076fe:	463b      	mov	r3, r7
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	011a      	lsls	r2, r3, #4
 8007706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800770a:	4413      	add	r3, r2
 800770c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007710:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007718:	b29a      	uxth	r2, r3
 800771a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800771e:	801a      	strh	r2, [r3, #0]
 8007720:	1d3b      	adds	r3, r7, #4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007728:	463b      	mov	r3, r7
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d16f      	bne.n	8007812 <USB_EPStartXfer+0x1190>
 8007732:	1d3b      	adds	r3, r7, #4
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800773a:	1d3b      	adds	r3, r7, #4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007742:	b29b      	uxth	r3, r3
 8007744:	461a      	mov	r2, r3
 8007746:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800774a:	4413      	add	r3, r2
 800774c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007750:	463b      	mov	r3, r7
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	011a      	lsls	r2, r3, #4
 8007758:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800775c:	4413      	add	r3, r2
 800775e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007762:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d116      	bne.n	800779c <USB_EPStartXfer+0x111a>
 800776e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	b29b      	uxth	r3, r3
 8007776:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800777a:	b29a      	uxth	r2, r3
 800777c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007780:	801a      	strh	r2, [r3, #0]
 8007782:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800778e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007792:	b29a      	uxth	r2, r3
 8007794:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007798:	801a      	strh	r2, [r3, #0]
 800779a:	e05e      	b.n	800785a <USB_EPStartXfer+0x11d8>
 800779c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077a0:	2b3e      	cmp	r3, #62	; 0x3e
 80077a2:	d818      	bhi.n	80077d6 <USB_EPStartXfer+0x1154>
 80077a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077a8:	085b      	lsrs	r3, r3, #1
 80077aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d004      	beq.n	80077c4 <USB_EPStartXfer+0x1142>
 80077ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077be:	3301      	adds	r3, #1
 80077c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	029b      	lsls	r3, r3, #10
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077d2:	801a      	strh	r2, [r3, #0]
 80077d4:	e041      	b.n	800785a <USB_EPStartXfer+0x11d8>
 80077d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077da:	095b      	lsrs	r3, r3, #5
 80077dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077e4:	f003 031f 	and.w	r3, r3, #31
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d104      	bne.n	80077f6 <USB_EPStartXfer+0x1174>
 80077ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077f0:	3b01      	subs	r3, #1
 80077f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	029b      	lsls	r3, r3, #10
 80077fe:	b29b      	uxth	r3, r3
 8007800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007808:	b29a      	uxth	r2, r3
 800780a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800780e:	801a      	strh	r2, [r3, #0]
 8007810:	e023      	b.n	800785a <USB_EPStartXfer+0x11d8>
 8007812:	463b      	mov	r3, r7
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	785b      	ldrb	r3, [r3, #1]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d11e      	bne.n	800785a <USB_EPStartXfer+0x11d8>
 800781c:	1d3b      	adds	r3, r7, #4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007824:	b29b      	uxth	r3, r3
 8007826:	461a      	mov	r2, r3
 8007828:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800782c:	4413      	add	r3, r2
 800782e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007832:	463b      	mov	r3, r7
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	011a      	lsls	r2, r3, #4
 800783a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800783e:	4413      	add	r3, r2
 8007840:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007844:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800784c:	b29a      	uxth	r2, r3
 800784e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007852:	801a      	strh	r2, [r3, #0]
 8007854:	e001      	b.n	800785a <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e02e      	b.n	80078b8 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800785a:	1d3b      	adds	r3, r7, #4
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	463b      	mov	r3, r7
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007874:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007878:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800787c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007880:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007884:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007888:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800788c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007890:	1d3b      	adds	r3, r7, #4
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	463b      	mov	r3, r7
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	441a      	add	r2, r3
 800789e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80078a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b085      	sub	sp, #20
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	785b      	ldrb	r3, [r3, #1]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d020      	beq.n	8007916 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4413      	add	r3, r2
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ea:	81bb      	strh	r3, [r7, #12]
 80078ec:	89bb      	ldrh	r3, [r7, #12]
 80078ee:	f083 0310 	eor.w	r3, r3, #16
 80078f2:	81bb      	strh	r3, [r7, #12]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	441a      	add	r2, r3
 80078fe:	89bb      	ldrh	r3, [r7, #12]
 8007900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800790c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007910:	b29b      	uxth	r3, r3
 8007912:	8013      	strh	r3, [r2, #0]
 8007914:	e01f      	b.n	8007956 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800792c:	81fb      	strh	r3, [r7, #14]
 800792e:	89fb      	ldrh	r3, [r7, #14]
 8007930:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007934:	81fb      	strh	r3, [r7, #14]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	441a      	add	r2, r3
 8007940:	89fb      	ldrh	r3, [r7, #14]
 8007942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800794a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800794e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007952:	b29b      	uxth	r3, r3
 8007954:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	7b1b      	ldrb	r3, [r3, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	f040 809d 	bne.w	8007ab2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	785b      	ldrb	r3, [r3, #1]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d04c      	beq.n	8007a1a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	823b      	strh	r3, [r7, #16]
 800798e:	8a3b      	ldrh	r3, [r7, #16]
 8007990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01b      	beq.n	80079d0 <USB_EPClearStall+0x6c>
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ae:	81fb      	strh	r3, [r7, #14]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	441a      	add	r2, r3
 80079ba:	89fb      	ldrh	r3, [r7, #14]
 80079bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	78db      	ldrb	r3, [r3, #3]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d06c      	beq.n	8007ab2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ee:	81bb      	strh	r3, [r7, #12]
 80079f0:	89bb      	ldrh	r3, [r7, #12]
 80079f2:	f083 0320 	eor.w	r3, r3, #32
 80079f6:	81bb      	strh	r3, [r7, #12]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	441a      	add	r2, r3
 8007a02:	89bb      	ldrh	r3, [r7, #12]
 8007a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	8013      	strh	r3, [r2, #0]
 8007a18:	e04b      	b.n	8007ab2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	82fb      	strh	r3, [r7, #22]
 8007a28:	8afb      	ldrh	r3, [r7, #22]
 8007a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d01b      	beq.n	8007a6a <USB_EPClearStall+0x106>
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a48:	82bb      	strh	r3, [r7, #20]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	441a      	add	r2, r3
 8007a54:	8abb      	ldrh	r3, [r7, #20]
 8007a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a80:	827b      	strh	r3, [r7, #18]
 8007a82:	8a7b      	ldrh	r3, [r7, #18]
 8007a84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a88:	827b      	strh	r3, [r7, #18]
 8007a8a:	8a7b      	ldrh	r3, [r7, #18]
 8007a8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a90:	827b      	strh	r3, [r7, #18]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	441a      	add	r2, r3
 8007a9c:	8a7b      	ldrh	r3, [r7, #18]
 8007a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	371c      	adds	r7, #28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d103      	bne.n	8007ada <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2280      	movs	r2, #128	; 0x80
 8007ad6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b085      	sub	sp, #20
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007b10:	68fb      	ldr	r3, [r7, #12]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b08d      	sub	sp, #52	; 0x34
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	60b9      	str	r1, [r7, #8]
 8007b28:	4611      	mov	r1, r2
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	80fb      	strh	r3, [r7, #6]
 8007b30:	4613      	mov	r3, r2
 8007b32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b34:	88bb      	ldrh	r3, [r7, #4]
 8007b36:	3301      	adds	r3, #1
 8007b38:	085b      	lsrs	r3, r3, #1
 8007b3a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b44:	88fb      	ldrh	r3, [r7, #6]
 8007b46:	005a      	lsls	r2, r3, #1
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b50:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b56:	e01e      	b.n	8007b96 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	3301      	adds	r3, #1
 8007b62:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	021b      	lsls	r3, r3, #8
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	461a      	mov	r2, r3
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	3302      	adds	r3, #2
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	3302      	adds	r3, #2
 8007b88:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b92:	3b01      	subs	r3, #1
 8007b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1dd      	bne.n	8007b58 <USB_WritePMA+0x3a>
  }
}
 8007b9c:	bf00      	nop
 8007b9e:	3734      	adds	r7, #52	; 0x34
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b08b      	sub	sp, #44	; 0x2c
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	80fb      	strh	r3, [r7, #6]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007bbe:	88bb      	ldrh	r3, [r7, #4]
 8007bc0:	085b      	lsrs	r3, r3, #1
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007bce:	88fb      	ldrh	r3, [r7, #6]
 8007bd0:	005a      	lsls	r2, r3, #1
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bda:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24
 8007be0:	e01b      	b.n	8007c1a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	3302      	adds	r3, #2
 8007bee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	0a1b      	lsrs	r3, r3, #8
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	3302      	adds	r3, #2
 8007c12:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	3b01      	subs	r3, #1
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e0      	bne.n	8007be2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007c20:	88bb      	ldrh	r3, [r7, #4]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d007      	beq.n	8007c3c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	881b      	ldrh	r3, [r3, #0]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	701a      	strb	r2, [r3, #0]
  }
}
 8007c3c:	bf00      	nop
 8007c3e:	372c      	adds	r7, #44	; 0x2c
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	7c1b      	ldrb	r3, [r3, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d115      	bne.n	8007c8c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c64:	2202      	movs	r2, #2
 8007c66:	2181      	movs	r1, #129	; 0x81
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 fea6 	bl	80099ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c78:	2202      	movs	r2, #2
 8007c7a:	2101      	movs	r1, #1
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f001 fe9c 	bl	80099ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007c8a:	e012      	b.n	8007cb2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c8c:	2340      	movs	r3, #64	; 0x40
 8007c8e:	2202      	movs	r2, #2
 8007c90:	2181      	movs	r1, #129	; 0x81
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f001 fe91 	bl	80099ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c9e:	2340      	movs	r3, #64	; 0x40
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 fe88 	bl	80099ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cb2:	2308      	movs	r3, #8
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	2182      	movs	r1, #130	; 0x82
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 fe7e 	bl	80099ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007cc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007cc8:	f001 ffa0 	bl	8009c0c <USBD_static_malloc>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d102      	bne.n	8007ce4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	73fb      	strb	r3, [r7, #15]
 8007ce2:	e026      	b.n	8007d32 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cea:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	7c1b      	ldrb	r3, [r3, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d18:	2101      	movs	r1, #1
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 ff3f 	bl	8009b9e <USBD_LL_PrepareReceive>
 8007d20:	e007      	b.n	8007d32 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d28:	2340      	movs	r3, #64	; 0x40
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 ff36 	bl	8009b9e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d4c:	2181      	movs	r1, #129	; 0x81
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f001 fe59 	bl	8009a06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 fe52 	bl	8009a06 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d6a:	2182      	movs	r1, #130	; 0x82
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f001 fe4a 	bl	8009a06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00e      	beq.n	8007da0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d92:	4618      	mov	r0, r3
 8007d94:	f001 ff48 	bl	8009c28 <USBD_static_free>
    pdev->pClassData = NULL;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b086      	sub	sp, #24
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dba:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d039      	beq.n	8007e48 <USBD_CDC_Setup+0x9e>
 8007dd4:	2b20      	cmp	r3, #32
 8007dd6:	d17c      	bne.n	8007ed2 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	88db      	ldrh	r3, [r3, #6]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d029      	beq.n	8007e34 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	b25b      	sxtb	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	da11      	bge.n	8007e0e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007df6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	88d2      	ldrh	r2, [r2, #6]
 8007dfc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007dfe:	6939      	ldr	r1, [r7, #16]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	88db      	ldrh	r3, [r3, #6]
 8007e04:	461a      	mov	r2, r3
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fa04 	bl	8009214 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007e0c:	e068      	b.n	8007ee0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	785a      	ldrb	r2, [r3, #1]
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	88db      	ldrh	r3, [r3, #6]
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e24:	6939      	ldr	r1, [r7, #16]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	88db      	ldrh	r3, [r3, #6]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 fa1f 	bl	8009270 <USBD_CtlPrepareRx>
      break;
 8007e32:	e055      	b.n	8007ee0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	7850      	ldrb	r0, [r2, #1]
 8007e40:	2200      	movs	r2, #0
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	4798      	blx	r3
      break;
 8007e46:	e04b      	b.n	8007ee0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	785b      	ldrb	r3, [r3, #1]
 8007e4c:	2b0a      	cmp	r3, #10
 8007e4e:	d017      	beq.n	8007e80 <USBD_CDC_Setup+0xd6>
 8007e50:	2b0b      	cmp	r3, #11
 8007e52:	d029      	beq.n	8007ea8 <USBD_CDC_Setup+0xfe>
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d133      	bne.n	8007ec0 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d107      	bne.n	8007e72 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007e62:	f107 030c 	add.w	r3, r7, #12
 8007e66:	2202      	movs	r2, #2
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f001 f9d2 	bl	8009214 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e70:	e02e      	b.n	8007ed0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 f962 	bl	800913e <USBD_CtlError>
            ret = USBD_FAIL;
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e7e:	e027      	b.n	8007ed0 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d107      	bne.n	8007e9a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e8a:	f107 030f 	add.w	r3, r7, #15
 8007e8e:	2201      	movs	r2, #1
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 f9be 	bl	8009214 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e98:	e01a      	b.n	8007ed0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f001 f94e 	bl	800913e <USBD_CtlError>
            ret = USBD_FAIL;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ea6:	e013      	b.n	8007ed0 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d00d      	beq.n	8007ece <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 f942 	bl	800913e <USBD_CtlError>
            ret = USBD_FAIL;
 8007eba:	2302      	movs	r3, #2
 8007ebc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ebe:	e006      	b.n	8007ece <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f001 f93b 	bl	800913e <USBD_CtlError>
          ret = USBD_FAIL;
 8007ec8:	2302      	movs	r3, #2
 8007eca:	75fb      	strb	r3, [r7, #23]
          break;
 8007ecc:	e000      	b.n	8007ed0 <USBD_CDC_Setup+0x126>
          break;
 8007ece:	bf00      	nop
      }
      break;
 8007ed0:	e006      	b.n	8007ee0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 f932 	bl	800913e <USBD_CtlError>
      ret = USBD_FAIL;
 8007eda:	2302      	movs	r3, #2
 8007edc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ede:	bf00      	nop
  }

  return ret;
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f04:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d03a      	beq.n	8007f86 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f10:	78fa      	ldrb	r2, [r7, #3]
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	331c      	adds	r3, #28
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d029      	beq.n	8007f7a <USBD_CDC_DataIn+0x90>
 8007f26:	78fa      	ldrb	r2, [r7, #3]
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	440b      	add	r3, r1
 8007f34:	331c      	adds	r3, #28
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	78f9      	ldrb	r1, [r7, #3]
 8007f3a:	68b8      	ldr	r0, [r7, #8]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	440b      	add	r3, r1
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	4403      	add	r3, r0
 8007f46:	3338      	adds	r3, #56	; 0x38
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f4e:	fb03 f301 	mul.w	r3, r3, r1
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d110      	bne.n	8007f7a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007f58:	78fa      	ldrb	r2, [r7, #3]
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	440b      	add	r3, r1
 8007f66:	331c      	adds	r3, #28
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f6c:	78f9      	ldrb	r1, [r7, #3]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2200      	movs	r2, #0
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f001 fdf0 	bl	8009b58 <USBD_LL_Transmit>
 8007f78:	e003      	b.n	8007f82 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	e000      	b.n	8007f88 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007f86:	2302      	movs	r3, #2
  }
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 fe1b 	bl	8009be4 <USBD_LL_GetRxDataSize>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00d      	beq.n	8007fdc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	4798      	blx	r3

    return USBD_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e000      	b.n	8007fde <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007fdc:	2302      	movs	r3, #2
  }
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d015      	beq.n	800802c <USBD_CDC_EP0_RxReady+0x46>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008006:	2bff      	cmp	r3, #255	; 0xff
 8008008:	d010      	beq.n	800802c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008018:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008020:	b292      	uxth	r2, r2
 8008022:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	22ff      	movs	r2, #255	; 0xff
 8008028:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2243      	movs	r2, #67	; 0x43
 8008044:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008046:	4b03      	ldr	r3, [pc, #12]	; (8008054 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	20000094 	.word	0x20000094

08008058 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2243      	movs	r2, #67	; 0x43
 8008064:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008066:	4b03      	ldr	r3, [pc, #12]	; (8008074 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	20000050 	.word	0x20000050

08008078 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2243      	movs	r2, #67	; 0x43
 8008084:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008086:	4b03      	ldr	r3, [pc, #12]	; (8008094 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008088:	4618      	mov	r0, r3
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	200000d8 	.word	0x200000d8

08008098 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	220a      	movs	r2, #10
 80080a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80080a6:	4b03      	ldr	r3, [pc, #12]	; (80080b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	2000000c 	.word	0x2000000c

080080b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80080c2:	2302      	movs	r3, #2
 80080c4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d005      	beq.n	80080d8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b087      	sub	sp, #28
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	60f8      	str	r0, [r7, #12]
 80080ee:	60b9      	str	r1, [r7, #8]
 80080f0:	4613      	mov	r3, r2
 80080f2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fa:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008104:	88fa      	ldrh	r2, [r7, #6]
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	371c      	adds	r7, #28
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800811a:	b480      	push	{r7}
 800811c:	b085      	sub	sp, #20
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008150:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01c      	beq.n	8008196 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008162:	2b00      	cmp	r3, #0
 8008164:	d115      	bne.n	8008192 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2201      	movs	r2, #1
 800816a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008184:	b29b      	uxth	r3, r3
 8008186:	2181      	movs	r1, #129	; 0x81
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 fce5 	bl	8009b58 <USBD_LL_Transmit>

      return USBD_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	e002      	b.n	8008198 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008192:	2301      	movs	r3, #1
 8008194:	e000      	b.n	8008198 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008196:	2302      	movs	r3, #2
  }
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d017      	beq.n	80081ea <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	7c1b      	ldrb	r3, [r3, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d109      	bne.n	80081d6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081cc:	2101      	movs	r1, #1
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f001 fce5 	bl	8009b9e <USBD_LL_PrepareReceive>
 80081d4:	e007      	b.n	80081e6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081dc:	2340      	movs	r3, #64	; 0x40
 80081de:	2101      	movs	r1, #1
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 fcdc 	bl	8009b9e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	e000      	b.n	80081ec <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80081ea:	2302      	movs	r3, #2
  }
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	4613      	mov	r3, r2
 8008200:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008208:	2302      	movs	r3, #2
 800820a:	e01a      	b.n	8008242 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d003      	beq.n	800822c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	79fa      	ldrb	r2, [r7, #7]
 8008238:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f001 fb48 	bl	80098d0 <USBD_LL_Init>

  return USBD_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800824a:	b480      	push	{r7}
 800824c:	b085      	sub	sp, #20
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d006      	beq.n	800826c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	73fb      	strb	r3, [r7, #15]
 800826a:	e001      	b.n	8008270 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800826c:	2302      	movs	r3, #2
 800826e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 fb7c 	bl	8009984 <USBD_LL_Start>

  return USBD_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082b8:	2302      	movs	r3, #2
 80082ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00c      	beq.n	80082e0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	78fa      	ldrb	r2, [r7, #3]
 80082d0:	4611      	mov	r1, r2
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	4798      	blx	r3
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	460b      	mov	r3, r1
 80082f4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	78fa      	ldrb	r2, [r7, #3]
 8008300:	4611      	mov	r1, r2
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	4798      	blx	r3

  return USBD_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	4618      	mov	r0, r3
 8008324:	f000 fece 	bl	80090c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008336:	461a      	mov	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008344:	f003 031f 	and.w	r3, r3, #31
 8008348:	2b01      	cmp	r3, #1
 800834a:	d00c      	beq.n	8008366 <USBD_LL_SetupStage+0x56>
 800834c:	2b01      	cmp	r3, #1
 800834e:	d302      	bcc.n	8008356 <USBD_LL_SetupStage+0x46>
 8008350:	2b02      	cmp	r3, #2
 8008352:	d010      	beq.n	8008376 <USBD_LL_SetupStage+0x66>
 8008354:	e017      	b.n	8008386 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f9ce 	bl	8008700 <USBD_StdDevReq>
      break;
 8008364:	e01a      	b.n	800839c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800836c:	4619      	mov	r1, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fa30 	bl	80087d4 <USBD_StdItfReq>
      break;
 8008374:	e012      	b.n	800839c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fa6e 	bl	8008860 <USBD_StdEPReq>
      break;
 8008384:	e00a      	b.n	800839c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800838c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008390:	b2db      	uxtb	r3, r3
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 fb55 	bl	8009a44 <USBD_LL_StallEP>
      break;
 800839a:	bf00      	nop
  }

  return USBD_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b086      	sub	sp, #24
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	60f8      	str	r0, [r7, #12]
 80083ae:	460b      	mov	r3, r1
 80083b0:	607a      	str	r2, [r7, #4]
 80083b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80083b4:	7afb      	ldrb	r3, [r7, #11]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d14b      	bne.n	8008452 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d134      	bne.n	8008436 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	68da      	ldr	r2, [r3, #12]
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d919      	bls.n	800840c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	68da      	ldr	r2, [r3, #12]
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	1ad2      	subs	r2, r2, r3
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d203      	bcs.n	80083fa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	e002      	b.n	8008400 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80083fe:	b29b      	uxth	r3, r3
 8008400:	461a      	mov	r2, r3
 8008402:	6879      	ldr	r1, [r7, #4]
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f000 ff51 	bl	80092ac <USBD_CtlContinueRx>
 800840a:	e038      	b.n	800847e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00a      	beq.n	800842e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800841e:	2b03      	cmp	r3, #3
 8008420:	d105      	bne.n	800842e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f000 ff4e 	bl	80092d0 <USBD_CtlSendStatus>
 8008434:	e023      	b.n	800847e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800843c:	2b05      	cmp	r3, #5
 800843e:	d11e      	bne.n	800847e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008448:	2100      	movs	r1, #0
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f001 fafa 	bl	8009a44 <USBD_LL_StallEP>
 8008450:	e015      	b.n	800847e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00d      	beq.n	800847a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008464:	2b03      	cmp	r3, #3
 8008466:	d108      	bne.n	800847a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	7afa      	ldrb	r2, [r7, #11]
 8008472:	4611      	mov	r1, r2
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	4798      	blx	r3
 8008478:	e001      	b.n	800847e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800847a:	2302      	movs	r3, #2
 800847c:	e000      	b.n	8008480 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	460b      	mov	r3, r1
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008496:	7afb      	ldrb	r3, [r7, #11]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d17f      	bne.n	800859c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3314      	adds	r3, #20
 80084a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d15c      	bne.n	8008566 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d915      	bls.n	80084e4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	68da      	ldr	r2, [r3, #12]
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	1ad2      	subs	r2, r2, r3
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	461a      	mov	r2, r3
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 febb 	bl	800924c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084d6:	2300      	movs	r3, #0
 80084d8:	2200      	movs	r2, #0
 80084da:	2100      	movs	r1, #0
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f001 fb5e 	bl	8009b9e <USBD_LL_PrepareReceive>
 80084e2:	e04e      	b.n	8008582 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	6912      	ldr	r2, [r2, #16]
 80084ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80084f0:	fb02 f201 	mul.w	r2, r2, r1
 80084f4:	1a9b      	subs	r3, r3, r2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d11c      	bne.n	8008534 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008502:	429a      	cmp	r2, r3
 8008504:	d316      	bcc.n	8008534 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	689a      	ldr	r2, [r3, #8]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008510:	429a      	cmp	r2, r3
 8008512:	d20f      	bcs.n	8008534 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008514:	2200      	movs	r2, #0
 8008516:	2100      	movs	r1, #0
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 fe97 	bl	800924c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008526:	2300      	movs	r3, #0
 8008528:	2200      	movs	r2, #0
 800852a:	2100      	movs	r1, #0
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f001 fb36 	bl	8009b9e <USBD_LL_PrepareReceive>
 8008532:	e026      	b.n	8008582 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00a      	beq.n	8008556 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008546:	2b03      	cmp	r3, #3
 8008548:	d105      	bne.n	8008556 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008556:	2180      	movs	r1, #128	; 0x80
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f001 fa73 	bl	8009a44 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 fec9 	bl	80092f6 <USBD_CtlReceiveStatus>
 8008564:	e00d      	b.n	8008582 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800856c:	2b04      	cmp	r3, #4
 800856e:	d004      	beq.n	800857a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008576:	2b00      	cmp	r3, #0
 8008578:	d103      	bne.n	8008582 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800857a:	2180      	movs	r1, #128	; 0x80
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f001 fa61 	bl	8009a44 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008588:	2b01      	cmp	r3, #1
 800858a:	d11d      	bne.n	80085c8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f7ff fe82 	bl	8008296 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800859a:	e015      	b.n	80085c8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00d      	beq.n	80085c4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d108      	bne.n	80085c4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	7afa      	ldrb	r2, [r7, #11]
 80085bc:	4611      	mov	r1, r2
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	4798      	blx	r3
 80085c2:	e001      	b.n	80085c8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085c4:	2302      	movs	r3, #2
 80085c6:	e000      	b.n	80085ca <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085da:	2340      	movs	r3, #64	; 0x40
 80085dc:	2200      	movs	r2, #0
 80085de:	2100      	movs	r1, #0
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 f9ea 	bl	80099ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2240      	movs	r2, #64	; 0x40
 80085f2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085f6:	2340      	movs	r3, #64	; 0x40
 80085f8:	2200      	movs	r2, #0
 80085fa:	2180      	movs	r1, #128	; 0x80
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f001 f9dc 	bl	80099ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2240      	movs	r2, #64	; 0x40
 800860c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008632:	2b00      	cmp	r3, #0
 8008634:	d009      	beq.n	800864a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6852      	ldr	r2, [r2, #4]
 8008642:	b2d2      	uxtb	r2, r2
 8008644:	4611      	mov	r1, r2
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	4798      	blx	r3
  }

  return USBD_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	460b      	mov	r3, r1
 800865e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	78fa      	ldrb	r2, [r7, #3]
 8008664:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2204      	movs	r2, #4
 800868c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ac:	2b04      	cmp	r3, #4
 80086ae:	d105      	bne.n	80086bc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b082      	sub	sp, #8
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d10b      	bne.n	80086f4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d005      	beq.n	80086f4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
	...

08008700 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008716:	2b20      	cmp	r3, #32
 8008718:	d004      	beq.n	8008724 <USBD_StdDevReq+0x24>
 800871a:	2b40      	cmp	r3, #64	; 0x40
 800871c:	d002      	beq.n	8008724 <USBD_StdDevReq+0x24>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d008      	beq.n	8008734 <USBD_StdDevReq+0x34>
 8008722:	e04c      	b.n	80087be <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	4798      	blx	r3
      break;
 8008732:	e049      	b.n	80087c8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	785b      	ldrb	r3, [r3, #1]
 8008738:	2b09      	cmp	r3, #9
 800873a:	d83a      	bhi.n	80087b2 <USBD_StdDevReq+0xb2>
 800873c:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <USBD_StdDevReq+0x44>)
 800873e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008742:	bf00      	nop
 8008744:	08008795 	.word	0x08008795
 8008748:	080087a9 	.word	0x080087a9
 800874c:	080087b3 	.word	0x080087b3
 8008750:	0800879f 	.word	0x0800879f
 8008754:	080087b3 	.word	0x080087b3
 8008758:	08008777 	.word	0x08008777
 800875c:	0800876d 	.word	0x0800876d
 8008760:	080087b3 	.word	0x080087b3
 8008764:	0800878b 	.word	0x0800878b
 8008768:	08008781 	.word	0x08008781
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f9d4 	bl	8008b1c <USBD_GetDescriptor>
          break;
 8008774:	e022      	b.n	80087bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fb37 	bl	8008dec <USBD_SetAddress>
          break;
 800877e:	e01d      	b.n	80087bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fb74 	bl	8008e70 <USBD_SetConfig>
          break;
 8008788:	e018      	b.n	80087bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fbfd 	bl	8008f8c <USBD_GetConfig>
          break;
 8008792:	e013      	b.n	80087bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fc2c 	bl	8008ff4 <USBD_GetStatus>
          break;
 800879c:	e00e      	b.n	80087bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fc5a 	bl	800905a <USBD_SetFeature>
          break;
 80087a6:	e009      	b.n	80087bc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fc69 	bl	8009082 <USBD_ClrFeature>
          break;
 80087b0:	e004      	b.n	80087bc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fcc2 	bl	800913e <USBD_CtlError>
          break;
 80087ba:	bf00      	nop
      }
      break;
 80087bc:	e004      	b.n	80087c8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fcbc 	bl	800913e <USBD_CtlError>
      break;
 80087c6:	bf00      	nop
  }

  return ret;
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop

080087d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ea:	2b20      	cmp	r3, #32
 80087ec:	d003      	beq.n	80087f6 <USBD_StdItfReq+0x22>
 80087ee:	2b40      	cmp	r3, #64	; 0x40
 80087f0:	d001      	beq.n	80087f6 <USBD_StdItfReq+0x22>
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d12a      	bne.n	800884c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087fc:	3b01      	subs	r3, #1
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d81d      	bhi.n	800883e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	889b      	ldrh	r3, [r3, #4]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b01      	cmp	r3, #1
 800880a:	d813      	bhi.n	8008834 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	4798      	blx	r3
 800881a:	4603      	mov	r3, r0
 800881c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	88db      	ldrh	r3, [r3, #6]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d110      	bne.n	8008848 <USBD_StdItfReq+0x74>
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10d      	bne.n	8008848 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fd4f 	bl	80092d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008832:	e009      	b.n	8008848 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fc81 	bl	800913e <USBD_CtlError>
          break;
 800883c:	e004      	b.n	8008848 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fc7c 	bl	800913e <USBD_CtlError>
          break;
 8008846:	e000      	b.n	800884a <USBD_StdItfReq+0x76>
          break;
 8008848:	bf00      	nop
      }
      break;
 800884a:	e004      	b.n	8008856 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fc75 	bl	800913e <USBD_CtlError>
      break;
 8008854:	bf00      	nop
  }

  return USBD_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	889b      	ldrh	r3, [r3, #4]
 8008872:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800887c:	2b20      	cmp	r3, #32
 800887e:	d004      	beq.n	800888a <USBD_StdEPReq+0x2a>
 8008880:	2b40      	cmp	r3, #64	; 0x40
 8008882:	d002      	beq.n	800888a <USBD_StdEPReq+0x2a>
 8008884:	2b00      	cmp	r3, #0
 8008886:	d008      	beq.n	800889a <USBD_StdEPReq+0x3a>
 8008888:	e13d      	b.n	8008b06 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	4798      	blx	r3
      break;
 8008898:	e13a      	b.n	8008b10 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088a2:	2b20      	cmp	r3, #32
 80088a4:	d10a      	bne.n	80088bc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	4798      	blx	r3
 80088b4:	4603      	mov	r3, r0
 80088b6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	e12a      	b.n	8008b12 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	785b      	ldrb	r3, [r3, #1]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d03e      	beq.n	8008942 <USBD_StdEPReq+0xe2>
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	d002      	beq.n	80088ce <USBD_StdEPReq+0x6e>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d070      	beq.n	80089ae <USBD_StdEPReq+0x14e>
 80088cc:	e115      	b.n	8008afa <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d002      	beq.n	80088de <USBD_StdEPReq+0x7e>
 80088d8:	2b03      	cmp	r3, #3
 80088da:	d015      	beq.n	8008908 <USBD_StdEPReq+0xa8>
 80088dc:	e02b      	b.n	8008936 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00c      	beq.n	80088fe <USBD_StdEPReq+0x9e>
 80088e4:	7bbb      	ldrb	r3, [r7, #14]
 80088e6:	2b80      	cmp	r3, #128	; 0x80
 80088e8:	d009      	beq.n	80088fe <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80088ea:	7bbb      	ldrb	r3, [r7, #14]
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 f8a8 	bl	8009a44 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80088f4:	2180      	movs	r1, #128	; 0x80
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 f8a4 	bl	8009a44 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088fc:	e020      	b.n	8008940 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fc1c 	bl	800913e <USBD_CtlError>
              break;
 8008906:	e01b      	b.n	8008940 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	885b      	ldrh	r3, [r3, #2]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10e      	bne.n	800892e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00b      	beq.n	800892e <USBD_StdEPReq+0xce>
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	2b80      	cmp	r3, #128	; 0x80
 800891a:	d008      	beq.n	800892e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	88db      	ldrh	r3, [r3, #6]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d104      	bne.n	800892e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008924:	7bbb      	ldrb	r3, [r7, #14]
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f001 f88b 	bl	8009a44 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fcce 	bl	80092d0 <USBD_CtlSendStatus>

              break;
 8008934:	e004      	b.n	8008940 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fc00 	bl	800913e <USBD_CtlError>
              break;
 800893e:	bf00      	nop
          }
          break;
 8008940:	e0e0      	b.n	8008b04 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008948:	2b02      	cmp	r3, #2
 800894a:	d002      	beq.n	8008952 <USBD_StdEPReq+0xf2>
 800894c:	2b03      	cmp	r3, #3
 800894e:	d015      	beq.n	800897c <USBD_StdEPReq+0x11c>
 8008950:	e026      	b.n	80089a0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008952:	7bbb      	ldrb	r3, [r7, #14]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00c      	beq.n	8008972 <USBD_StdEPReq+0x112>
 8008958:	7bbb      	ldrb	r3, [r7, #14]
 800895a:	2b80      	cmp	r3, #128	; 0x80
 800895c:	d009      	beq.n	8008972 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800895e:	7bbb      	ldrb	r3, [r7, #14]
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 f86e 	bl	8009a44 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008968:	2180      	movs	r1, #128	; 0x80
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f001 f86a 	bl	8009a44 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008970:	e01c      	b.n	80089ac <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fbe2 	bl	800913e <USBD_CtlError>
              break;
 800897a:	e017      	b.n	80089ac <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	885b      	ldrh	r3, [r3, #2]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d112      	bne.n	80089aa <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800898a:	2b00      	cmp	r3, #0
 800898c:	d004      	beq.n	8008998 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f001 f875 	bl	8009a82 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fc99 	bl	80092d0 <USBD_CtlSendStatus>
              }
              break;
 800899e:	e004      	b.n	80089aa <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fbcb 	bl	800913e <USBD_CtlError>
              break;
 80089a8:	e000      	b.n	80089ac <USBD_StdEPReq+0x14c>
              break;
 80089aa:	bf00      	nop
          }
          break;
 80089ac:	e0aa      	b.n	8008b04 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d002      	beq.n	80089be <USBD_StdEPReq+0x15e>
 80089b8:	2b03      	cmp	r3, #3
 80089ba:	d032      	beq.n	8008a22 <USBD_StdEPReq+0x1c2>
 80089bc:	e097      	b.n	8008aee <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d007      	beq.n	80089d4 <USBD_StdEPReq+0x174>
 80089c4:	7bbb      	ldrb	r3, [r7, #14]
 80089c6:	2b80      	cmp	r3, #128	; 0x80
 80089c8:	d004      	beq.n	80089d4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80089ca:	6839      	ldr	r1, [r7, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fbb6 	bl	800913e <USBD_CtlError>
                break;
 80089d2:	e091      	b.n	8008af8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	da0b      	bge.n	80089f4 <USBD_StdEPReq+0x194>
 80089dc:	7bbb      	ldrb	r3, [r7, #14]
 80089de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089e2:	4613      	mov	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	3310      	adds	r3, #16
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	4413      	add	r3, r2
 80089f0:	3304      	adds	r3, #4
 80089f2:	e00b      	b.n	8008a0c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
 80089f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089fa:	4613      	mov	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	4413      	add	r3, r2
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2202      	movs	r2, #2
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fbfa 	bl	8009214 <USBD_CtlSendData>
              break;
 8008a20:	e06a      	b.n	8008af8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	da11      	bge.n	8008a4e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	f003 020f 	and.w	r2, r3, #15
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	4613      	mov	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	440b      	add	r3, r1
 8008a3c:	3318      	adds	r3, #24
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d117      	bne.n	8008a74 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fb79 	bl	800913e <USBD_CtlError>
                  break;
 8008a4c:	e054      	b.n	8008af8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a4e:	7bbb      	ldrb	r3, [r7, #14]
 8008a50:	f003 020f 	and.w	r2, r3, #15
 8008a54:	6879      	ldr	r1, [r7, #4]
 8008a56:	4613      	mov	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	440b      	add	r3, r1
 8008a60:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d104      	bne.n	8008a74 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fb66 	bl	800913e <USBD_CtlError>
                  break;
 8008a72:	e041      	b.n	8008af8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	da0b      	bge.n	8008a94 <USBD_StdEPReq+0x234>
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
 8008a7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a82:	4613      	mov	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	3310      	adds	r3, #16
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	4413      	add	r3, r2
 8008a90:	3304      	adds	r3, #4
 8008a92:	e00b      	b.n	8008aac <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a94:	7bbb      	ldrb	r3, [r7, #14]
 8008a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	3304      	adds	r3, #4
 8008aac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008aae:	7bbb      	ldrb	r3, [r7, #14]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <USBD_StdEPReq+0x25a>
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
 8008ab6:	2b80      	cmp	r3, #128	; 0x80
 8008ab8:	d103      	bne.n	8008ac2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2200      	movs	r2, #0
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	e00e      	b.n	8008ae0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fffa 	bl	8009ac0 <USBD_LL_IsStallEP>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	e002      	b.n	8008ae0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	2200      	movs	r2, #0
 8008ade:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fb94 	bl	8009214 <USBD_CtlSendData>
              break;
 8008aec:	e004      	b.n	8008af8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fb24 	bl	800913e <USBD_CtlError>
              break;
 8008af6:	bf00      	nop
          }
          break;
 8008af8:	e004      	b.n	8008b04 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fb1e 	bl	800913e <USBD_CtlError>
          break;
 8008b02:	bf00      	nop
      }
      break;
 8008b04:	e004      	b.n	8008b10 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fb18 	bl	800913e <USBD_CtlError>
      break;
 8008b0e:	bf00      	nop
  }

  return ret;
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
	...

08008b1c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	885b      	ldrh	r3, [r3, #2]
 8008b36:	0a1b      	lsrs	r3, r3, #8
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	2b06      	cmp	r3, #6
 8008b3e:	f200 8128 	bhi.w	8008d92 <USBD_GetDescriptor+0x276>
 8008b42:	a201      	add	r2, pc, #4	; (adr r2, 8008b48 <USBD_GetDescriptor+0x2c>)
 8008b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b48:	08008b65 	.word	0x08008b65
 8008b4c:	08008b7d 	.word	0x08008b7d
 8008b50:	08008bbd 	.word	0x08008bbd
 8008b54:	08008d93 	.word	0x08008d93
 8008b58:	08008d93 	.word	0x08008d93
 8008b5c:	08008d33 	.word	0x08008d33
 8008b60:	08008d5f 	.word	0x08008d5f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	7c12      	ldrb	r2, [r2, #16]
 8008b70:	f107 0108 	add.w	r1, r7, #8
 8008b74:	4610      	mov	r0, r2
 8008b76:	4798      	blx	r3
 8008b78:	60f8      	str	r0, [r7, #12]
      break;
 8008b7a:	e112      	b.n	8008da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	7c1b      	ldrb	r3, [r3, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10d      	bne.n	8008ba0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8c:	f107 0208 	add.w	r2, r7, #8
 8008b90:	4610      	mov	r0, r2
 8008b92:	4798      	blx	r3
 8008b94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b9e:	e100      	b.n	8008da2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba8:	f107 0208 	add.w	r2, r7, #8
 8008bac:	4610      	mov	r0, r2
 8008bae:	4798      	blx	r3
 8008bb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	701a      	strb	r2, [r3, #0]
      break;
 8008bba:	e0f2      	b.n	8008da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	885b      	ldrh	r3, [r3, #2]
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b05      	cmp	r3, #5
 8008bc4:	f200 80ac 	bhi.w	8008d20 <USBD_GetDescriptor+0x204>
 8008bc8:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <USBD_GetDescriptor+0xb4>)
 8008bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bce:	bf00      	nop
 8008bd0:	08008be9 	.word	0x08008be9
 8008bd4:	08008c1d 	.word	0x08008c1d
 8008bd8:	08008c51 	.word	0x08008c51
 8008bdc:	08008c85 	.word	0x08008c85
 8008be0:	08008cb9 	.word	0x08008cb9
 8008be4:	08008ced 	.word	0x08008ced
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00b      	beq.n	8008c0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	7c12      	ldrb	r2, [r2, #16]
 8008c00:	f107 0108 	add.w	r1, r7, #8
 8008c04:	4610      	mov	r0, r2
 8008c06:	4798      	blx	r3
 8008c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c0a:	e091      	b.n	8008d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fa95 	bl	800913e <USBD_CtlError>
            err++;
 8008c14:	7afb      	ldrb	r3, [r7, #11]
 8008c16:	3301      	adds	r3, #1
 8008c18:	72fb      	strb	r3, [r7, #11]
          break;
 8008c1a:	e089      	b.n	8008d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00b      	beq.n	8008c40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	7c12      	ldrb	r2, [r2, #16]
 8008c34:	f107 0108 	add.w	r1, r7, #8
 8008c38:	4610      	mov	r0, r2
 8008c3a:	4798      	blx	r3
 8008c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c3e:	e077      	b.n	8008d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fa7b 	bl	800913e <USBD_CtlError>
            err++;
 8008c48:	7afb      	ldrb	r3, [r7, #11]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c4e:	e06f      	b.n	8008d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00b      	beq.n	8008c74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	7c12      	ldrb	r2, [r2, #16]
 8008c68:	f107 0108 	add.w	r1, r7, #8
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4798      	blx	r3
 8008c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c72:	e05d      	b.n	8008d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fa61 	bl	800913e <USBD_CtlError>
            err++;
 8008c7c:	7afb      	ldrb	r3, [r7, #11]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	72fb      	strb	r3, [r7, #11]
          break;
 8008c82:	e055      	b.n	8008d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00b      	beq.n	8008ca8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	7c12      	ldrb	r2, [r2, #16]
 8008c9c:	f107 0108 	add.w	r1, r7, #8
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4798      	blx	r3
 8008ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ca6:	e043      	b.n	8008d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fa47 	bl	800913e <USBD_CtlError>
            err++;
 8008cb0:	7afb      	ldrb	r3, [r7, #11]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cb6:	e03b      	b.n	8008d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00b      	beq.n	8008cdc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	7c12      	ldrb	r2, [r2, #16]
 8008cd0:	f107 0108 	add.w	r1, r7, #8
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	4798      	blx	r3
 8008cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cda:	e029      	b.n	8008d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fa2d 	bl	800913e <USBD_CtlError>
            err++;
 8008ce4:	7afb      	ldrb	r3, [r7, #11]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8008cea:	e021      	b.n	8008d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00b      	beq.n	8008d10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	7c12      	ldrb	r2, [r2, #16]
 8008d04:	f107 0108 	add.w	r1, r7, #8
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4798      	blx	r3
 8008d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d0e:	e00f      	b.n	8008d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa13 	bl	800913e <USBD_CtlError>
            err++;
 8008d18:	7afb      	ldrb	r3, [r7, #11]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d1e:	e007      	b.n	8008d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fa0b 	bl	800913e <USBD_CtlError>
          err++;
 8008d28:	7afb      	ldrb	r3, [r7, #11]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008d2e:	e038      	b.n	8008da2 <USBD_GetDescriptor+0x286>
 8008d30:	e037      	b.n	8008da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	7c1b      	ldrb	r3, [r3, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d109      	bne.n	8008d4e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d42:	f107 0208 	add.w	r2, r7, #8
 8008d46:	4610      	mov	r0, r2
 8008d48:	4798      	blx	r3
 8008d4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d4c:	e029      	b.n	8008da2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f9f4 	bl	800913e <USBD_CtlError>
        err++;
 8008d56:	7afb      	ldrb	r3, [r7, #11]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	72fb      	strb	r3, [r7, #11]
      break;
 8008d5c:	e021      	b.n	8008da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	7c1b      	ldrb	r3, [r3, #16]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10d      	bne.n	8008d82 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6e:	f107 0208 	add.w	r2, r7, #8
 8008d72:	4610      	mov	r0, r2
 8008d74:	4798      	blx	r3
 8008d76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	2207      	movs	r2, #7
 8008d7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d80:	e00f      	b.n	8008da2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f9da 	bl	800913e <USBD_CtlError>
        err++;
 8008d8a:	7afb      	ldrb	r3, [r7, #11]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d90:	e007      	b.n	8008da2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f9d2 	bl	800913e <USBD_CtlError>
      err++;
 8008d9a:	7afb      	ldrb	r3, [r7, #11]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	72fb      	strb	r3, [r7, #11]
      break;
 8008da0:	bf00      	nop
  }

  if (err != 0U)
 8008da2:	7afb      	ldrb	r3, [r7, #11]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d11c      	bne.n	8008de2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008da8:	893b      	ldrh	r3, [r7, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d011      	beq.n	8008dd2 <USBD_GetDescriptor+0x2b6>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	88db      	ldrh	r3, [r3, #6]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00d      	beq.n	8008dd2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	88da      	ldrh	r2, [r3, #6]
 8008dba:	893b      	ldrh	r3, [r7, #8]
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	bf28      	it	cs
 8008dc0:	4613      	movcs	r3, r2
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008dc6:	893b      	ldrh	r3, [r7, #8]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	68f9      	ldr	r1, [r7, #12]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fa21 	bl	8009214 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	88db      	ldrh	r3, [r3, #6]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d104      	bne.n	8008de4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fa78 	bl	80092d0 <USBD_CtlSendStatus>
 8008de0:	e000      	b.n	8008de4 <USBD_GetDescriptor+0x2c8>
    return;
 8008de2:	bf00      	nop
    }
  }
}
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop

08008dec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	889b      	ldrh	r3, [r3, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d130      	bne.n	8008e60 <USBD_SetAddress+0x74>
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	88db      	ldrh	r3, [r3, #6]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d12c      	bne.n	8008e60 <USBD_SetAddress+0x74>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	885b      	ldrh	r3, [r3, #2]
 8008e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8008e0c:	d828      	bhi.n	8008e60 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	885b      	ldrh	r3, [r3, #2]
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d104      	bne.n	8008e2e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f989 	bl	800913e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e2c:	e01c      	b.n	8008e68 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	7bfa      	ldrb	r2, [r7, #15]
 8008e32:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fe6d 	bl	8009b1a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fa45 	bl	80092d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d004      	beq.n	8008e56 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e54:	e008      	b.n	8008e68 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e5e:	e003      	b.n	8008e68 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f96b 	bl	800913e <USBD_CtlError>
  }
}
 8008e68:	bf00      	nop
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	885b      	ldrh	r3, [r3, #2]
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	4b41      	ldr	r3, [pc, #260]	; (8008f88 <USBD_SetConfig+0x118>)
 8008e82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e84:	4b40      	ldr	r3, [pc, #256]	; (8008f88 <USBD_SetConfig+0x118>)
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d904      	bls.n	8008e96 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f955 	bl	800913e <USBD_CtlError>
 8008e94:	e075      	b.n	8008f82 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d002      	beq.n	8008ea6 <USBD_SetConfig+0x36>
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d023      	beq.n	8008eec <USBD_SetConfig+0x7c>
 8008ea4:	e062      	b.n	8008f6c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008ea6:	4b38      	ldr	r3, [pc, #224]	; (8008f88 <USBD_SetConfig+0x118>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d01a      	beq.n	8008ee4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008eae:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <USBD_SetConfig+0x118>)
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2203      	movs	r2, #3
 8008ebc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ec0:	4b31      	ldr	r3, [pc, #196]	; (8008f88 <USBD_SetConfig+0x118>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7ff f9f0 	bl	80082ac <USBD_SetClassConfig>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d104      	bne.n	8008edc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f932 	bl	800913e <USBD_CtlError>
            return;
 8008eda:	e052      	b.n	8008f82 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f9f7 	bl	80092d0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ee2:	e04e      	b.n	8008f82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f9f3 	bl	80092d0 <USBD_CtlSendStatus>
        break;
 8008eea:	e04a      	b.n	8008f82 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008eec:	4b26      	ldr	r3, [pc, #152]	; (8008f88 <USBD_SetConfig+0x118>)
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d112      	bne.n	8008f1a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008efc:	4b22      	ldr	r3, [pc, #136]	; (8008f88 <USBD_SetConfig+0x118>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008f06:	4b20      	ldr	r3, [pc, #128]	; (8008f88 <USBD_SetConfig+0x118>)
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f7ff f9ec 	bl	80082ea <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f9dc 	bl	80092d0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f18:	e033      	b.n	8008f82 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008f1a:	4b1b      	ldr	r3, [pc, #108]	; (8008f88 <USBD_SetConfig+0x118>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d01d      	beq.n	8008f64 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7ff f9da 	bl	80082ea <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008f36:	4b14      	ldr	r3, [pc, #80]	; (8008f88 <USBD_SetConfig+0x118>)
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f40:	4b11      	ldr	r3, [pc, #68]	; (8008f88 <USBD_SetConfig+0x118>)
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7ff f9b0 	bl	80082ac <USBD_SetClassConfig>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d104      	bne.n	8008f5c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f8f2 	bl	800913e <USBD_CtlError>
            return;
 8008f5a:	e012      	b.n	8008f82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f9b7 	bl	80092d0 <USBD_CtlSendStatus>
        break;
 8008f62:	e00e      	b.n	8008f82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f9b3 	bl	80092d0 <USBD_CtlSendStatus>
        break;
 8008f6a:	e00a      	b.n	8008f82 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f8e5 	bl	800913e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008f74:	4b04      	ldr	r3, [pc, #16]	; (8008f88 <USBD_SetConfig+0x118>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff f9b5 	bl	80082ea <USBD_ClrClassConfig>
        break;
 8008f80:	bf00      	nop
    }
  }
}
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	20000370 	.word	0x20000370

08008f8c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	88db      	ldrh	r3, [r3, #6]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d004      	beq.n	8008fa8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f8cc 	bl	800913e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008fa6:	e021      	b.n	8008fec <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	db17      	blt.n	8008fe2 <USBD_GetConfig+0x56>
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	dd02      	ble.n	8008fbc <USBD_GetConfig+0x30>
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d00b      	beq.n	8008fd2 <USBD_GetConfig+0x46>
 8008fba:	e012      	b.n	8008fe2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3308      	adds	r3, #8
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f922 	bl	8009214 <USBD_CtlSendData>
        break;
 8008fd0:	e00c      	b.n	8008fec <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f91a 	bl	8009214 <USBD_CtlSendData>
        break;
 8008fe0:	e004      	b.n	8008fec <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f8aa 	bl	800913e <USBD_CtlError>
        break;
 8008fea:	bf00      	nop
}
 8008fec:	bf00      	nop
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009004:	3b01      	subs	r3, #1
 8009006:	2b02      	cmp	r3, #2
 8009008:	d81e      	bhi.n	8009048 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	88db      	ldrh	r3, [r3, #6]
 800900e:	2b02      	cmp	r3, #2
 8009010:	d004      	beq.n	800901c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009012:	6839      	ldr	r1, [r7, #0]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f892 	bl	800913e <USBD_CtlError>
        break;
 800901a:	e01a      	b.n	8009052 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009028:	2b00      	cmp	r3, #0
 800902a:	d005      	beq.n	8009038 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	f043 0202 	orr.w	r2, r3, #2
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	330c      	adds	r3, #12
 800903c:	2202      	movs	r2, #2
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f8e7 	bl	8009214 <USBD_CtlSendData>
      break;
 8009046:	e004      	b.n	8009052 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f877 	bl	800913e <USBD_CtlError>
      break;
 8009050:	bf00      	nop
  }
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b082      	sub	sp, #8
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	885b      	ldrh	r3, [r3, #2]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d106      	bne.n	800907a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f92b 	bl	80092d0 <USBD_CtlSendStatus>
  }
}
 800907a:	bf00      	nop
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b082      	sub	sp, #8
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009092:	3b01      	subs	r3, #1
 8009094:	2b02      	cmp	r3, #2
 8009096:	d80b      	bhi.n	80090b0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	885b      	ldrh	r3, [r3, #2]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d10c      	bne.n	80090ba <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f911 	bl	80092d0 <USBD_CtlSendStatus>
      }
      break;
 80090ae:	e004      	b.n	80090ba <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f843 	bl	800913e <USBD_CtlError>
      break;
 80090b8:	e000      	b.n	80090bc <USBD_ClrFeature+0x3a>
      break;
 80090ba:	bf00      	nop
  }
}
 80090bc:	bf00      	nop
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	781a      	ldrb	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	785a      	ldrb	r2, [r3, #1]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	3302      	adds	r3, #2
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	3303      	adds	r3, #3
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	021b      	lsls	r3, r3, #8
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	4413      	add	r3, r2
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	3304      	adds	r3, #4
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	b29a      	uxth	r2, r3
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	3305      	adds	r3, #5
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	b29b      	uxth	r3, r3
 800910a:	021b      	lsls	r3, r3, #8
 800910c:	b29b      	uxth	r3, r3
 800910e:	4413      	add	r3, r2
 8009110:	b29a      	uxth	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	3306      	adds	r3, #6
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	b29a      	uxth	r2, r3
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	3307      	adds	r3, #7
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	b29b      	uxth	r3, r3
 8009126:	021b      	lsls	r3, r3, #8
 8009128:	b29b      	uxth	r3, r3
 800912a:	4413      	add	r3, r2
 800912c:	b29a      	uxth	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	80da      	strh	r2, [r3, #6]

}
 8009132:	bf00      	nop
 8009134:	370c      	adds	r7, #12
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr

0800913e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b082      	sub	sp, #8
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009148:	2180      	movs	r1, #128	; 0x80
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fc7a 	bl	8009a44 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009150:	2100      	movs	r1, #0
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fc76 	bl	8009a44 <USBD_LL_StallEP>
}
 8009158:	bf00      	nop
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800916c:	2300      	movs	r3, #0
 800916e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d032      	beq.n	80091dc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 f834 	bl	80091e4 <USBD_GetLen>
 800917c:	4603      	mov	r3, r0
 800917e:	3301      	adds	r3, #1
 8009180:	b29b      	uxth	r3, r3
 8009182:	005b      	lsls	r3, r3, #1
 8009184:	b29a      	uxth	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800918a:	7dfb      	ldrb	r3, [r7, #23]
 800918c:	1c5a      	adds	r2, r3, #1
 800918e:	75fa      	strb	r2, [r7, #23]
 8009190:	461a      	mov	r2, r3
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	4413      	add	r3, r2
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	7812      	ldrb	r2, [r2, #0]
 800919a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800919c:	7dfb      	ldrb	r3, [r7, #23]
 800919e:	1c5a      	adds	r2, r3, #1
 80091a0:	75fa      	strb	r2, [r7, #23]
 80091a2:	461a      	mov	r2, r3
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	4413      	add	r3, r2
 80091a8:	2203      	movs	r2, #3
 80091aa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80091ac:	e012      	b.n	80091d4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	1c5a      	adds	r2, r3, #1
 80091b2:	60fa      	str	r2, [r7, #12]
 80091b4:	7dfa      	ldrb	r2, [r7, #23]
 80091b6:	1c51      	adds	r1, r2, #1
 80091b8:	75f9      	strb	r1, [r7, #23]
 80091ba:	4611      	mov	r1, r2
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	440a      	add	r2, r1
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80091c4:	7dfb      	ldrb	r3, [r7, #23]
 80091c6:	1c5a      	adds	r2, r3, #1
 80091c8:	75fa      	strb	r2, [r7, #23]
 80091ca:	461a      	mov	r2, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	4413      	add	r3, r2
 80091d0:	2200      	movs	r2, #0
 80091d2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e8      	bne.n	80091ae <USBD_GetString+0x4e>
    }
  }
}
 80091dc:	bf00      	nop
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80091f0:	e005      	b.n	80091fe <USBD_GetLen+0x1a>
  {
    len++;
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	3301      	adds	r3, #1
 80091f6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	3301      	adds	r3, #1
 80091fc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1f5      	bne.n	80091f2 <USBD_GetLen+0xe>
  }

  return len;
 8009206:	7bfb      	ldrb	r3, [r7, #15]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	4613      	mov	r3, r2
 8009220:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2202      	movs	r2, #2
 8009226:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800922a:	88fa      	ldrh	r2, [r7, #6]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009230:	88fa      	ldrh	r2, [r7, #6]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009236:	88fb      	ldrh	r3, [r7, #6]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	2100      	movs	r1, #0
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 fc8b 	bl	8009b58 <USBD_LL_Transmit>

  return USBD_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	4613      	mov	r3, r2
 8009258:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800925a:	88fb      	ldrh	r3, [r7, #6]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	2100      	movs	r1, #0
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f000 fc79 	bl	8009b58 <USBD_LL_Transmit>

  return USBD_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	4613      	mov	r3, r2
 800927c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2203      	movs	r2, #3
 8009282:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009286:	88fa      	ldrh	r2, [r7, #6]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800928e:	88fa      	ldrh	r2, [r7, #6]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009296:	88fb      	ldrh	r3, [r7, #6]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	2100      	movs	r1, #0
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f000 fc7e 	bl	8009b9e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	4613      	mov	r3, r2
 80092b8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092ba:	88fb      	ldrh	r3, [r7, #6]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	2100      	movs	r1, #0
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 fc6c 	bl	8009b9e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2204      	movs	r2, #4
 80092dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092e0:	2300      	movs	r3, #0
 80092e2:	2200      	movs	r2, #0
 80092e4:	2100      	movs	r1, #0
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fc36 	bl	8009b58 <USBD_LL_Transmit>

  return USBD_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2205      	movs	r2, #5
 8009302:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009306:	2300      	movs	r3, #0
 8009308:	2200      	movs	r2, #0
 800930a:	2100      	movs	r1, #0
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 fc46 	bl	8009b9e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009320:	2200      	movs	r2, #0
 8009322:	4912      	ldr	r1, [pc, #72]	; (800936c <MX_USB_DEVICE_Init+0x50>)
 8009324:	4812      	ldr	r0, [pc, #72]	; (8009370 <MX_USB_DEVICE_Init+0x54>)
 8009326:	f7fe ff65 	bl	80081f4 <USBD_Init>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009330:	f7f8 f874 	bl	800141c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009334:	490f      	ldr	r1, [pc, #60]	; (8009374 <MX_USB_DEVICE_Init+0x58>)
 8009336:	480e      	ldr	r0, [pc, #56]	; (8009370 <MX_USB_DEVICE_Init+0x54>)
 8009338:	f7fe ff87 	bl	800824a <USBD_RegisterClass>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009342:	f7f8 f86b 	bl	800141c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009346:	490c      	ldr	r1, [pc, #48]	; (8009378 <MX_USB_DEVICE_Init+0x5c>)
 8009348:	4809      	ldr	r0, [pc, #36]	; (8009370 <MX_USB_DEVICE_Init+0x54>)
 800934a:	f7fe feb5 	bl	80080b8 <USBD_CDC_RegisterInterface>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d001      	beq.n	8009358 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009354:	f7f8 f862 	bl	800141c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009358:	4805      	ldr	r0, [pc, #20]	; (8009370 <MX_USB_DEVICE_Init+0x54>)
 800935a:	f7fe ff90 	bl	800827e <USBD_Start>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009364:	f7f8 f85a 	bl	800141c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009368:	bf00      	nop
 800936a:	bd80      	pop	{r7, pc}
 800936c:	2000012c 	.word	0x2000012c
 8009370:	2000069c 	.word	0x2000069c
 8009374:	20000018 	.word	0x20000018
 8009378:	2000011c 	.word	0x2000011c

0800937c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009380:	2200      	movs	r2, #0
 8009382:	4905      	ldr	r1, [pc, #20]	; (8009398 <CDC_Init_FS+0x1c>)
 8009384:	4805      	ldr	r0, [pc, #20]	; (800939c <CDC_Init_FS+0x20>)
 8009386:	f7fe feae 	bl	80080e6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800938a:	4905      	ldr	r1, [pc, #20]	; (80093a0 <CDC_Init_FS+0x24>)
 800938c:	4803      	ldr	r0, [pc, #12]	; (800939c <CDC_Init_FS+0x20>)
 800938e:	f7fe fec4 	bl	800811a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009392:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009394:	4618      	mov	r0, r3
 8009396:	bd80      	pop	{r7, pc}
 8009398:	20000d48 	.word	0x20000d48
 800939c:	2000069c 	.word	0x2000069c
 80093a0:	20000960 	.word	0x20000960

080093a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80093a4:	b480      	push	{r7}
 80093a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80093a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	6039      	str	r1, [r7, #0]
 80093be:	71fb      	strb	r3, [r7, #7]
 80093c0:	4613      	mov	r3, r2
 80093c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093c4:	79fb      	ldrb	r3, [r7, #7]
 80093c6:	2b23      	cmp	r3, #35	; 0x23
 80093c8:	d84a      	bhi.n	8009460 <CDC_Control_FS+0xac>
 80093ca:	a201      	add	r2, pc, #4	; (adr r2, 80093d0 <CDC_Control_FS+0x1c>)
 80093cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d0:	08009461 	.word	0x08009461
 80093d4:	08009461 	.word	0x08009461
 80093d8:	08009461 	.word	0x08009461
 80093dc:	08009461 	.word	0x08009461
 80093e0:	08009461 	.word	0x08009461
 80093e4:	08009461 	.word	0x08009461
 80093e8:	08009461 	.word	0x08009461
 80093ec:	08009461 	.word	0x08009461
 80093f0:	08009461 	.word	0x08009461
 80093f4:	08009461 	.word	0x08009461
 80093f8:	08009461 	.word	0x08009461
 80093fc:	08009461 	.word	0x08009461
 8009400:	08009461 	.word	0x08009461
 8009404:	08009461 	.word	0x08009461
 8009408:	08009461 	.word	0x08009461
 800940c:	08009461 	.word	0x08009461
 8009410:	08009461 	.word	0x08009461
 8009414:	08009461 	.word	0x08009461
 8009418:	08009461 	.word	0x08009461
 800941c:	08009461 	.word	0x08009461
 8009420:	08009461 	.word	0x08009461
 8009424:	08009461 	.word	0x08009461
 8009428:	08009461 	.word	0x08009461
 800942c:	08009461 	.word	0x08009461
 8009430:	08009461 	.word	0x08009461
 8009434:	08009461 	.word	0x08009461
 8009438:	08009461 	.word	0x08009461
 800943c:	08009461 	.word	0x08009461
 8009440:	08009461 	.word	0x08009461
 8009444:	08009461 	.word	0x08009461
 8009448:	08009461 	.word	0x08009461
 800944c:	08009461 	.word	0x08009461
 8009450:	08009461 	.word	0x08009461
 8009454:	08009461 	.word	0x08009461
 8009458:	08009461 	.word	0x08009461
 800945c:	08009461 	.word	0x08009461
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009460:	bf00      	nop
  }

  return (USBD_OK);
 8009462:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009464:	4618      	mov	r0, r3
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	4805      	ldr	r0, [pc, #20]	; (8009494 <CDC_Receive_FS+0x24>)
 800947e:	f7fe fe4c 	bl	800811a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009482:	4804      	ldr	r0, [pc, #16]	; (8009494 <CDC_Receive_FS+0x24>)
 8009484:	f7fe fe8c 	bl	80081a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009488:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800948a:	4618      	mov	r0, r3
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	2000069c 	.word	0x2000069c

08009498 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	460b      	mov	r3, r1
 80094a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80094a8:	4b0d      	ldr	r3, [pc, #52]	; (80094e0 <CDC_Transmit_FS+0x48>)
 80094aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e00b      	b.n	80094d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80094be:	887b      	ldrh	r3, [r7, #2]
 80094c0:	461a      	mov	r2, r3
 80094c2:	6879      	ldr	r1, [r7, #4]
 80094c4:	4806      	ldr	r0, [pc, #24]	; (80094e0 <CDC_Transmit_FS+0x48>)
 80094c6:	f7fe fe0e 	bl	80080e6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80094ca:	4805      	ldr	r0, [pc, #20]	; (80094e0 <CDC_Transmit_FS+0x48>)
 80094cc:	f7fe fe39 	bl	8008142 <USBD_CDC_TransmitPacket>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	2000069c 	.word	0x2000069c

080094e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	4603      	mov	r3, r0
 80094ec:	6039      	str	r1, [r7, #0]
 80094ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2212      	movs	r2, #18
 80094f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094f6:	4b03      	ldr	r3, [pc, #12]	; (8009504 <USBD_FS_DeviceDescriptor+0x20>)
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	20000148 	.word	0x20000148

08009508 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	6039      	str	r1, [r7, #0]
 8009512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2204      	movs	r2, #4
 8009518:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800951a:	4b03      	ldr	r3, [pc, #12]	; (8009528 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800951c:	4618      	mov	r0, r3
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	2000015c 	.word	0x2000015c

0800952c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	4603      	mov	r3, r0
 8009534:	6039      	str	r1, [r7, #0]
 8009536:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d105      	bne.n	800954a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	4907      	ldr	r1, [pc, #28]	; (8009560 <USBD_FS_ProductStrDescriptor+0x34>)
 8009542:	4808      	ldr	r0, [pc, #32]	; (8009564 <USBD_FS_ProductStrDescriptor+0x38>)
 8009544:	f7ff fe0c 	bl	8009160 <USBD_GetString>
 8009548:	e004      	b.n	8009554 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	4904      	ldr	r1, [pc, #16]	; (8009560 <USBD_FS_ProductStrDescriptor+0x34>)
 800954e:	4805      	ldr	r0, [pc, #20]	; (8009564 <USBD_FS_ProductStrDescriptor+0x38>)
 8009550:	f7ff fe06 	bl	8009160 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009554:	4b02      	ldr	r3, [pc, #8]	; (8009560 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20001130 	.word	0x20001130
 8009564:	0800cf0c 	.word	0x0800cf0c

08009568 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	6039      	str	r1, [r7, #0]
 8009572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	4904      	ldr	r1, [pc, #16]	; (8009588 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009578:	4804      	ldr	r0, [pc, #16]	; (800958c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800957a:	f7ff fdf1 	bl	8009160 <USBD_GetString>
  return USBD_StrDesc;
 800957e:	4b02      	ldr	r3, [pc, #8]	; (8009588 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009580:	4618      	mov	r0, r3
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20001130 	.word	0x20001130
 800958c:	0800cf24 	.word	0x0800cf24

08009590 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	4603      	mov	r3, r0
 8009598:	6039      	str	r1, [r7, #0]
 800959a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	221a      	movs	r2, #26
 80095a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095a2:	f000 f843 	bl	800962c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80095a6:	4b02      	ldr	r3, [pc, #8]	; (80095b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000160 	.word	0x20000160

080095b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	4603      	mov	r3, r0
 80095bc:	6039      	str	r1, [r7, #0]
 80095be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095c0:	79fb      	ldrb	r3, [r7, #7]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d105      	bne.n	80095d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	4907      	ldr	r1, [pc, #28]	; (80095e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095ca:	4808      	ldr	r0, [pc, #32]	; (80095ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80095cc:	f7ff fdc8 	bl	8009160 <USBD_GetString>
 80095d0:	e004      	b.n	80095dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	4904      	ldr	r1, [pc, #16]	; (80095e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095d6:	4805      	ldr	r0, [pc, #20]	; (80095ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80095d8:	f7ff fdc2 	bl	8009160 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095dc:	4b02      	ldr	r3, [pc, #8]	; (80095e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20001130 	.word	0x20001130
 80095ec:	0800cf38 	.word	0x0800cf38

080095f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	6039      	str	r1, [r7, #0]
 80095fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095fc:	79fb      	ldrb	r3, [r7, #7]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d105      	bne.n	800960e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	4907      	ldr	r1, [pc, #28]	; (8009624 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009606:	4808      	ldr	r0, [pc, #32]	; (8009628 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009608:	f7ff fdaa 	bl	8009160 <USBD_GetString>
 800960c:	e004      	b.n	8009618 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	4904      	ldr	r1, [pc, #16]	; (8009624 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009612:	4805      	ldr	r0, [pc, #20]	; (8009628 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009614:	f7ff fda4 	bl	8009160 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009618:	4b02      	ldr	r3, [pc, #8]	; (8009624 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20001130 	.word	0x20001130
 8009628:	0800cf44 	.word	0x0800cf44

0800962c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009632:	4b0f      	ldr	r3, [pc, #60]	; (8009670 <Get_SerialNum+0x44>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009638:	4b0e      	ldr	r3, [pc, #56]	; (8009674 <Get_SerialNum+0x48>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800963e:	4b0e      	ldr	r3, [pc, #56]	; (8009678 <Get_SerialNum+0x4c>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4413      	add	r3, r2
 800964a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d009      	beq.n	8009666 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009652:	2208      	movs	r2, #8
 8009654:	4909      	ldr	r1, [pc, #36]	; (800967c <Get_SerialNum+0x50>)
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 f814 	bl	8009684 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800965c:	2204      	movs	r2, #4
 800965e:	4908      	ldr	r1, [pc, #32]	; (8009680 <Get_SerialNum+0x54>)
 8009660:	68b8      	ldr	r0, [r7, #8]
 8009662:	f000 f80f 	bl	8009684 <IntToUnicode>
  }
}
 8009666:	bf00      	nop
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	1ffff7ac 	.word	0x1ffff7ac
 8009674:	1ffff7b0 	.word	0x1ffff7b0
 8009678:	1ffff7b4 	.word	0x1ffff7b4
 800967c:	20000162 	.word	0x20000162
 8009680:	20000172 	.word	0x20000172

08009684 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009684:	b480      	push	{r7}
 8009686:	b087      	sub	sp, #28
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	4613      	mov	r3, r2
 8009690:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009692:	2300      	movs	r3, #0
 8009694:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009696:	2300      	movs	r3, #0
 8009698:	75fb      	strb	r3, [r7, #23]
 800969a:	e027      	b.n	80096ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	0f1b      	lsrs	r3, r3, #28
 80096a0:	2b09      	cmp	r3, #9
 80096a2:	d80b      	bhi.n	80096bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	0f1b      	lsrs	r3, r3, #28
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	7dfb      	ldrb	r3, [r7, #23]
 80096ac:	005b      	lsls	r3, r3, #1
 80096ae:	4619      	mov	r1, r3
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	440b      	add	r3, r1
 80096b4:	3230      	adds	r2, #48	; 0x30
 80096b6:	b2d2      	uxtb	r2, r2
 80096b8:	701a      	strb	r2, [r3, #0]
 80096ba:	e00a      	b.n	80096d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	0f1b      	lsrs	r3, r3, #28
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	7dfb      	ldrb	r3, [r7, #23]
 80096c4:	005b      	lsls	r3, r3, #1
 80096c6:	4619      	mov	r1, r3
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	440b      	add	r3, r1
 80096cc:	3237      	adds	r2, #55	; 0x37
 80096ce:	b2d2      	uxtb	r2, r2
 80096d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	011b      	lsls	r3, r3, #4
 80096d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	005b      	lsls	r3, r3, #1
 80096dc:	3301      	adds	r3, #1
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	4413      	add	r3, r2
 80096e2:	2200      	movs	r2, #0
 80096e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
 80096e8:	3301      	adds	r3, #1
 80096ea:	75fb      	strb	r3, [r7, #23]
 80096ec:	7dfa      	ldrb	r2, [r7, #23]
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d3d3      	bcc.n	800969c <IntToUnicode+0x18>
  }
}
 80096f4:	bf00      	nop
 80096f6:	371c      	adds	r7, #28
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08a      	sub	sp, #40	; 0x28
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009708:	f107 0314 	add.w	r3, r7, #20
 800970c:	2200      	movs	r2, #0
 800970e:	601a      	str	r2, [r3, #0]
 8009710:	605a      	str	r2, [r3, #4]
 8009712:	609a      	str	r2, [r3, #8]
 8009714:	60da      	str	r2, [r3, #12]
 8009716:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a1c      	ldr	r2, [pc, #112]	; (8009790 <HAL_PCD_MspInit+0x90>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d131      	bne.n	8009786 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009722:	4b1c      	ldr	r3, [pc, #112]	; (8009794 <HAL_PCD_MspInit+0x94>)
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	4a1b      	ldr	r2, [pc, #108]	; (8009794 <HAL_PCD_MspInit+0x94>)
 8009728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800972c:	6153      	str	r3, [r2, #20]
 800972e:	4b19      	ldr	r3, [pc, #100]	; (8009794 <HAL_PCD_MspInit+0x94>)
 8009730:	695b      	ldr	r3, [r3, #20]
 8009732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009736:	613b      	str	r3, [r7, #16]
 8009738:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800973a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800973e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009740:	2302      	movs	r3, #2
 8009742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009744:	2300      	movs	r3, #0
 8009746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009748:	2303      	movs	r3, #3
 800974a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800974c:	230e      	movs	r3, #14
 800974e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009750:	f107 0314 	add.w	r3, r7, #20
 8009754:	4619      	mov	r1, r3
 8009756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800975a:	f7f8 f975 	bl	8001a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800975e:	4b0d      	ldr	r3, [pc, #52]	; (8009794 <HAL_PCD_MspInit+0x94>)
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	4a0c      	ldr	r2, [pc, #48]	; (8009794 <HAL_PCD_MspInit+0x94>)
 8009764:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009768:	61d3      	str	r3, [r2, #28]
 800976a:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <HAL_PCD_MspInit+0x94>)
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009772:	60fb      	str	r3, [r7, #12]
 8009774:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009776:	2200      	movs	r2, #0
 8009778:	2100      	movs	r1, #0
 800977a:	2014      	movs	r0, #20
 800977c:	f7f8 f92d 	bl	80019da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009780:	2014      	movs	r0, #20
 8009782:	f7f8 f946 	bl	8001a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009786:	bf00      	nop
 8009788:	3728      	adds	r7, #40	; 0x28
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	40005c00 	.word	0x40005c00
 8009794:	40021000 	.word	0x40021000

08009798 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80097ac:	4619      	mov	r1, r3
 80097ae:	4610      	mov	r0, r2
 80097b0:	f7fe fdae 	bl	8008310 <USBD_LL_SetupStage>
}
 80097b4:	bf00      	nop
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	460b      	mov	r3, r1
 80097c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80097ce:	78fa      	ldrb	r2, [r7, #3]
 80097d0:	6879      	ldr	r1, [r7, #4]
 80097d2:	4613      	mov	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	00db      	lsls	r3, r3, #3
 80097da:	440b      	add	r3, r1
 80097dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	78fb      	ldrb	r3, [r7, #3]
 80097e4:	4619      	mov	r1, r3
 80097e6:	f7fe fdde 	bl	80083a6 <USBD_LL_DataOutStage>
}
 80097ea:	bf00      	nop
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b082      	sub	sp, #8
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	460b      	mov	r3, r1
 80097fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009804:	78fa      	ldrb	r2, [r7, #3]
 8009806:	6879      	ldr	r1, [r7, #4]
 8009808:	4613      	mov	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	00db      	lsls	r3, r3, #3
 8009810:	440b      	add	r3, r1
 8009812:	333c      	adds	r3, #60	; 0x3c
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	78fb      	ldrb	r3, [r7, #3]
 8009818:	4619      	mov	r1, r3
 800981a:	f7fe fe35 	bl	8008488 <USBD_LL_DataInStage>
}
 800981e:	bf00      	nop
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b082      	sub	sp, #8
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe ff48 	bl	80086ca <USBD_LL_SOF>
}
 800983a:	bf00      	nop
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800984a:	2301      	movs	r3, #1
 800984c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	2b02      	cmp	r3, #2
 8009854:	d001      	beq.n	800985a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009856:	f7f7 fde1 	bl	800141c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009860:	7bfa      	ldrb	r2, [r7, #15]
 8009862:	4611      	mov	r1, r2
 8009864:	4618      	mov	r0, r3
 8009866:	f7fe fef5 	bl	8008654 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009870:	4618      	mov	r0, r3
 8009872:	f7fe feae 	bl	80085d2 <USBD_LL_Reset>
}
 8009876:	bf00      	nop
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800988e:	4618      	mov	r0, r3
 8009890:	f7fe fef0 	bl	8008674 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d005      	beq.n	80098a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800989c:	4b04      	ldr	r3, [pc, #16]	; (80098b0 <HAL_PCD_SuspendCallback+0x30>)
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	4a03      	ldr	r2, [pc, #12]	; (80098b0 <HAL_PCD_SuspendCallback+0x30>)
 80098a2:	f043 0306 	orr.w	r3, r3, #6
 80098a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80098a8:	bf00      	nop
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	e000ed00 	.word	0xe000ed00

080098b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fe feeb 	bl	800869e <USBD_LL_Resume>
}
 80098c8:	bf00      	nop
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80098d8:	4a28      	ldr	r2, [pc, #160]	; (800997c <USBD_LL_Init+0xac>)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a26      	ldr	r2, [pc, #152]	; (800997c <USBD_LL_Init+0xac>)
 80098e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80098e8:	4b24      	ldr	r3, [pc, #144]	; (800997c <USBD_LL_Init+0xac>)
 80098ea:	4a25      	ldr	r2, [pc, #148]	; (8009980 <USBD_LL_Init+0xb0>)
 80098ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80098ee:	4b23      	ldr	r3, [pc, #140]	; (800997c <USBD_LL_Init+0xac>)
 80098f0:	2208      	movs	r2, #8
 80098f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80098f4:	4b21      	ldr	r3, [pc, #132]	; (800997c <USBD_LL_Init+0xac>)
 80098f6:	2202      	movs	r2, #2
 80098f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80098fa:	4b20      	ldr	r3, [pc, #128]	; (800997c <USBD_LL_Init+0xac>)
 80098fc:	2202      	movs	r2, #2
 80098fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009900:	4b1e      	ldr	r3, [pc, #120]	; (800997c <USBD_LL_Init+0xac>)
 8009902:	2200      	movs	r2, #0
 8009904:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009906:	4b1d      	ldr	r3, [pc, #116]	; (800997c <USBD_LL_Init+0xac>)
 8009908:	2200      	movs	r2, #0
 800990a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800990c:	481b      	ldr	r0, [pc, #108]	; (800997c <USBD_LL_Init+0xac>)
 800990e:	f7f8 ffb6 	bl	800287e <HAL_PCD_Init>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009918:	f7f7 fd80 	bl	800141c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009922:	2318      	movs	r3, #24
 8009924:	2200      	movs	r2, #0
 8009926:	2100      	movs	r1, #0
 8009928:	f7fa fa52 	bl	8003dd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009932:	2358      	movs	r3, #88	; 0x58
 8009934:	2200      	movs	r2, #0
 8009936:	2180      	movs	r1, #128	; 0x80
 8009938:	f7fa fa4a 	bl	8003dd0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009942:	23c0      	movs	r3, #192	; 0xc0
 8009944:	2200      	movs	r2, #0
 8009946:	2181      	movs	r1, #129	; 0x81
 8009948:	f7fa fa42 	bl	8003dd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009952:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009956:	2200      	movs	r2, #0
 8009958:	2101      	movs	r1, #1
 800995a:	f7fa fa39 	bl	8003dd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009968:	2200      	movs	r2, #0
 800996a:	2182      	movs	r1, #130	; 0x82
 800996c:	f7fa fa30 	bl	8003dd0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	20001330 	.word	0x20001330
 8009980:	40005c00 	.word	0x40005c00

08009984 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800999a:	4618      	mov	r0, r3
 800999c:	f7f9 f84d 	bl	8002a3a <HAL_PCD_Start>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 f954 	bl	8009c54 <USBD_Get_USB_Status>
 80099ac:	4603      	mov	r3, r0
 80099ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	4608      	mov	r0, r1
 80099c4:	4611      	mov	r1, r2
 80099c6:	461a      	mov	r2, r3
 80099c8:	4603      	mov	r3, r0
 80099ca:	70fb      	strb	r3, [r7, #3]
 80099cc:	460b      	mov	r3, r1
 80099ce:	70bb      	strb	r3, [r7, #2]
 80099d0:	4613      	mov	r3, r2
 80099d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80099e2:	78bb      	ldrb	r3, [r7, #2]
 80099e4:	883a      	ldrh	r2, [r7, #0]
 80099e6:	78f9      	ldrb	r1, [r7, #3]
 80099e8:	f7f9 f969 	bl	8002cbe <HAL_PCD_EP_Open>
 80099ec:	4603      	mov	r3, r0
 80099ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 f92e 	bl	8009c54 <USBD_Get_USB_Status>
 80099f8:	4603      	mov	r3, r0
 80099fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b084      	sub	sp, #16
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	460b      	mov	r3, r1
 8009a10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a20:	78fa      	ldrb	r2, [r7, #3]
 8009a22:	4611      	mov	r1, r2
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7f9 f9b0 	bl	8002d8a <HAL_PCD_EP_Close>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 f90f 	bl	8009c54 <USBD_Get_USB_Status>
 8009a36:	4603      	mov	r3, r0
 8009a38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a54:	2300      	movs	r3, #0
 8009a56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a5e:	78fa      	ldrb	r2, [r7, #3]
 8009a60:	4611      	mov	r1, r2
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7f9 fa71 	bl	8002f4a <HAL_PCD_EP_SetStall>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 f8f0 	bl	8009c54 <USBD_Get_USB_Status>
 8009a74:	4603      	mov	r3, r0
 8009a76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a78:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b084      	sub	sp, #16
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a9c:	78fa      	ldrb	r2, [r7, #3]
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7f9 faa4 	bl	8002fee <HAL_PCD_EP_ClrStall>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f000 f8d1 	bl	8009c54 <USBD_Get_USB_Status>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ad2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	da0c      	bge.n	8009af6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009adc:	78fb      	ldrb	r3, [r7, #3]
 8009ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ae2:	68f9      	ldr	r1, [r7, #12]
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	00db      	lsls	r3, r3, #3
 8009aee:	440b      	add	r3, r1
 8009af0:	3302      	adds	r3, #2
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	e00b      	b.n	8009b0e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009af6:	78fb      	ldrb	r3, [r7, #3]
 8009af8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009afc:	68f9      	ldr	r1, [r7, #12]
 8009afe:	4613      	mov	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	00db      	lsls	r3, r3, #3
 8009b06:	440b      	add	r3, r1
 8009b08:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009b0c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3714      	adds	r7, #20
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b084      	sub	sp, #16
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	460b      	mov	r3, r1
 8009b24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b26:	2300      	movs	r3, #0
 8009b28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b34:	78fa      	ldrb	r2, [r7, #3]
 8009b36:	4611      	mov	r1, r2
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7f9 f89b 	bl	8002c74 <HAL_PCD_SetAddress>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f000 f885 	bl	8009c54 <USBD_Get_USB_Status>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	607a      	str	r2, [r7, #4]
 8009b62:	461a      	mov	r2, r3
 8009b64:	460b      	mov	r3, r1
 8009b66:	72fb      	strb	r3, [r7, #11]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b7a:	893b      	ldrh	r3, [r7, #8]
 8009b7c:	7af9      	ldrb	r1, [r7, #11]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	f7f9 f9a0 	bl	8002ec4 <HAL_PCD_EP_Transmit>
 8009b84:	4603      	mov	r3, r0
 8009b86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b88:	7dfb      	ldrb	r3, [r7, #23]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 f862 	bl	8009c54 <USBD_Get_USB_Status>
 8009b90:	4603      	mov	r3, r0
 8009b92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b94:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3718      	adds	r7, #24
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b086      	sub	sp, #24
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	607a      	str	r2, [r7, #4]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	460b      	mov	r3, r1
 8009bac:	72fb      	strb	r3, [r7, #11]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bc0:	893b      	ldrh	r3, [r7, #8]
 8009bc2:	7af9      	ldrb	r1, [r7, #11]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	f7f9 f928 	bl	8002e1a <HAL_PCD_EP_Receive>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bce:	7dfb      	ldrb	r3, [r7, #23]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 f83f 	bl	8009c54 <USBD_Get_USB_Status>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bda:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bf6:	78fa      	ldrb	r2, [r7, #3]
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7f9 f94a 	bl	8002e94 <HAL_PCD_EP_GetRxCount>
 8009c00:	4603      	mov	r3, r0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
	...

08009c0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c14:	4b03      	ldr	r3, [pc, #12]	; (8009c24 <USBD_static_malloc+0x18>)
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	20000374 	.word	0x20000374

08009c28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]

}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c62:	79fb      	ldrb	r3, [r7, #7]
 8009c64:	2b03      	cmp	r3, #3
 8009c66:	d817      	bhi.n	8009c98 <USBD_Get_USB_Status+0x44>
 8009c68:	a201      	add	r2, pc, #4	; (adr r2, 8009c70 <USBD_Get_USB_Status+0x1c>)
 8009c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6e:	bf00      	nop
 8009c70:	08009c81 	.word	0x08009c81
 8009c74:	08009c87 	.word	0x08009c87
 8009c78:	08009c8d 	.word	0x08009c8d
 8009c7c:	08009c93 	.word	0x08009c93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
    break;
 8009c84:	e00b      	b.n	8009c9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c86:	2302      	movs	r3, #2
 8009c88:	73fb      	strb	r3, [r7, #15]
    break;
 8009c8a:	e008      	b.n	8009c9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c90:	e005      	b.n	8009c9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c92:	2302      	movs	r3, #2
 8009c94:	73fb      	strb	r3, [r7, #15]
    break;
 8009c96:	e002      	b.n	8009c9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c98:	2302      	movs	r3, #2
 8009c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c9c:	bf00      	nop
  }
  return usb_status;
 8009c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <__errno>:
 8009cac:	4b01      	ldr	r3, [pc, #4]	; (8009cb4 <__errno+0x8>)
 8009cae:	6818      	ldr	r0, [r3, #0]
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	2000017c 	.word	0x2000017c

08009cb8 <__libc_init_array>:
 8009cb8:	b570      	push	{r4, r5, r6, lr}
 8009cba:	4e0d      	ldr	r6, [pc, #52]	; (8009cf0 <__libc_init_array+0x38>)
 8009cbc:	4c0d      	ldr	r4, [pc, #52]	; (8009cf4 <__libc_init_array+0x3c>)
 8009cbe:	1ba4      	subs	r4, r4, r6
 8009cc0:	10a4      	asrs	r4, r4, #2
 8009cc2:	2500      	movs	r5, #0
 8009cc4:	42a5      	cmp	r5, r4
 8009cc6:	d109      	bne.n	8009cdc <__libc_init_array+0x24>
 8009cc8:	4e0b      	ldr	r6, [pc, #44]	; (8009cf8 <__libc_init_array+0x40>)
 8009cca:	4c0c      	ldr	r4, [pc, #48]	; (8009cfc <__libc_init_array+0x44>)
 8009ccc:	f003 f90e 	bl	800ceec <_init>
 8009cd0:	1ba4      	subs	r4, r4, r6
 8009cd2:	10a4      	asrs	r4, r4, #2
 8009cd4:	2500      	movs	r5, #0
 8009cd6:	42a5      	cmp	r5, r4
 8009cd8:	d105      	bne.n	8009ce6 <__libc_init_array+0x2e>
 8009cda:	bd70      	pop	{r4, r5, r6, pc}
 8009cdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ce0:	4798      	blx	r3
 8009ce2:	3501      	adds	r5, #1
 8009ce4:	e7ee      	b.n	8009cc4 <__libc_init_array+0xc>
 8009ce6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009cea:	4798      	blx	r3
 8009cec:	3501      	adds	r5, #1
 8009cee:	e7f2      	b.n	8009cd6 <__libc_init_array+0x1e>
 8009cf0:	0800d230 	.word	0x0800d230
 8009cf4:	0800d230 	.word	0x0800d230
 8009cf8:	0800d230 	.word	0x0800d230
 8009cfc:	0800d234 	.word	0x0800d234

08009d00 <memset>:
 8009d00:	4402      	add	r2, r0
 8009d02:	4603      	mov	r3, r0
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d100      	bne.n	8009d0a <memset+0xa>
 8009d08:	4770      	bx	lr
 8009d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d0e:	e7f9      	b.n	8009d04 <memset+0x4>

08009d10 <__cvt>:
 8009d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d14:	ec55 4b10 	vmov	r4, r5, d0
 8009d18:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009d1a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009d1e:	2d00      	cmp	r5, #0
 8009d20:	460e      	mov	r6, r1
 8009d22:	4691      	mov	r9, r2
 8009d24:	4619      	mov	r1, r3
 8009d26:	bfb8      	it	lt
 8009d28:	4622      	movlt	r2, r4
 8009d2a:	462b      	mov	r3, r5
 8009d2c:	f027 0720 	bic.w	r7, r7, #32
 8009d30:	bfbb      	ittet	lt
 8009d32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d36:	461d      	movlt	r5, r3
 8009d38:	2300      	movge	r3, #0
 8009d3a:	232d      	movlt	r3, #45	; 0x2d
 8009d3c:	bfb8      	it	lt
 8009d3e:	4614      	movlt	r4, r2
 8009d40:	2f46      	cmp	r7, #70	; 0x46
 8009d42:	700b      	strb	r3, [r1, #0]
 8009d44:	d004      	beq.n	8009d50 <__cvt+0x40>
 8009d46:	2f45      	cmp	r7, #69	; 0x45
 8009d48:	d100      	bne.n	8009d4c <__cvt+0x3c>
 8009d4a:	3601      	adds	r6, #1
 8009d4c:	2102      	movs	r1, #2
 8009d4e:	e000      	b.n	8009d52 <__cvt+0x42>
 8009d50:	2103      	movs	r1, #3
 8009d52:	ab03      	add	r3, sp, #12
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	ab02      	add	r3, sp, #8
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	4632      	mov	r2, r6
 8009d5c:	4653      	mov	r3, sl
 8009d5e:	ec45 4b10 	vmov	d0, r4, r5
 8009d62:	f000 fcdd 	bl	800a720 <_dtoa_r>
 8009d66:	2f47      	cmp	r7, #71	; 0x47
 8009d68:	4680      	mov	r8, r0
 8009d6a:	d102      	bne.n	8009d72 <__cvt+0x62>
 8009d6c:	f019 0f01 	tst.w	r9, #1
 8009d70:	d026      	beq.n	8009dc0 <__cvt+0xb0>
 8009d72:	2f46      	cmp	r7, #70	; 0x46
 8009d74:	eb08 0906 	add.w	r9, r8, r6
 8009d78:	d111      	bne.n	8009d9e <__cvt+0x8e>
 8009d7a:	f898 3000 	ldrb.w	r3, [r8]
 8009d7e:	2b30      	cmp	r3, #48	; 0x30
 8009d80:	d10a      	bne.n	8009d98 <__cvt+0x88>
 8009d82:	2200      	movs	r2, #0
 8009d84:	2300      	movs	r3, #0
 8009d86:	4620      	mov	r0, r4
 8009d88:	4629      	mov	r1, r5
 8009d8a:	f7f6 fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d8e:	b918      	cbnz	r0, 8009d98 <__cvt+0x88>
 8009d90:	f1c6 0601 	rsb	r6, r6, #1
 8009d94:	f8ca 6000 	str.w	r6, [sl]
 8009d98:	f8da 3000 	ldr.w	r3, [sl]
 8009d9c:	4499      	add	r9, r3
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2300      	movs	r3, #0
 8009da2:	4620      	mov	r0, r4
 8009da4:	4629      	mov	r1, r5
 8009da6:	f7f6 fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009daa:	b938      	cbnz	r0, 8009dbc <__cvt+0xac>
 8009dac:	2230      	movs	r2, #48	; 0x30
 8009dae:	9b03      	ldr	r3, [sp, #12]
 8009db0:	454b      	cmp	r3, r9
 8009db2:	d205      	bcs.n	8009dc0 <__cvt+0xb0>
 8009db4:	1c59      	adds	r1, r3, #1
 8009db6:	9103      	str	r1, [sp, #12]
 8009db8:	701a      	strb	r2, [r3, #0]
 8009dba:	e7f8      	b.n	8009dae <__cvt+0x9e>
 8009dbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009dc0:	9b03      	ldr	r3, [sp, #12]
 8009dc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dc4:	eba3 0308 	sub.w	r3, r3, r8
 8009dc8:	4640      	mov	r0, r8
 8009dca:	6013      	str	r3, [r2, #0]
 8009dcc:	b004      	add	sp, #16
 8009dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009dd2 <__exponent>:
 8009dd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dd4:	2900      	cmp	r1, #0
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	bfba      	itte	lt
 8009dda:	4249      	neglt	r1, r1
 8009ddc:	232d      	movlt	r3, #45	; 0x2d
 8009dde:	232b      	movge	r3, #43	; 0x2b
 8009de0:	2909      	cmp	r1, #9
 8009de2:	f804 2b02 	strb.w	r2, [r4], #2
 8009de6:	7043      	strb	r3, [r0, #1]
 8009de8:	dd20      	ble.n	8009e2c <__exponent+0x5a>
 8009dea:	f10d 0307 	add.w	r3, sp, #7
 8009dee:	461f      	mov	r7, r3
 8009df0:	260a      	movs	r6, #10
 8009df2:	fb91 f5f6 	sdiv	r5, r1, r6
 8009df6:	fb06 1115 	mls	r1, r6, r5, r1
 8009dfa:	3130      	adds	r1, #48	; 0x30
 8009dfc:	2d09      	cmp	r5, #9
 8009dfe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009e02:	f103 32ff 	add.w	r2, r3, #4294967295
 8009e06:	4629      	mov	r1, r5
 8009e08:	dc09      	bgt.n	8009e1e <__exponent+0x4c>
 8009e0a:	3130      	adds	r1, #48	; 0x30
 8009e0c:	3b02      	subs	r3, #2
 8009e0e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009e12:	42bb      	cmp	r3, r7
 8009e14:	4622      	mov	r2, r4
 8009e16:	d304      	bcc.n	8009e22 <__exponent+0x50>
 8009e18:	1a10      	subs	r0, r2, r0
 8009e1a:	b003      	add	sp, #12
 8009e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e1e:	4613      	mov	r3, r2
 8009e20:	e7e7      	b.n	8009df2 <__exponent+0x20>
 8009e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e26:	f804 2b01 	strb.w	r2, [r4], #1
 8009e2a:	e7f2      	b.n	8009e12 <__exponent+0x40>
 8009e2c:	2330      	movs	r3, #48	; 0x30
 8009e2e:	4419      	add	r1, r3
 8009e30:	7083      	strb	r3, [r0, #2]
 8009e32:	1d02      	adds	r2, r0, #4
 8009e34:	70c1      	strb	r1, [r0, #3]
 8009e36:	e7ef      	b.n	8009e18 <__exponent+0x46>

08009e38 <_printf_float>:
 8009e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	b08d      	sub	sp, #52	; 0x34
 8009e3e:	460c      	mov	r4, r1
 8009e40:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009e44:	4616      	mov	r6, r2
 8009e46:	461f      	mov	r7, r3
 8009e48:	4605      	mov	r5, r0
 8009e4a:	f001 fa21 	bl	800b290 <_localeconv_r>
 8009e4e:	6803      	ldr	r3, [r0, #0]
 8009e50:	9304      	str	r3, [sp, #16]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7f6 f9bc 	bl	80001d0 <strlen>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8009e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8009e60:	9005      	str	r0, [sp, #20]
 8009e62:	3307      	adds	r3, #7
 8009e64:	f023 0307 	bic.w	r3, r3, #7
 8009e68:	f103 0208 	add.w	r2, r3, #8
 8009e6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009e70:	f8d4 b000 	ldr.w	fp, [r4]
 8009e74:	f8c8 2000 	str.w	r2, [r8]
 8009e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e80:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009e84:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e88:	9307      	str	r3, [sp, #28]
 8009e8a:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e92:	4ba7      	ldr	r3, [pc, #668]	; (800a130 <_printf_float+0x2f8>)
 8009e94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e98:	f7f6 fe48 	bl	8000b2c <__aeabi_dcmpun>
 8009e9c:	bb70      	cbnz	r0, 8009efc <_printf_float+0xc4>
 8009e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea2:	4ba3      	ldr	r3, [pc, #652]	; (800a130 <_printf_float+0x2f8>)
 8009ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ea8:	f7f6 fe22 	bl	8000af0 <__aeabi_dcmple>
 8009eac:	bb30      	cbnz	r0, 8009efc <_printf_float+0xc4>
 8009eae:	2200      	movs	r2, #0
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	4640      	mov	r0, r8
 8009eb4:	4649      	mov	r1, r9
 8009eb6:	f7f6 fe11 	bl	8000adc <__aeabi_dcmplt>
 8009eba:	b110      	cbz	r0, 8009ec2 <_printf_float+0x8a>
 8009ebc:	232d      	movs	r3, #45	; 0x2d
 8009ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ec2:	4a9c      	ldr	r2, [pc, #624]	; (800a134 <_printf_float+0x2fc>)
 8009ec4:	4b9c      	ldr	r3, [pc, #624]	; (800a138 <_printf_float+0x300>)
 8009ec6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009eca:	bf8c      	ite	hi
 8009ecc:	4690      	movhi	r8, r2
 8009ece:	4698      	movls	r8, r3
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	f02b 0204 	bic.w	r2, fp, #4
 8009ed6:	6123      	str	r3, [r4, #16]
 8009ed8:	6022      	str	r2, [r4, #0]
 8009eda:	f04f 0900 	mov.w	r9, #0
 8009ede:	9700      	str	r7, [sp, #0]
 8009ee0:	4633      	mov	r3, r6
 8009ee2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	f000 f9e6 	bl	800a2b8 <_printf_common>
 8009eec:	3001      	adds	r0, #1
 8009eee:	f040 808d 	bne.w	800a00c <_printf_float+0x1d4>
 8009ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef6:	b00d      	add	sp, #52	; 0x34
 8009ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009efc:	4642      	mov	r2, r8
 8009efe:	464b      	mov	r3, r9
 8009f00:	4640      	mov	r0, r8
 8009f02:	4649      	mov	r1, r9
 8009f04:	f7f6 fe12 	bl	8000b2c <__aeabi_dcmpun>
 8009f08:	b110      	cbz	r0, 8009f10 <_printf_float+0xd8>
 8009f0a:	4a8c      	ldr	r2, [pc, #560]	; (800a13c <_printf_float+0x304>)
 8009f0c:	4b8c      	ldr	r3, [pc, #560]	; (800a140 <_printf_float+0x308>)
 8009f0e:	e7da      	b.n	8009ec6 <_printf_float+0x8e>
 8009f10:	6861      	ldr	r1, [r4, #4]
 8009f12:	1c4b      	adds	r3, r1, #1
 8009f14:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009f18:	a80a      	add	r0, sp, #40	; 0x28
 8009f1a:	d13e      	bne.n	8009f9a <_printf_float+0x162>
 8009f1c:	2306      	movs	r3, #6
 8009f1e:	6063      	str	r3, [r4, #4]
 8009f20:	2300      	movs	r3, #0
 8009f22:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009f26:	ab09      	add	r3, sp, #36	; 0x24
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	ec49 8b10 	vmov	d0, r8, r9
 8009f2e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f32:	6022      	str	r2, [r4, #0]
 8009f34:	f8cd a004 	str.w	sl, [sp, #4]
 8009f38:	6861      	ldr	r1, [r4, #4]
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	f7ff fee8 	bl	8009d10 <__cvt>
 8009f40:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009f44:	2b47      	cmp	r3, #71	; 0x47
 8009f46:	4680      	mov	r8, r0
 8009f48:	d109      	bne.n	8009f5e <_printf_float+0x126>
 8009f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f4c:	1cd8      	adds	r0, r3, #3
 8009f4e:	db02      	blt.n	8009f56 <_printf_float+0x11e>
 8009f50:	6862      	ldr	r2, [r4, #4]
 8009f52:	4293      	cmp	r3, r2
 8009f54:	dd47      	ble.n	8009fe6 <_printf_float+0x1ae>
 8009f56:	f1aa 0a02 	sub.w	sl, sl, #2
 8009f5a:	fa5f fa8a 	uxtb.w	sl, sl
 8009f5e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009f62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f64:	d824      	bhi.n	8009fb0 <_printf_float+0x178>
 8009f66:	3901      	subs	r1, #1
 8009f68:	4652      	mov	r2, sl
 8009f6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f6e:	9109      	str	r1, [sp, #36]	; 0x24
 8009f70:	f7ff ff2f 	bl	8009dd2 <__exponent>
 8009f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f76:	1813      	adds	r3, r2, r0
 8009f78:	2a01      	cmp	r2, #1
 8009f7a:	4681      	mov	r9, r0
 8009f7c:	6123      	str	r3, [r4, #16]
 8009f7e:	dc02      	bgt.n	8009f86 <_printf_float+0x14e>
 8009f80:	6822      	ldr	r2, [r4, #0]
 8009f82:	07d1      	lsls	r1, r2, #31
 8009f84:	d501      	bpl.n	8009f8a <_printf_float+0x152>
 8009f86:	3301      	adds	r3, #1
 8009f88:	6123      	str	r3, [r4, #16]
 8009f8a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d0a5      	beq.n	8009ede <_printf_float+0xa6>
 8009f92:	232d      	movs	r3, #45	; 0x2d
 8009f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f98:	e7a1      	b.n	8009ede <_printf_float+0xa6>
 8009f9a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009f9e:	f000 8177 	beq.w	800a290 <_printf_float+0x458>
 8009fa2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009fa6:	d1bb      	bne.n	8009f20 <_printf_float+0xe8>
 8009fa8:	2900      	cmp	r1, #0
 8009faa:	d1b9      	bne.n	8009f20 <_printf_float+0xe8>
 8009fac:	2301      	movs	r3, #1
 8009fae:	e7b6      	b.n	8009f1e <_printf_float+0xe6>
 8009fb0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009fb4:	d119      	bne.n	8009fea <_printf_float+0x1b2>
 8009fb6:	2900      	cmp	r1, #0
 8009fb8:	6863      	ldr	r3, [r4, #4]
 8009fba:	dd0c      	ble.n	8009fd6 <_printf_float+0x19e>
 8009fbc:	6121      	str	r1, [r4, #16]
 8009fbe:	b913      	cbnz	r3, 8009fc6 <_printf_float+0x18e>
 8009fc0:	6822      	ldr	r2, [r4, #0]
 8009fc2:	07d2      	lsls	r2, r2, #31
 8009fc4:	d502      	bpl.n	8009fcc <_printf_float+0x194>
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	440b      	add	r3, r1
 8009fca:	6123      	str	r3, [r4, #16]
 8009fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fce:	65a3      	str	r3, [r4, #88]	; 0x58
 8009fd0:	f04f 0900 	mov.w	r9, #0
 8009fd4:	e7d9      	b.n	8009f8a <_printf_float+0x152>
 8009fd6:	b913      	cbnz	r3, 8009fde <_printf_float+0x1a6>
 8009fd8:	6822      	ldr	r2, [r4, #0]
 8009fda:	07d0      	lsls	r0, r2, #31
 8009fdc:	d501      	bpl.n	8009fe2 <_printf_float+0x1aa>
 8009fde:	3302      	adds	r3, #2
 8009fe0:	e7f3      	b.n	8009fca <_printf_float+0x192>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e7f1      	b.n	8009fca <_printf_float+0x192>
 8009fe6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009fea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	db05      	blt.n	8009ffe <_printf_float+0x1c6>
 8009ff2:	6822      	ldr	r2, [r4, #0]
 8009ff4:	6123      	str	r3, [r4, #16]
 8009ff6:	07d1      	lsls	r1, r2, #31
 8009ff8:	d5e8      	bpl.n	8009fcc <_printf_float+0x194>
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	e7e5      	b.n	8009fca <_printf_float+0x192>
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	bfd4      	ite	le
 800a002:	f1c3 0302 	rsble	r3, r3, #2
 800a006:	2301      	movgt	r3, #1
 800a008:	4413      	add	r3, r2
 800a00a:	e7de      	b.n	8009fca <_printf_float+0x192>
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	055a      	lsls	r2, r3, #21
 800a010:	d407      	bmi.n	800a022 <_printf_float+0x1ea>
 800a012:	6923      	ldr	r3, [r4, #16]
 800a014:	4642      	mov	r2, r8
 800a016:	4631      	mov	r1, r6
 800a018:	4628      	mov	r0, r5
 800a01a:	47b8      	blx	r7
 800a01c:	3001      	adds	r0, #1
 800a01e:	d12b      	bne.n	800a078 <_printf_float+0x240>
 800a020:	e767      	b.n	8009ef2 <_printf_float+0xba>
 800a022:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a026:	f240 80dc 	bls.w	800a1e2 <_printf_float+0x3aa>
 800a02a:	2200      	movs	r2, #0
 800a02c:	2300      	movs	r3, #0
 800a02e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a032:	f7f6 fd49 	bl	8000ac8 <__aeabi_dcmpeq>
 800a036:	2800      	cmp	r0, #0
 800a038:	d033      	beq.n	800a0a2 <_printf_float+0x26a>
 800a03a:	2301      	movs	r3, #1
 800a03c:	4a41      	ldr	r2, [pc, #260]	; (800a144 <_printf_float+0x30c>)
 800a03e:	4631      	mov	r1, r6
 800a040:	4628      	mov	r0, r5
 800a042:	47b8      	blx	r7
 800a044:	3001      	adds	r0, #1
 800a046:	f43f af54 	beq.w	8009ef2 <_printf_float+0xba>
 800a04a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a04e:	429a      	cmp	r2, r3
 800a050:	db02      	blt.n	800a058 <_printf_float+0x220>
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	07d8      	lsls	r0, r3, #31
 800a056:	d50f      	bpl.n	800a078 <_printf_float+0x240>
 800a058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a05c:	4631      	mov	r1, r6
 800a05e:	4628      	mov	r0, r5
 800a060:	47b8      	blx	r7
 800a062:	3001      	adds	r0, #1
 800a064:	f43f af45 	beq.w	8009ef2 <_printf_float+0xba>
 800a068:	f04f 0800 	mov.w	r8, #0
 800a06c:	f104 091a 	add.w	r9, r4, #26
 800a070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a072:	3b01      	subs	r3, #1
 800a074:	4543      	cmp	r3, r8
 800a076:	dc09      	bgt.n	800a08c <_printf_float+0x254>
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	079b      	lsls	r3, r3, #30
 800a07c:	f100 8103 	bmi.w	800a286 <_printf_float+0x44e>
 800a080:	68e0      	ldr	r0, [r4, #12]
 800a082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a084:	4298      	cmp	r0, r3
 800a086:	bfb8      	it	lt
 800a088:	4618      	movlt	r0, r3
 800a08a:	e734      	b.n	8009ef6 <_printf_float+0xbe>
 800a08c:	2301      	movs	r3, #1
 800a08e:	464a      	mov	r2, r9
 800a090:	4631      	mov	r1, r6
 800a092:	4628      	mov	r0, r5
 800a094:	47b8      	blx	r7
 800a096:	3001      	adds	r0, #1
 800a098:	f43f af2b 	beq.w	8009ef2 <_printf_float+0xba>
 800a09c:	f108 0801 	add.w	r8, r8, #1
 800a0a0:	e7e6      	b.n	800a070 <_printf_float+0x238>
 800a0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	dc2b      	bgt.n	800a100 <_printf_float+0x2c8>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	4a26      	ldr	r2, [pc, #152]	; (800a144 <_printf_float+0x30c>)
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	47b8      	blx	r7
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	f43f af1d 	beq.w	8009ef2 <_printf_float+0xba>
 800a0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ba:	b923      	cbnz	r3, 800a0c6 <_printf_float+0x28e>
 800a0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0be:	b913      	cbnz	r3, 800a0c6 <_printf_float+0x28e>
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	07d9      	lsls	r1, r3, #31
 800a0c4:	d5d8      	bpl.n	800a078 <_printf_float+0x240>
 800a0c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0ca:	4631      	mov	r1, r6
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	47b8      	blx	r7
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	f43f af0e 	beq.w	8009ef2 <_printf_float+0xba>
 800a0d6:	f04f 0900 	mov.w	r9, #0
 800a0da:	f104 0a1a 	add.w	sl, r4, #26
 800a0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e0:	425b      	negs	r3, r3
 800a0e2:	454b      	cmp	r3, r9
 800a0e4:	dc01      	bgt.n	800a0ea <_printf_float+0x2b2>
 800a0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e8:	e794      	b.n	800a014 <_printf_float+0x1dc>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	4652      	mov	r2, sl
 800a0ee:	4631      	mov	r1, r6
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b8      	blx	r7
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	f43f aefc 	beq.w	8009ef2 <_printf_float+0xba>
 800a0fa:	f109 0901 	add.w	r9, r9, #1
 800a0fe:	e7ee      	b.n	800a0de <_printf_float+0x2a6>
 800a100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a102:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a104:	429a      	cmp	r2, r3
 800a106:	bfa8      	it	ge
 800a108:	461a      	movge	r2, r3
 800a10a:	2a00      	cmp	r2, #0
 800a10c:	4691      	mov	r9, r2
 800a10e:	dd07      	ble.n	800a120 <_printf_float+0x2e8>
 800a110:	4613      	mov	r3, r2
 800a112:	4631      	mov	r1, r6
 800a114:	4642      	mov	r2, r8
 800a116:	4628      	mov	r0, r5
 800a118:	47b8      	blx	r7
 800a11a:	3001      	adds	r0, #1
 800a11c:	f43f aee9 	beq.w	8009ef2 <_printf_float+0xba>
 800a120:	f104 031a 	add.w	r3, r4, #26
 800a124:	f04f 0b00 	mov.w	fp, #0
 800a128:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a12c:	9306      	str	r3, [sp, #24]
 800a12e:	e015      	b.n	800a15c <_printf_float+0x324>
 800a130:	7fefffff 	.word	0x7fefffff
 800a134:	0800cf88 	.word	0x0800cf88
 800a138:	0800cf84 	.word	0x0800cf84
 800a13c:	0800cf90 	.word	0x0800cf90
 800a140:	0800cf8c 	.word	0x0800cf8c
 800a144:	0800cf94 	.word	0x0800cf94
 800a148:	2301      	movs	r3, #1
 800a14a:	9a06      	ldr	r2, [sp, #24]
 800a14c:	4631      	mov	r1, r6
 800a14e:	4628      	mov	r0, r5
 800a150:	47b8      	blx	r7
 800a152:	3001      	adds	r0, #1
 800a154:	f43f aecd 	beq.w	8009ef2 <_printf_float+0xba>
 800a158:	f10b 0b01 	add.w	fp, fp, #1
 800a15c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a160:	ebaa 0309 	sub.w	r3, sl, r9
 800a164:	455b      	cmp	r3, fp
 800a166:	dcef      	bgt.n	800a148 <_printf_float+0x310>
 800a168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a16c:	429a      	cmp	r2, r3
 800a16e:	44d0      	add	r8, sl
 800a170:	db15      	blt.n	800a19e <_printf_float+0x366>
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	07da      	lsls	r2, r3, #31
 800a176:	d412      	bmi.n	800a19e <_printf_float+0x366>
 800a178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a17a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a17c:	eba3 020a 	sub.w	r2, r3, sl
 800a180:	eba3 0a01 	sub.w	sl, r3, r1
 800a184:	4592      	cmp	sl, r2
 800a186:	bfa8      	it	ge
 800a188:	4692      	movge	sl, r2
 800a18a:	f1ba 0f00 	cmp.w	sl, #0
 800a18e:	dc0e      	bgt.n	800a1ae <_printf_float+0x376>
 800a190:	f04f 0800 	mov.w	r8, #0
 800a194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a198:	f104 091a 	add.w	r9, r4, #26
 800a19c:	e019      	b.n	800a1d2 <_printf_float+0x39a>
 800a19e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1a2:	4631      	mov	r1, r6
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	47b8      	blx	r7
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	d1e5      	bne.n	800a178 <_printf_float+0x340>
 800a1ac:	e6a1      	b.n	8009ef2 <_printf_float+0xba>
 800a1ae:	4653      	mov	r3, sl
 800a1b0:	4642      	mov	r2, r8
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	47b8      	blx	r7
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	d1e9      	bne.n	800a190 <_printf_float+0x358>
 800a1bc:	e699      	b.n	8009ef2 <_printf_float+0xba>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	464a      	mov	r2, r9
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	47b8      	blx	r7
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	f43f ae92 	beq.w	8009ef2 <_printf_float+0xba>
 800a1ce:	f108 0801 	add.w	r8, r8, #1
 800a1d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1d6:	1a9b      	subs	r3, r3, r2
 800a1d8:	eba3 030a 	sub.w	r3, r3, sl
 800a1dc:	4543      	cmp	r3, r8
 800a1de:	dcee      	bgt.n	800a1be <_printf_float+0x386>
 800a1e0:	e74a      	b.n	800a078 <_printf_float+0x240>
 800a1e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1e4:	2a01      	cmp	r2, #1
 800a1e6:	dc01      	bgt.n	800a1ec <_printf_float+0x3b4>
 800a1e8:	07db      	lsls	r3, r3, #31
 800a1ea:	d53a      	bpl.n	800a262 <_printf_float+0x42a>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	4642      	mov	r2, r8
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	47b8      	blx	r7
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	f43f ae7b 	beq.w	8009ef2 <_printf_float+0xba>
 800a1fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a200:	4631      	mov	r1, r6
 800a202:	4628      	mov	r0, r5
 800a204:	47b8      	blx	r7
 800a206:	3001      	adds	r0, #1
 800a208:	f108 0801 	add.w	r8, r8, #1
 800a20c:	f43f ae71 	beq.w	8009ef2 <_printf_float+0xba>
 800a210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a212:	2200      	movs	r2, #0
 800a214:	f103 3aff 	add.w	sl, r3, #4294967295
 800a218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a21c:	2300      	movs	r3, #0
 800a21e:	f7f6 fc53 	bl	8000ac8 <__aeabi_dcmpeq>
 800a222:	b9c8      	cbnz	r0, 800a258 <_printf_float+0x420>
 800a224:	4653      	mov	r3, sl
 800a226:	4642      	mov	r2, r8
 800a228:	4631      	mov	r1, r6
 800a22a:	4628      	mov	r0, r5
 800a22c:	47b8      	blx	r7
 800a22e:	3001      	adds	r0, #1
 800a230:	d10e      	bne.n	800a250 <_printf_float+0x418>
 800a232:	e65e      	b.n	8009ef2 <_printf_float+0xba>
 800a234:	2301      	movs	r3, #1
 800a236:	4652      	mov	r2, sl
 800a238:	4631      	mov	r1, r6
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b8      	blx	r7
 800a23e:	3001      	adds	r0, #1
 800a240:	f43f ae57 	beq.w	8009ef2 <_printf_float+0xba>
 800a244:	f108 0801 	add.w	r8, r8, #1
 800a248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a24a:	3b01      	subs	r3, #1
 800a24c:	4543      	cmp	r3, r8
 800a24e:	dcf1      	bgt.n	800a234 <_printf_float+0x3fc>
 800a250:	464b      	mov	r3, r9
 800a252:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a256:	e6de      	b.n	800a016 <_printf_float+0x1de>
 800a258:	f04f 0800 	mov.w	r8, #0
 800a25c:	f104 0a1a 	add.w	sl, r4, #26
 800a260:	e7f2      	b.n	800a248 <_printf_float+0x410>
 800a262:	2301      	movs	r3, #1
 800a264:	e7df      	b.n	800a226 <_printf_float+0x3ee>
 800a266:	2301      	movs	r3, #1
 800a268:	464a      	mov	r2, r9
 800a26a:	4631      	mov	r1, r6
 800a26c:	4628      	mov	r0, r5
 800a26e:	47b8      	blx	r7
 800a270:	3001      	adds	r0, #1
 800a272:	f43f ae3e 	beq.w	8009ef2 <_printf_float+0xba>
 800a276:	f108 0801 	add.w	r8, r8, #1
 800a27a:	68e3      	ldr	r3, [r4, #12]
 800a27c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a27e:	1a9b      	subs	r3, r3, r2
 800a280:	4543      	cmp	r3, r8
 800a282:	dcf0      	bgt.n	800a266 <_printf_float+0x42e>
 800a284:	e6fc      	b.n	800a080 <_printf_float+0x248>
 800a286:	f04f 0800 	mov.w	r8, #0
 800a28a:	f104 0919 	add.w	r9, r4, #25
 800a28e:	e7f4      	b.n	800a27a <_printf_float+0x442>
 800a290:	2900      	cmp	r1, #0
 800a292:	f43f ae8b 	beq.w	8009fac <_printf_float+0x174>
 800a296:	2300      	movs	r3, #0
 800a298:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a29c:	ab09      	add	r3, sp, #36	; 0x24
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	ec49 8b10 	vmov	d0, r8, r9
 800a2a4:	6022      	str	r2, [r4, #0]
 800a2a6:	f8cd a004 	str.w	sl, [sp, #4]
 800a2aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f7ff fd2e 	bl	8009d10 <__cvt>
 800a2b4:	4680      	mov	r8, r0
 800a2b6:	e648      	b.n	8009f4a <_printf_float+0x112>

0800a2b8 <_printf_common>:
 800a2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2bc:	4691      	mov	r9, r2
 800a2be:	461f      	mov	r7, r3
 800a2c0:	688a      	ldr	r2, [r1, #8]
 800a2c2:	690b      	ldr	r3, [r1, #16]
 800a2c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	bfb8      	it	lt
 800a2cc:	4613      	movlt	r3, r2
 800a2ce:	f8c9 3000 	str.w	r3, [r9]
 800a2d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	460c      	mov	r4, r1
 800a2da:	b112      	cbz	r2, 800a2e2 <_printf_common+0x2a>
 800a2dc:	3301      	adds	r3, #1
 800a2de:	f8c9 3000 	str.w	r3, [r9]
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	0699      	lsls	r1, r3, #26
 800a2e6:	bf42      	ittt	mi
 800a2e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a2ec:	3302      	addmi	r3, #2
 800a2ee:	f8c9 3000 	strmi.w	r3, [r9]
 800a2f2:	6825      	ldr	r5, [r4, #0]
 800a2f4:	f015 0506 	ands.w	r5, r5, #6
 800a2f8:	d107      	bne.n	800a30a <_printf_common+0x52>
 800a2fa:	f104 0a19 	add.w	sl, r4, #25
 800a2fe:	68e3      	ldr	r3, [r4, #12]
 800a300:	f8d9 2000 	ldr.w	r2, [r9]
 800a304:	1a9b      	subs	r3, r3, r2
 800a306:	42ab      	cmp	r3, r5
 800a308:	dc28      	bgt.n	800a35c <_printf_common+0xa4>
 800a30a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a30e:	6822      	ldr	r2, [r4, #0]
 800a310:	3300      	adds	r3, #0
 800a312:	bf18      	it	ne
 800a314:	2301      	movne	r3, #1
 800a316:	0692      	lsls	r2, r2, #26
 800a318:	d42d      	bmi.n	800a376 <_printf_common+0xbe>
 800a31a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a31e:	4639      	mov	r1, r7
 800a320:	4630      	mov	r0, r6
 800a322:	47c0      	blx	r8
 800a324:	3001      	adds	r0, #1
 800a326:	d020      	beq.n	800a36a <_printf_common+0xb2>
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	68e5      	ldr	r5, [r4, #12]
 800a32c:	f8d9 2000 	ldr.w	r2, [r9]
 800a330:	f003 0306 	and.w	r3, r3, #6
 800a334:	2b04      	cmp	r3, #4
 800a336:	bf08      	it	eq
 800a338:	1aad      	subeq	r5, r5, r2
 800a33a:	68a3      	ldr	r3, [r4, #8]
 800a33c:	6922      	ldr	r2, [r4, #16]
 800a33e:	bf0c      	ite	eq
 800a340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a344:	2500      	movne	r5, #0
 800a346:	4293      	cmp	r3, r2
 800a348:	bfc4      	itt	gt
 800a34a:	1a9b      	subgt	r3, r3, r2
 800a34c:	18ed      	addgt	r5, r5, r3
 800a34e:	f04f 0900 	mov.w	r9, #0
 800a352:	341a      	adds	r4, #26
 800a354:	454d      	cmp	r5, r9
 800a356:	d11a      	bne.n	800a38e <_printf_common+0xd6>
 800a358:	2000      	movs	r0, #0
 800a35a:	e008      	b.n	800a36e <_printf_common+0xb6>
 800a35c:	2301      	movs	r3, #1
 800a35e:	4652      	mov	r2, sl
 800a360:	4639      	mov	r1, r7
 800a362:	4630      	mov	r0, r6
 800a364:	47c0      	blx	r8
 800a366:	3001      	adds	r0, #1
 800a368:	d103      	bne.n	800a372 <_printf_common+0xba>
 800a36a:	f04f 30ff 	mov.w	r0, #4294967295
 800a36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a372:	3501      	adds	r5, #1
 800a374:	e7c3      	b.n	800a2fe <_printf_common+0x46>
 800a376:	18e1      	adds	r1, r4, r3
 800a378:	1c5a      	adds	r2, r3, #1
 800a37a:	2030      	movs	r0, #48	; 0x30
 800a37c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a380:	4422      	add	r2, r4
 800a382:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a386:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a38a:	3302      	adds	r3, #2
 800a38c:	e7c5      	b.n	800a31a <_printf_common+0x62>
 800a38e:	2301      	movs	r3, #1
 800a390:	4622      	mov	r2, r4
 800a392:	4639      	mov	r1, r7
 800a394:	4630      	mov	r0, r6
 800a396:	47c0      	blx	r8
 800a398:	3001      	adds	r0, #1
 800a39a:	d0e6      	beq.n	800a36a <_printf_common+0xb2>
 800a39c:	f109 0901 	add.w	r9, r9, #1
 800a3a0:	e7d8      	b.n	800a354 <_printf_common+0x9c>
	...

0800a3a4 <_printf_i>:
 800a3a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a3ac:	460c      	mov	r4, r1
 800a3ae:	7e09      	ldrb	r1, [r1, #24]
 800a3b0:	b085      	sub	sp, #20
 800a3b2:	296e      	cmp	r1, #110	; 0x6e
 800a3b4:	4617      	mov	r7, r2
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	4698      	mov	r8, r3
 800a3ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3bc:	f000 80b3 	beq.w	800a526 <_printf_i+0x182>
 800a3c0:	d822      	bhi.n	800a408 <_printf_i+0x64>
 800a3c2:	2963      	cmp	r1, #99	; 0x63
 800a3c4:	d036      	beq.n	800a434 <_printf_i+0x90>
 800a3c6:	d80a      	bhi.n	800a3de <_printf_i+0x3a>
 800a3c8:	2900      	cmp	r1, #0
 800a3ca:	f000 80b9 	beq.w	800a540 <_printf_i+0x19c>
 800a3ce:	2958      	cmp	r1, #88	; 0x58
 800a3d0:	f000 8083 	beq.w	800a4da <_printf_i+0x136>
 800a3d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a3dc:	e032      	b.n	800a444 <_printf_i+0xa0>
 800a3de:	2964      	cmp	r1, #100	; 0x64
 800a3e0:	d001      	beq.n	800a3e6 <_printf_i+0x42>
 800a3e2:	2969      	cmp	r1, #105	; 0x69
 800a3e4:	d1f6      	bne.n	800a3d4 <_printf_i+0x30>
 800a3e6:	6820      	ldr	r0, [r4, #0]
 800a3e8:	6813      	ldr	r3, [r2, #0]
 800a3ea:	0605      	lsls	r5, r0, #24
 800a3ec:	f103 0104 	add.w	r1, r3, #4
 800a3f0:	d52a      	bpl.n	800a448 <_printf_i+0xa4>
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6011      	str	r1, [r2, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	da03      	bge.n	800a402 <_printf_i+0x5e>
 800a3fa:	222d      	movs	r2, #45	; 0x2d
 800a3fc:	425b      	negs	r3, r3
 800a3fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a402:	486f      	ldr	r0, [pc, #444]	; (800a5c0 <_printf_i+0x21c>)
 800a404:	220a      	movs	r2, #10
 800a406:	e039      	b.n	800a47c <_printf_i+0xd8>
 800a408:	2973      	cmp	r1, #115	; 0x73
 800a40a:	f000 809d 	beq.w	800a548 <_printf_i+0x1a4>
 800a40e:	d808      	bhi.n	800a422 <_printf_i+0x7e>
 800a410:	296f      	cmp	r1, #111	; 0x6f
 800a412:	d020      	beq.n	800a456 <_printf_i+0xb2>
 800a414:	2970      	cmp	r1, #112	; 0x70
 800a416:	d1dd      	bne.n	800a3d4 <_printf_i+0x30>
 800a418:	6823      	ldr	r3, [r4, #0]
 800a41a:	f043 0320 	orr.w	r3, r3, #32
 800a41e:	6023      	str	r3, [r4, #0]
 800a420:	e003      	b.n	800a42a <_printf_i+0x86>
 800a422:	2975      	cmp	r1, #117	; 0x75
 800a424:	d017      	beq.n	800a456 <_printf_i+0xb2>
 800a426:	2978      	cmp	r1, #120	; 0x78
 800a428:	d1d4      	bne.n	800a3d4 <_printf_i+0x30>
 800a42a:	2378      	movs	r3, #120	; 0x78
 800a42c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a430:	4864      	ldr	r0, [pc, #400]	; (800a5c4 <_printf_i+0x220>)
 800a432:	e055      	b.n	800a4e0 <_printf_i+0x13c>
 800a434:	6813      	ldr	r3, [r2, #0]
 800a436:	1d19      	adds	r1, r3, #4
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6011      	str	r1, [r2, #0]
 800a43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a444:	2301      	movs	r3, #1
 800a446:	e08c      	b.n	800a562 <_printf_i+0x1be>
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	6011      	str	r1, [r2, #0]
 800a44c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a450:	bf18      	it	ne
 800a452:	b21b      	sxthne	r3, r3
 800a454:	e7cf      	b.n	800a3f6 <_printf_i+0x52>
 800a456:	6813      	ldr	r3, [r2, #0]
 800a458:	6825      	ldr	r5, [r4, #0]
 800a45a:	1d18      	adds	r0, r3, #4
 800a45c:	6010      	str	r0, [r2, #0]
 800a45e:	0628      	lsls	r0, r5, #24
 800a460:	d501      	bpl.n	800a466 <_printf_i+0xc2>
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	e002      	b.n	800a46c <_printf_i+0xc8>
 800a466:	0668      	lsls	r0, r5, #25
 800a468:	d5fb      	bpl.n	800a462 <_printf_i+0xbe>
 800a46a:	881b      	ldrh	r3, [r3, #0]
 800a46c:	4854      	ldr	r0, [pc, #336]	; (800a5c0 <_printf_i+0x21c>)
 800a46e:	296f      	cmp	r1, #111	; 0x6f
 800a470:	bf14      	ite	ne
 800a472:	220a      	movne	r2, #10
 800a474:	2208      	moveq	r2, #8
 800a476:	2100      	movs	r1, #0
 800a478:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a47c:	6865      	ldr	r5, [r4, #4]
 800a47e:	60a5      	str	r5, [r4, #8]
 800a480:	2d00      	cmp	r5, #0
 800a482:	f2c0 8095 	blt.w	800a5b0 <_printf_i+0x20c>
 800a486:	6821      	ldr	r1, [r4, #0]
 800a488:	f021 0104 	bic.w	r1, r1, #4
 800a48c:	6021      	str	r1, [r4, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d13d      	bne.n	800a50e <_printf_i+0x16a>
 800a492:	2d00      	cmp	r5, #0
 800a494:	f040 808e 	bne.w	800a5b4 <_printf_i+0x210>
 800a498:	4665      	mov	r5, ip
 800a49a:	2a08      	cmp	r2, #8
 800a49c:	d10b      	bne.n	800a4b6 <_printf_i+0x112>
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	07db      	lsls	r3, r3, #31
 800a4a2:	d508      	bpl.n	800a4b6 <_printf_i+0x112>
 800a4a4:	6923      	ldr	r3, [r4, #16]
 800a4a6:	6862      	ldr	r2, [r4, #4]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	bfde      	ittt	le
 800a4ac:	2330      	movle	r3, #48	; 0x30
 800a4ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4b6:	ebac 0305 	sub.w	r3, ip, r5
 800a4ba:	6123      	str	r3, [r4, #16]
 800a4bc:	f8cd 8000 	str.w	r8, [sp]
 800a4c0:	463b      	mov	r3, r7
 800a4c2:	aa03      	add	r2, sp, #12
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	f7ff fef6 	bl	800a2b8 <_printf_common>
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	d14d      	bne.n	800a56c <_printf_i+0x1c8>
 800a4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d4:	b005      	add	sp, #20
 800a4d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4da:	4839      	ldr	r0, [pc, #228]	; (800a5c0 <_printf_i+0x21c>)
 800a4dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a4e0:	6813      	ldr	r3, [r2, #0]
 800a4e2:	6821      	ldr	r1, [r4, #0]
 800a4e4:	1d1d      	adds	r5, r3, #4
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6015      	str	r5, [r2, #0]
 800a4ea:	060a      	lsls	r2, r1, #24
 800a4ec:	d50b      	bpl.n	800a506 <_printf_i+0x162>
 800a4ee:	07ca      	lsls	r2, r1, #31
 800a4f0:	bf44      	itt	mi
 800a4f2:	f041 0120 	orrmi.w	r1, r1, #32
 800a4f6:	6021      	strmi	r1, [r4, #0]
 800a4f8:	b91b      	cbnz	r3, 800a502 <_printf_i+0x15e>
 800a4fa:	6822      	ldr	r2, [r4, #0]
 800a4fc:	f022 0220 	bic.w	r2, r2, #32
 800a500:	6022      	str	r2, [r4, #0]
 800a502:	2210      	movs	r2, #16
 800a504:	e7b7      	b.n	800a476 <_printf_i+0xd2>
 800a506:	064d      	lsls	r5, r1, #25
 800a508:	bf48      	it	mi
 800a50a:	b29b      	uxthmi	r3, r3
 800a50c:	e7ef      	b.n	800a4ee <_printf_i+0x14a>
 800a50e:	4665      	mov	r5, ip
 800a510:	fbb3 f1f2 	udiv	r1, r3, r2
 800a514:	fb02 3311 	mls	r3, r2, r1, r3
 800a518:	5cc3      	ldrb	r3, [r0, r3]
 800a51a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a51e:	460b      	mov	r3, r1
 800a520:	2900      	cmp	r1, #0
 800a522:	d1f5      	bne.n	800a510 <_printf_i+0x16c>
 800a524:	e7b9      	b.n	800a49a <_printf_i+0xf6>
 800a526:	6813      	ldr	r3, [r2, #0]
 800a528:	6825      	ldr	r5, [r4, #0]
 800a52a:	6961      	ldr	r1, [r4, #20]
 800a52c:	1d18      	adds	r0, r3, #4
 800a52e:	6010      	str	r0, [r2, #0]
 800a530:	0628      	lsls	r0, r5, #24
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	d501      	bpl.n	800a53a <_printf_i+0x196>
 800a536:	6019      	str	r1, [r3, #0]
 800a538:	e002      	b.n	800a540 <_printf_i+0x19c>
 800a53a:	066a      	lsls	r2, r5, #25
 800a53c:	d5fb      	bpl.n	800a536 <_printf_i+0x192>
 800a53e:	8019      	strh	r1, [r3, #0]
 800a540:	2300      	movs	r3, #0
 800a542:	6123      	str	r3, [r4, #16]
 800a544:	4665      	mov	r5, ip
 800a546:	e7b9      	b.n	800a4bc <_printf_i+0x118>
 800a548:	6813      	ldr	r3, [r2, #0]
 800a54a:	1d19      	adds	r1, r3, #4
 800a54c:	6011      	str	r1, [r2, #0]
 800a54e:	681d      	ldr	r5, [r3, #0]
 800a550:	6862      	ldr	r2, [r4, #4]
 800a552:	2100      	movs	r1, #0
 800a554:	4628      	mov	r0, r5
 800a556:	f7f5 fe43 	bl	80001e0 <memchr>
 800a55a:	b108      	cbz	r0, 800a560 <_printf_i+0x1bc>
 800a55c:	1b40      	subs	r0, r0, r5
 800a55e:	6060      	str	r0, [r4, #4]
 800a560:	6863      	ldr	r3, [r4, #4]
 800a562:	6123      	str	r3, [r4, #16]
 800a564:	2300      	movs	r3, #0
 800a566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a56a:	e7a7      	b.n	800a4bc <_printf_i+0x118>
 800a56c:	6923      	ldr	r3, [r4, #16]
 800a56e:	462a      	mov	r2, r5
 800a570:	4639      	mov	r1, r7
 800a572:	4630      	mov	r0, r6
 800a574:	47c0      	blx	r8
 800a576:	3001      	adds	r0, #1
 800a578:	d0aa      	beq.n	800a4d0 <_printf_i+0x12c>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	079b      	lsls	r3, r3, #30
 800a57e:	d413      	bmi.n	800a5a8 <_printf_i+0x204>
 800a580:	68e0      	ldr	r0, [r4, #12]
 800a582:	9b03      	ldr	r3, [sp, #12]
 800a584:	4298      	cmp	r0, r3
 800a586:	bfb8      	it	lt
 800a588:	4618      	movlt	r0, r3
 800a58a:	e7a3      	b.n	800a4d4 <_printf_i+0x130>
 800a58c:	2301      	movs	r3, #1
 800a58e:	464a      	mov	r2, r9
 800a590:	4639      	mov	r1, r7
 800a592:	4630      	mov	r0, r6
 800a594:	47c0      	blx	r8
 800a596:	3001      	adds	r0, #1
 800a598:	d09a      	beq.n	800a4d0 <_printf_i+0x12c>
 800a59a:	3501      	adds	r5, #1
 800a59c:	68e3      	ldr	r3, [r4, #12]
 800a59e:	9a03      	ldr	r2, [sp, #12]
 800a5a0:	1a9b      	subs	r3, r3, r2
 800a5a2:	42ab      	cmp	r3, r5
 800a5a4:	dcf2      	bgt.n	800a58c <_printf_i+0x1e8>
 800a5a6:	e7eb      	b.n	800a580 <_printf_i+0x1dc>
 800a5a8:	2500      	movs	r5, #0
 800a5aa:	f104 0919 	add.w	r9, r4, #25
 800a5ae:	e7f5      	b.n	800a59c <_printf_i+0x1f8>
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1ac      	bne.n	800a50e <_printf_i+0x16a>
 800a5b4:	7803      	ldrb	r3, [r0, #0]
 800a5b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5be:	e76c      	b.n	800a49a <_printf_i+0xf6>
 800a5c0:	0800cf96 	.word	0x0800cf96
 800a5c4:	0800cfa7 	.word	0x0800cfa7

0800a5c8 <siprintf>:
 800a5c8:	b40e      	push	{r1, r2, r3}
 800a5ca:	b500      	push	{lr}
 800a5cc:	b09c      	sub	sp, #112	; 0x70
 800a5ce:	ab1d      	add	r3, sp, #116	; 0x74
 800a5d0:	9002      	str	r0, [sp, #8]
 800a5d2:	9006      	str	r0, [sp, #24]
 800a5d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5d8:	4809      	ldr	r0, [pc, #36]	; (800a600 <siprintf+0x38>)
 800a5da:	9107      	str	r1, [sp, #28]
 800a5dc:	9104      	str	r1, [sp, #16]
 800a5de:	4909      	ldr	r1, [pc, #36]	; (800a604 <siprintf+0x3c>)
 800a5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5e4:	9105      	str	r1, [sp, #20]
 800a5e6:	6800      	ldr	r0, [r0, #0]
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	a902      	add	r1, sp, #8
 800a5ec:	f001 fa5c 	bl	800baa8 <_svfiprintf_r>
 800a5f0:	9b02      	ldr	r3, [sp, #8]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	701a      	strb	r2, [r3, #0]
 800a5f6:	b01c      	add	sp, #112	; 0x70
 800a5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5fc:	b003      	add	sp, #12
 800a5fe:	4770      	bx	lr
 800a600:	2000017c 	.word	0x2000017c
 800a604:	ffff0208 	.word	0xffff0208

0800a608 <quorem>:
 800a608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60c:	6903      	ldr	r3, [r0, #16]
 800a60e:	690c      	ldr	r4, [r1, #16]
 800a610:	42a3      	cmp	r3, r4
 800a612:	4680      	mov	r8, r0
 800a614:	f2c0 8082 	blt.w	800a71c <quorem+0x114>
 800a618:	3c01      	subs	r4, #1
 800a61a:	f101 0714 	add.w	r7, r1, #20
 800a61e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a622:	f100 0614 	add.w	r6, r0, #20
 800a626:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a62a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a62e:	eb06 030c 	add.w	r3, r6, ip
 800a632:	3501      	adds	r5, #1
 800a634:	eb07 090c 	add.w	r9, r7, ip
 800a638:	9301      	str	r3, [sp, #4]
 800a63a:	fbb0 f5f5 	udiv	r5, r0, r5
 800a63e:	b395      	cbz	r5, 800a6a6 <quorem+0x9e>
 800a640:	f04f 0a00 	mov.w	sl, #0
 800a644:	4638      	mov	r0, r7
 800a646:	46b6      	mov	lr, r6
 800a648:	46d3      	mov	fp, sl
 800a64a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a64e:	b293      	uxth	r3, r2
 800a650:	fb05 a303 	mla	r3, r5, r3, sl
 800a654:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a658:	b29b      	uxth	r3, r3
 800a65a:	ebab 0303 	sub.w	r3, fp, r3
 800a65e:	0c12      	lsrs	r2, r2, #16
 800a660:	f8de b000 	ldr.w	fp, [lr]
 800a664:	fb05 a202 	mla	r2, r5, r2, sl
 800a668:	fa13 f38b 	uxtah	r3, r3, fp
 800a66c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a670:	fa1f fb82 	uxth.w	fp, r2
 800a674:	f8de 2000 	ldr.w	r2, [lr]
 800a678:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a67c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a680:	b29b      	uxth	r3, r3
 800a682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a686:	4581      	cmp	r9, r0
 800a688:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a68c:	f84e 3b04 	str.w	r3, [lr], #4
 800a690:	d2db      	bcs.n	800a64a <quorem+0x42>
 800a692:	f856 300c 	ldr.w	r3, [r6, ip]
 800a696:	b933      	cbnz	r3, 800a6a6 <quorem+0x9e>
 800a698:	9b01      	ldr	r3, [sp, #4]
 800a69a:	3b04      	subs	r3, #4
 800a69c:	429e      	cmp	r6, r3
 800a69e:	461a      	mov	r2, r3
 800a6a0:	d330      	bcc.n	800a704 <quorem+0xfc>
 800a6a2:	f8c8 4010 	str.w	r4, [r8, #16]
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	f001 f828 	bl	800b6fc <__mcmp>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	db25      	blt.n	800a6fc <quorem+0xf4>
 800a6b0:	3501      	adds	r5, #1
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f04f 0c00 	mov.w	ip, #0
 800a6b8:	f857 2b04 	ldr.w	r2, [r7], #4
 800a6bc:	f8d0 e000 	ldr.w	lr, [r0]
 800a6c0:	b293      	uxth	r3, r2
 800a6c2:	ebac 0303 	sub.w	r3, ip, r3
 800a6c6:	0c12      	lsrs	r2, r2, #16
 800a6c8:	fa13 f38e 	uxtah	r3, r3, lr
 800a6cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6da:	45b9      	cmp	r9, r7
 800a6dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a6e0:	f840 3b04 	str.w	r3, [r0], #4
 800a6e4:	d2e8      	bcs.n	800a6b8 <quorem+0xb0>
 800a6e6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a6ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a6ee:	b92a      	cbnz	r2, 800a6fc <quorem+0xf4>
 800a6f0:	3b04      	subs	r3, #4
 800a6f2:	429e      	cmp	r6, r3
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	d30b      	bcc.n	800a710 <quorem+0x108>
 800a6f8:	f8c8 4010 	str.w	r4, [r8, #16]
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	b003      	add	sp, #12
 800a700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a704:	6812      	ldr	r2, [r2, #0]
 800a706:	3b04      	subs	r3, #4
 800a708:	2a00      	cmp	r2, #0
 800a70a:	d1ca      	bne.n	800a6a2 <quorem+0x9a>
 800a70c:	3c01      	subs	r4, #1
 800a70e:	e7c5      	b.n	800a69c <quorem+0x94>
 800a710:	6812      	ldr	r2, [r2, #0]
 800a712:	3b04      	subs	r3, #4
 800a714:	2a00      	cmp	r2, #0
 800a716:	d1ef      	bne.n	800a6f8 <quorem+0xf0>
 800a718:	3c01      	subs	r4, #1
 800a71a:	e7ea      	b.n	800a6f2 <quorem+0xea>
 800a71c:	2000      	movs	r0, #0
 800a71e:	e7ee      	b.n	800a6fe <quorem+0xf6>

0800a720 <_dtoa_r>:
 800a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	ec57 6b10 	vmov	r6, r7, d0
 800a728:	b097      	sub	sp, #92	; 0x5c
 800a72a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a72c:	9106      	str	r1, [sp, #24]
 800a72e:	4604      	mov	r4, r0
 800a730:	920b      	str	r2, [sp, #44]	; 0x2c
 800a732:	9312      	str	r3, [sp, #72]	; 0x48
 800a734:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a738:	e9cd 6700 	strd	r6, r7, [sp]
 800a73c:	b93d      	cbnz	r5, 800a74e <_dtoa_r+0x2e>
 800a73e:	2010      	movs	r0, #16
 800a740:	f000 fdb4 	bl	800b2ac <malloc>
 800a744:	6260      	str	r0, [r4, #36]	; 0x24
 800a746:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a74a:	6005      	str	r5, [r0, #0]
 800a74c:	60c5      	str	r5, [r0, #12]
 800a74e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a750:	6819      	ldr	r1, [r3, #0]
 800a752:	b151      	cbz	r1, 800a76a <_dtoa_r+0x4a>
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	604a      	str	r2, [r1, #4]
 800a758:	2301      	movs	r3, #1
 800a75a:	4093      	lsls	r3, r2
 800a75c:	608b      	str	r3, [r1, #8]
 800a75e:	4620      	mov	r0, r4
 800a760:	f000 fdeb 	bl	800b33a <_Bfree>
 800a764:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a766:	2200      	movs	r2, #0
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	1e3b      	subs	r3, r7, #0
 800a76c:	bfbb      	ittet	lt
 800a76e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a772:	9301      	strlt	r3, [sp, #4]
 800a774:	2300      	movge	r3, #0
 800a776:	2201      	movlt	r2, #1
 800a778:	bfac      	ite	ge
 800a77a:	f8c8 3000 	strge.w	r3, [r8]
 800a77e:	f8c8 2000 	strlt.w	r2, [r8]
 800a782:	4baf      	ldr	r3, [pc, #700]	; (800aa40 <_dtoa_r+0x320>)
 800a784:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a788:	ea33 0308 	bics.w	r3, r3, r8
 800a78c:	d114      	bne.n	800a7b8 <_dtoa_r+0x98>
 800a78e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a790:	f242 730f 	movw	r3, #9999	; 0x270f
 800a794:	6013      	str	r3, [r2, #0]
 800a796:	9b00      	ldr	r3, [sp, #0]
 800a798:	b923      	cbnz	r3, 800a7a4 <_dtoa_r+0x84>
 800a79a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	f000 8542 	beq.w	800b228 <_dtoa_r+0xb08>
 800a7a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800aa54 <_dtoa_r+0x334>
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f000 8544 	beq.w	800b238 <_dtoa_r+0xb18>
 800a7b0:	f10b 0303 	add.w	r3, fp, #3
 800a7b4:	f000 bd3e 	b.w	800b234 <_dtoa_r+0xb14>
 800a7b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	2300      	movs	r3, #0
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	f7f6 f980 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7c8:	4681      	mov	r9, r0
 800a7ca:	b168      	cbz	r0, 800a7e8 <_dtoa_r+0xc8>
 800a7cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	6013      	str	r3, [r2, #0]
 800a7d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 8524 	beq.w	800b222 <_dtoa_r+0xb02>
 800a7da:	4b9a      	ldr	r3, [pc, #616]	; (800aa44 <_dtoa_r+0x324>)
 800a7dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7de:	f103 3bff 	add.w	fp, r3, #4294967295
 800a7e2:	6013      	str	r3, [r2, #0]
 800a7e4:	f000 bd28 	b.w	800b238 <_dtoa_r+0xb18>
 800a7e8:	aa14      	add	r2, sp, #80	; 0x50
 800a7ea:	a915      	add	r1, sp, #84	; 0x54
 800a7ec:	ec47 6b10 	vmov	d0, r6, r7
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f000 fffa 	bl	800b7ea <__d2b>
 800a7f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a7fa:	9004      	str	r0, [sp, #16]
 800a7fc:	2d00      	cmp	r5, #0
 800a7fe:	d07c      	beq.n	800a8fa <_dtoa_r+0x1da>
 800a800:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a804:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a808:	46b2      	mov	sl, r6
 800a80a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a80e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a812:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a816:	2200      	movs	r2, #0
 800a818:	4b8b      	ldr	r3, [pc, #556]	; (800aa48 <_dtoa_r+0x328>)
 800a81a:	4650      	mov	r0, sl
 800a81c:	4659      	mov	r1, fp
 800a81e:	f7f5 fd33 	bl	8000288 <__aeabi_dsub>
 800a822:	a381      	add	r3, pc, #516	; (adr r3, 800aa28 <_dtoa_r+0x308>)
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	f7f5 fee6 	bl	80005f8 <__aeabi_dmul>
 800a82c:	a380      	add	r3, pc, #512	; (adr r3, 800aa30 <_dtoa_r+0x310>)
 800a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a832:	f7f5 fd2b 	bl	800028c <__adddf3>
 800a836:	4606      	mov	r6, r0
 800a838:	4628      	mov	r0, r5
 800a83a:	460f      	mov	r7, r1
 800a83c:	f7f5 fe72 	bl	8000524 <__aeabi_i2d>
 800a840:	a37d      	add	r3, pc, #500	; (adr r3, 800aa38 <_dtoa_r+0x318>)
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	f7f5 fed7 	bl	80005f8 <__aeabi_dmul>
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	4630      	mov	r0, r6
 800a850:	4639      	mov	r1, r7
 800a852:	f7f5 fd1b 	bl	800028c <__adddf3>
 800a856:	4606      	mov	r6, r0
 800a858:	460f      	mov	r7, r1
 800a85a:	f7f6 f97d 	bl	8000b58 <__aeabi_d2iz>
 800a85e:	2200      	movs	r2, #0
 800a860:	4682      	mov	sl, r0
 800a862:	2300      	movs	r3, #0
 800a864:	4630      	mov	r0, r6
 800a866:	4639      	mov	r1, r7
 800a868:	f7f6 f938 	bl	8000adc <__aeabi_dcmplt>
 800a86c:	b148      	cbz	r0, 800a882 <_dtoa_r+0x162>
 800a86e:	4650      	mov	r0, sl
 800a870:	f7f5 fe58 	bl	8000524 <__aeabi_i2d>
 800a874:	4632      	mov	r2, r6
 800a876:	463b      	mov	r3, r7
 800a878:	f7f6 f926 	bl	8000ac8 <__aeabi_dcmpeq>
 800a87c:	b908      	cbnz	r0, 800a882 <_dtoa_r+0x162>
 800a87e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a882:	f1ba 0f16 	cmp.w	sl, #22
 800a886:	d859      	bhi.n	800a93c <_dtoa_r+0x21c>
 800a888:	4970      	ldr	r1, [pc, #448]	; (800aa4c <_dtoa_r+0x32c>)
 800a88a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a88e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a892:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a896:	f7f6 f93f 	bl	8000b18 <__aeabi_dcmpgt>
 800a89a:	2800      	cmp	r0, #0
 800a89c:	d050      	beq.n	800a940 <_dtoa_r+0x220>
 800a89e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8a8:	1b5d      	subs	r5, r3, r5
 800a8aa:	f1b5 0801 	subs.w	r8, r5, #1
 800a8ae:	bf49      	itett	mi
 800a8b0:	f1c5 0301 	rsbmi	r3, r5, #1
 800a8b4:	2300      	movpl	r3, #0
 800a8b6:	9305      	strmi	r3, [sp, #20]
 800a8b8:	f04f 0800 	movmi.w	r8, #0
 800a8bc:	bf58      	it	pl
 800a8be:	9305      	strpl	r3, [sp, #20]
 800a8c0:	f1ba 0f00 	cmp.w	sl, #0
 800a8c4:	db3e      	blt.n	800a944 <_dtoa_r+0x224>
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	44d0      	add	r8, sl
 800a8ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a8ce:	9307      	str	r3, [sp, #28]
 800a8d0:	9b06      	ldr	r3, [sp, #24]
 800a8d2:	2b09      	cmp	r3, #9
 800a8d4:	f200 8090 	bhi.w	800a9f8 <_dtoa_r+0x2d8>
 800a8d8:	2b05      	cmp	r3, #5
 800a8da:	bfc4      	itt	gt
 800a8dc:	3b04      	subgt	r3, #4
 800a8de:	9306      	strgt	r3, [sp, #24]
 800a8e0:	9b06      	ldr	r3, [sp, #24]
 800a8e2:	f1a3 0302 	sub.w	r3, r3, #2
 800a8e6:	bfcc      	ite	gt
 800a8e8:	2500      	movgt	r5, #0
 800a8ea:	2501      	movle	r5, #1
 800a8ec:	2b03      	cmp	r3, #3
 800a8ee:	f200 808f 	bhi.w	800aa10 <_dtoa_r+0x2f0>
 800a8f2:	e8df f003 	tbb	[pc, r3]
 800a8f6:	7f7d      	.short	0x7f7d
 800a8f8:	7131      	.short	0x7131
 800a8fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a8fe:	441d      	add	r5, r3
 800a900:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a904:	2820      	cmp	r0, #32
 800a906:	dd13      	ble.n	800a930 <_dtoa_r+0x210>
 800a908:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a90c:	9b00      	ldr	r3, [sp, #0]
 800a90e:	fa08 f800 	lsl.w	r8, r8, r0
 800a912:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a916:	fa23 f000 	lsr.w	r0, r3, r0
 800a91a:	ea48 0000 	orr.w	r0, r8, r0
 800a91e:	f7f5 fdf1 	bl	8000504 <__aeabi_ui2d>
 800a922:	2301      	movs	r3, #1
 800a924:	4682      	mov	sl, r0
 800a926:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a92a:	3d01      	subs	r5, #1
 800a92c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a92e:	e772      	b.n	800a816 <_dtoa_r+0xf6>
 800a930:	9b00      	ldr	r3, [sp, #0]
 800a932:	f1c0 0020 	rsb	r0, r0, #32
 800a936:	fa03 f000 	lsl.w	r0, r3, r0
 800a93a:	e7f0      	b.n	800a91e <_dtoa_r+0x1fe>
 800a93c:	2301      	movs	r3, #1
 800a93e:	e7b1      	b.n	800a8a4 <_dtoa_r+0x184>
 800a940:	900f      	str	r0, [sp, #60]	; 0x3c
 800a942:	e7b0      	b.n	800a8a6 <_dtoa_r+0x186>
 800a944:	9b05      	ldr	r3, [sp, #20]
 800a946:	eba3 030a 	sub.w	r3, r3, sl
 800a94a:	9305      	str	r3, [sp, #20]
 800a94c:	f1ca 0300 	rsb	r3, sl, #0
 800a950:	9307      	str	r3, [sp, #28]
 800a952:	2300      	movs	r3, #0
 800a954:	930e      	str	r3, [sp, #56]	; 0x38
 800a956:	e7bb      	b.n	800a8d0 <_dtoa_r+0x1b0>
 800a958:	2301      	movs	r3, #1
 800a95a:	930a      	str	r3, [sp, #40]	; 0x28
 800a95c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a95e:	2b00      	cmp	r3, #0
 800a960:	dd59      	ble.n	800aa16 <_dtoa_r+0x2f6>
 800a962:	9302      	str	r3, [sp, #8]
 800a964:	4699      	mov	r9, r3
 800a966:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a968:	2200      	movs	r2, #0
 800a96a:	6072      	str	r2, [r6, #4]
 800a96c:	2204      	movs	r2, #4
 800a96e:	f102 0014 	add.w	r0, r2, #20
 800a972:	4298      	cmp	r0, r3
 800a974:	6871      	ldr	r1, [r6, #4]
 800a976:	d953      	bls.n	800aa20 <_dtoa_r+0x300>
 800a978:	4620      	mov	r0, r4
 800a97a:	f000 fcaa 	bl	800b2d2 <_Balloc>
 800a97e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a980:	6030      	str	r0, [r6, #0]
 800a982:	f1b9 0f0e 	cmp.w	r9, #14
 800a986:	f8d3 b000 	ldr.w	fp, [r3]
 800a98a:	f200 80e6 	bhi.w	800ab5a <_dtoa_r+0x43a>
 800a98e:	2d00      	cmp	r5, #0
 800a990:	f000 80e3 	beq.w	800ab5a <_dtoa_r+0x43a>
 800a994:	ed9d 7b00 	vldr	d7, [sp]
 800a998:	f1ba 0f00 	cmp.w	sl, #0
 800a99c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a9a0:	dd74      	ble.n	800aa8c <_dtoa_r+0x36c>
 800a9a2:	4a2a      	ldr	r2, [pc, #168]	; (800aa4c <_dtoa_r+0x32c>)
 800a9a4:	f00a 030f 	and.w	r3, sl, #15
 800a9a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a9ac:	ed93 7b00 	vldr	d7, [r3]
 800a9b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a9b4:	06f0      	lsls	r0, r6, #27
 800a9b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a9ba:	d565      	bpl.n	800aa88 <_dtoa_r+0x368>
 800a9bc:	4b24      	ldr	r3, [pc, #144]	; (800aa50 <_dtoa_r+0x330>)
 800a9be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9c6:	f7f5 ff41 	bl	800084c <__aeabi_ddiv>
 800a9ca:	e9cd 0100 	strd	r0, r1, [sp]
 800a9ce:	f006 060f 	and.w	r6, r6, #15
 800a9d2:	2503      	movs	r5, #3
 800a9d4:	4f1e      	ldr	r7, [pc, #120]	; (800aa50 <_dtoa_r+0x330>)
 800a9d6:	e04c      	b.n	800aa72 <_dtoa_r+0x352>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	930a      	str	r3, [sp, #40]	; 0x28
 800a9dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9de:	4453      	add	r3, sl
 800a9e0:	f103 0901 	add.w	r9, r3, #1
 800a9e4:	9302      	str	r3, [sp, #8]
 800a9e6:	464b      	mov	r3, r9
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	bfb8      	it	lt
 800a9ec:	2301      	movlt	r3, #1
 800a9ee:	e7ba      	b.n	800a966 <_dtoa_r+0x246>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	e7b2      	b.n	800a95a <_dtoa_r+0x23a>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	e7f0      	b.n	800a9da <_dtoa_r+0x2ba>
 800a9f8:	2501      	movs	r5, #1
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	9306      	str	r3, [sp, #24]
 800a9fe:	950a      	str	r5, [sp, #40]	; 0x28
 800aa00:	f04f 33ff 	mov.w	r3, #4294967295
 800aa04:	9302      	str	r3, [sp, #8]
 800aa06:	4699      	mov	r9, r3
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2312      	movs	r3, #18
 800aa0c:	920b      	str	r2, [sp, #44]	; 0x2c
 800aa0e:	e7aa      	b.n	800a966 <_dtoa_r+0x246>
 800aa10:	2301      	movs	r3, #1
 800aa12:	930a      	str	r3, [sp, #40]	; 0x28
 800aa14:	e7f4      	b.n	800aa00 <_dtoa_r+0x2e0>
 800aa16:	2301      	movs	r3, #1
 800aa18:	9302      	str	r3, [sp, #8]
 800aa1a:	4699      	mov	r9, r3
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	e7f5      	b.n	800aa0c <_dtoa_r+0x2ec>
 800aa20:	3101      	adds	r1, #1
 800aa22:	6071      	str	r1, [r6, #4]
 800aa24:	0052      	lsls	r2, r2, #1
 800aa26:	e7a2      	b.n	800a96e <_dtoa_r+0x24e>
 800aa28:	636f4361 	.word	0x636f4361
 800aa2c:	3fd287a7 	.word	0x3fd287a7
 800aa30:	8b60c8b3 	.word	0x8b60c8b3
 800aa34:	3fc68a28 	.word	0x3fc68a28
 800aa38:	509f79fb 	.word	0x509f79fb
 800aa3c:	3fd34413 	.word	0x3fd34413
 800aa40:	7ff00000 	.word	0x7ff00000
 800aa44:	0800cf95 	.word	0x0800cf95
 800aa48:	3ff80000 	.word	0x3ff80000
 800aa4c:	0800cff0 	.word	0x0800cff0
 800aa50:	0800cfc8 	.word	0x0800cfc8
 800aa54:	0800cfc1 	.word	0x0800cfc1
 800aa58:	07f1      	lsls	r1, r6, #31
 800aa5a:	d508      	bpl.n	800aa6e <_dtoa_r+0x34e>
 800aa5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa64:	f7f5 fdc8 	bl	80005f8 <__aeabi_dmul>
 800aa68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa6c:	3501      	adds	r5, #1
 800aa6e:	1076      	asrs	r6, r6, #1
 800aa70:	3708      	adds	r7, #8
 800aa72:	2e00      	cmp	r6, #0
 800aa74:	d1f0      	bne.n	800aa58 <_dtoa_r+0x338>
 800aa76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aa7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa7e:	f7f5 fee5 	bl	800084c <__aeabi_ddiv>
 800aa82:	e9cd 0100 	strd	r0, r1, [sp]
 800aa86:	e01a      	b.n	800aabe <_dtoa_r+0x39e>
 800aa88:	2502      	movs	r5, #2
 800aa8a:	e7a3      	b.n	800a9d4 <_dtoa_r+0x2b4>
 800aa8c:	f000 80a0 	beq.w	800abd0 <_dtoa_r+0x4b0>
 800aa90:	f1ca 0600 	rsb	r6, sl, #0
 800aa94:	4b9f      	ldr	r3, [pc, #636]	; (800ad14 <_dtoa_r+0x5f4>)
 800aa96:	4fa0      	ldr	r7, [pc, #640]	; (800ad18 <_dtoa_r+0x5f8>)
 800aa98:	f006 020f 	and.w	r2, r6, #15
 800aa9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aaa8:	f7f5 fda6 	bl	80005f8 <__aeabi_dmul>
 800aaac:	e9cd 0100 	strd	r0, r1, [sp]
 800aab0:	1136      	asrs	r6, r6, #4
 800aab2:	2300      	movs	r3, #0
 800aab4:	2502      	movs	r5, #2
 800aab6:	2e00      	cmp	r6, #0
 800aab8:	d17f      	bne.n	800abba <_dtoa_r+0x49a>
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1e1      	bne.n	800aa82 <_dtoa_r+0x362>
 800aabe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f000 8087 	beq.w	800abd4 <_dtoa_r+0x4b4>
 800aac6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aaca:	2200      	movs	r2, #0
 800aacc:	4b93      	ldr	r3, [pc, #588]	; (800ad1c <_dtoa_r+0x5fc>)
 800aace:	4630      	mov	r0, r6
 800aad0:	4639      	mov	r1, r7
 800aad2:	f7f6 f803 	bl	8000adc <__aeabi_dcmplt>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d07c      	beq.n	800abd4 <_dtoa_r+0x4b4>
 800aada:	f1b9 0f00 	cmp.w	r9, #0
 800aade:	d079      	beq.n	800abd4 <_dtoa_r+0x4b4>
 800aae0:	9b02      	ldr	r3, [sp, #8]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	dd35      	ble.n	800ab52 <_dtoa_r+0x432>
 800aae6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aaea:	9308      	str	r3, [sp, #32]
 800aaec:	4639      	mov	r1, r7
 800aaee:	2200      	movs	r2, #0
 800aaf0:	4b8b      	ldr	r3, [pc, #556]	; (800ad20 <_dtoa_r+0x600>)
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	f7f5 fd80 	bl	80005f8 <__aeabi_dmul>
 800aaf8:	e9cd 0100 	strd	r0, r1, [sp]
 800aafc:	9f02      	ldr	r7, [sp, #8]
 800aafe:	3501      	adds	r5, #1
 800ab00:	4628      	mov	r0, r5
 800ab02:	f7f5 fd0f 	bl	8000524 <__aeabi_i2d>
 800ab06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab0a:	f7f5 fd75 	bl	80005f8 <__aeabi_dmul>
 800ab0e:	2200      	movs	r2, #0
 800ab10:	4b84      	ldr	r3, [pc, #528]	; (800ad24 <_dtoa_r+0x604>)
 800ab12:	f7f5 fbbb 	bl	800028c <__adddf3>
 800ab16:	4605      	mov	r5, r0
 800ab18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ab1c:	2f00      	cmp	r7, #0
 800ab1e:	d15d      	bne.n	800abdc <_dtoa_r+0x4bc>
 800ab20:	2200      	movs	r2, #0
 800ab22:	4b81      	ldr	r3, [pc, #516]	; (800ad28 <_dtoa_r+0x608>)
 800ab24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab28:	f7f5 fbae 	bl	8000288 <__aeabi_dsub>
 800ab2c:	462a      	mov	r2, r5
 800ab2e:	4633      	mov	r3, r6
 800ab30:	e9cd 0100 	strd	r0, r1, [sp]
 800ab34:	f7f5 fff0 	bl	8000b18 <__aeabi_dcmpgt>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	f040 8288 	bne.w	800b04e <_dtoa_r+0x92e>
 800ab3e:	462a      	mov	r2, r5
 800ab40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ab44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab48:	f7f5 ffc8 	bl	8000adc <__aeabi_dcmplt>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	f040 827c 	bne.w	800b04a <_dtoa_r+0x92a>
 800ab52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab56:	e9cd 2300 	strd	r2, r3, [sp]
 800ab5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f2c0 8150 	blt.w	800ae02 <_dtoa_r+0x6e2>
 800ab62:	f1ba 0f0e 	cmp.w	sl, #14
 800ab66:	f300 814c 	bgt.w	800ae02 <_dtoa_r+0x6e2>
 800ab6a:	4b6a      	ldr	r3, [pc, #424]	; (800ad14 <_dtoa_r+0x5f4>)
 800ab6c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab70:	ed93 7b00 	vldr	d7, [r3]
 800ab74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab7c:	f280 80d8 	bge.w	800ad30 <_dtoa_r+0x610>
 800ab80:	f1b9 0f00 	cmp.w	r9, #0
 800ab84:	f300 80d4 	bgt.w	800ad30 <_dtoa_r+0x610>
 800ab88:	f040 825e 	bne.w	800b048 <_dtoa_r+0x928>
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	4b66      	ldr	r3, [pc, #408]	; (800ad28 <_dtoa_r+0x608>)
 800ab90:	ec51 0b17 	vmov	r0, r1, d7
 800ab94:	f7f5 fd30 	bl	80005f8 <__aeabi_dmul>
 800ab98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab9c:	f7f5 ffb2 	bl	8000b04 <__aeabi_dcmpge>
 800aba0:	464f      	mov	r7, r9
 800aba2:	464e      	mov	r6, r9
 800aba4:	2800      	cmp	r0, #0
 800aba6:	f040 8234 	bne.w	800b012 <_dtoa_r+0x8f2>
 800abaa:	2331      	movs	r3, #49	; 0x31
 800abac:	f10b 0501 	add.w	r5, fp, #1
 800abb0:	f88b 3000 	strb.w	r3, [fp]
 800abb4:	f10a 0a01 	add.w	sl, sl, #1
 800abb8:	e22f      	b.n	800b01a <_dtoa_r+0x8fa>
 800abba:	07f2      	lsls	r2, r6, #31
 800abbc:	d505      	bpl.n	800abca <_dtoa_r+0x4aa>
 800abbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abc2:	f7f5 fd19 	bl	80005f8 <__aeabi_dmul>
 800abc6:	3501      	adds	r5, #1
 800abc8:	2301      	movs	r3, #1
 800abca:	1076      	asrs	r6, r6, #1
 800abcc:	3708      	adds	r7, #8
 800abce:	e772      	b.n	800aab6 <_dtoa_r+0x396>
 800abd0:	2502      	movs	r5, #2
 800abd2:	e774      	b.n	800aabe <_dtoa_r+0x39e>
 800abd4:	f8cd a020 	str.w	sl, [sp, #32]
 800abd8:	464f      	mov	r7, r9
 800abda:	e791      	b.n	800ab00 <_dtoa_r+0x3e0>
 800abdc:	4b4d      	ldr	r3, [pc, #308]	; (800ad14 <_dtoa_r+0x5f4>)
 800abde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800abe2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800abe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d047      	beq.n	800ac7c <_dtoa_r+0x55c>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	2000      	movs	r0, #0
 800abf2:	494e      	ldr	r1, [pc, #312]	; (800ad2c <_dtoa_r+0x60c>)
 800abf4:	f7f5 fe2a 	bl	800084c <__aeabi_ddiv>
 800abf8:	462a      	mov	r2, r5
 800abfa:	4633      	mov	r3, r6
 800abfc:	f7f5 fb44 	bl	8000288 <__aeabi_dsub>
 800ac00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ac04:	465d      	mov	r5, fp
 800ac06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac0a:	f7f5 ffa5 	bl	8000b58 <__aeabi_d2iz>
 800ac0e:	4606      	mov	r6, r0
 800ac10:	f7f5 fc88 	bl	8000524 <__aeabi_i2d>
 800ac14:	4602      	mov	r2, r0
 800ac16:	460b      	mov	r3, r1
 800ac18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac1c:	f7f5 fb34 	bl	8000288 <__aeabi_dsub>
 800ac20:	3630      	adds	r6, #48	; 0x30
 800ac22:	f805 6b01 	strb.w	r6, [r5], #1
 800ac26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac2a:	e9cd 0100 	strd	r0, r1, [sp]
 800ac2e:	f7f5 ff55 	bl	8000adc <__aeabi_dcmplt>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	d163      	bne.n	800acfe <_dtoa_r+0x5de>
 800ac36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	4937      	ldr	r1, [pc, #220]	; (800ad1c <_dtoa_r+0x5fc>)
 800ac3e:	f7f5 fb23 	bl	8000288 <__aeabi_dsub>
 800ac42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac46:	f7f5 ff49 	bl	8000adc <__aeabi_dcmplt>
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	f040 80b7 	bne.w	800adbe <_dtoa_r+0x69e>
 800ac50:	eba5 030b 	sub.w	r3, r5, fp
 800ac54:	429f      	cmp	r7, r3
 800ac56:	f77f af7c 	ble.w	800ab52 <_dtoa_r+0x432>
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	4b30      	ldr	r3, [pc, #192]	; (800ad20 <_dtoa_r+0x600>)
 800ac5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac62:	f7f5 fcc9 	bl	80005f8 <__aeabi_dmul>
 800ac66:	2200      	movs	r2, #0
 800ac68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ac6c:	4b2c      	ldr	r3, [pc, #176]	; (800ad20 <_dtoa_r+0x600>)
 800ac6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac72:	f7f5 fcc1 	bl	80005f8 <__aeabi_dmul>
 800ac76:	e9cd 0100 	strd	r0, r1, [sp]
 800ac7a:	e7c4      	b.n	800ac06 <_dtoa_r+0x4e6>
 800ac7c:	462a      	mov	r2, r5
 800ac7e:	4633      	mov	r3, r6
 800ac80:	f7f5 fcba 	bl	80005f8 <__aeabi_dmul>
 800ac84:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ac88:	eb0b 0507 	add.w	r5, fp, r7
 800ac8c:	465e      	mov	r6, fp
 800ac8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac92:	f7f5 ff61 	bl	8000b58 <__aeabi_d2iz>
 800ac96:	4607      	mov	r7, r0
 800ac98:	f7f5 fc44 	bl	8000524 <__aeabi_i2d>
 800ac9c:	3730      	adds	r7, #48	; 0x30
 800ac9e:	4602      	mov	r2, r0
 800aca0:	460b      	mov	r3, r1
 800aca2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aca6:	f7f5 faef 	bl	8000288 <__aeabi_dsub>
 800acaa:	f806 7b01 	strb.w	r7, [r6], #1
 800acae:	42ae      	cmp	r6, r5
 800acb0:	e9cd 0100 	strd	r0, r1, [sp]
 800acb4:	f04f 0200 	mov.w	r2, #0
 800acb8:	d126      	bne.n	800ad08 <_dtoa_r+0x5e8>
 800acba:	4b1c      	ldr	r3, [pc, #112]	; (800ad2c <_dtoa_r+0x60c>)
 800acbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800acc0:	f7f5 fae4 	bl	800028c <__adddf3>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800accc:	f7f5 ff24 	bl	8000b18 <__aeabi_dcmpgt>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d174      	bne.n	800adbe <_dtoa_r+0x69e>
 800acd4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800acd8:	2000      	movs	r0, #0
 800acda:	4914      	ldr	r1, [pc, #80]	; (800ad2c <_dtoa_r+0x60c>)
 800acdc:	f7f5 fad4 	bl	8000288 <__aeabi_dsub>
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ace8:	f7f5 fef8 	bl	8000adc <__aeabi_dcmplt>
 800acec:	2800      	cmp	r0, #0
 800acee:	f43f af30 	beq.w	800ab52 <_dtoa_r+0x432>
 800acf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800acf6:	2b30      	cmp	r3, #48	; 0x30
 800acf8:	f105 32ff 	add.w	r2, r5, #4294967295
 800acfc:	d002      	beq.n	800ad04 <_dtoa_r+0x5e4>
 800acfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ad02:	e04a      	b.n	800ad9a <_dtoa_r+0x67a>
 800ad04:	4615      	mov	r5, r2
 800ad06:	e7f4      	b.n	800acf2 <_dtoa_r+0x5d2>
 800ad08:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <_dtoa_r+0x600>)
 800ad0a:	f7f5 fc75 	bl	80005f8 <__aeabi_dmul>
 800ad0e:	e9cd 0100 	strd	r0, r1, [sp]
 800ad12:	e7bc      	b.n	800ac8e <_dtoa_r+0x56e>
 800ad14:	0800cff0 	.word	0x0800cff0
 800ad18:	0800cfc8 	.word	0x0800cfc8
 800ad1c:	3ff00000 	.word	0x3ff00000
 800ad20:	40240000 	.word	0x40240000
 800ad24:	401c0000 	.word	0x401c0000
 800ad28:	40140000 	.word	0x40140000
 800ad2c:	3fe00000 	.word	0x3fe00000
 800ad30:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ad34:	465d      	mov	r5, fp
 800ad36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	4639      	mov	r1, r7
 800ad3e:	f7f5 fd85 	bl	800084c <__aeabi_ddiv>
 800ad42:	f7f5 ff09 	bl	8000b58 <__aeabi_d2iz>
 800ad46:	4680      	mov	r8, r0
 800ad48:	f7f5 fbec 	bl	8000524 <__aeabi_i2d>
 800ad4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad50:	f7f5 fc52 	bl	80005f8 <__aeabi_dmul>
 800ad54:	4602      	mov	r2, r0
 800ad56:	460b      	mov	r3, r1
 800ad58:	4630      	mov	r0, r6
 800ad5a:	4639      	mov	r1, r7
 800ad5c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ad60:	f7f5 fa92 	bl	8000288 <__aeabi_dsub>
 800ad64:	f805 6b01 	strb.w	r6, [r5], #1
 800ad68:	eba5 060b 	sub.w	r6, r5, fp
 800ad6c:	45b1      	cmp	r9, r6
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	d139      	bne.n	800ade8 <_dtoa_r+0x6c8>
 800ad74:	f7f5 fa8a 	bl	800028c <__adddf3>
 800ad78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	460f      	mov	r7, r1
 800ad80:	f7f5 feca 	bl	8000b18 <__aeabi_dcmpgt>
 800ad84:	b9c8      	cbnz	r0, 800adba <_dtoa_r+0x69a>
 800ad86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	f7f5 fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad92:	b110      	cbz	r0, 800ad9a <_dtoa_r+0x67a>
 800ad94:	f018 0f01 	tst.w	r8, #1
 800ad98:	d10f      	bne.n	800adba <_dtoa_r+0x69a>
 800ad9a:	9904      	ldr	r1, [sp, #16]
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f000 facc 	bl	800b33a <_Bfree>
 800ada2:	2300      	movs	r3, #0
 800ada4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ada6:	702b      	strb	r3, [r5, #0]
 800ada8:	f10a 0301 	add.w	r3, sl, #1
 800adac:	6013      	str	r3, [r2, #0]
 800adae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 8241 	beq.w	800b238 <_dtoa_r+0xb18>
 800adb6:	601d      	str	r5, [r3, #0]
 800adb8:	e23e      	b.n	800b238 <_dtoa_r+0xb18>
 800adba:	f8cd a020 	str.w	sl, [sp, #32]
 800adbe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800adc2:	2a39      	cmp	r2, #57	; 0x39
 800adc4:	f105 33ff 	add.w	r3, r5, #4294967295
 800adc8:	d108      	bne.n	800addc <_dtoa_r+0x6bc>
 800adca:	459b      	cmp	fp, r3
 800adcc:	d10a      	bne.n	800ade4 <_dtoa_r+0x6c4>
 800adce:	9b08      	ldr	r3, [sp, #32]
 800add0:	3301      	adds	r3, #1
 800add2:	9308      	str	r3, [sp, #32]
 800add4:	2330      	movs	r3, #48	; 0x30
 800add6:	f88b 3000 	strb.w	r3, [fp]
 800adda:	465b      	mov	r3, fp
 800addc:	781a      	ldrb	r2, [r3, #0]
 800adde:	3201      	adds	r2, #1
 800ade0:	701a      	strb	r2, [r3, #0]
 800ade2:	e78c      	b.n	800acfe <_dtoa_r+0x5de>
 800ade4:	461d      	mov	r5, r3
 800ade6:	e7ea      	b.n	800adbe <_dtoa_r+0x69e>
 800ade8:	2200      	movs	r2, #0
 800adea:	4b9b      	ldr	r3, [pc, #620]	; (800b058 <_dtoa_r+0x938>)
 800adec:	f7f5 fc04 	bl	80005f8 <__aeabi_dmul>
 800adf0:	2200      	movs	r2, #0
 800adf2:	2300      	movs	r3, #0
 800adf4:	4606      	mov	r6, r0
 800adf6:	460f      	mov	r7, r1
 800adf8:	f7f5 fe66 	bl	8000ac8 <__aeabi_dcmpeq>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d09a      	beq.n	800ad36 <_dtoa_r+0x616>
 800ae00:	e7cb      	b.n	800ad9a <_dtoa_r+0x67a>
 800ae02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae04:	2a00      	cmp	r2, #0
 800ae06:	f000 808b 	beq.w	800af20 <_dtoa_r+0x800>
 800ae0a:	9a06      	ldr	r2, [sp, #24]
 800ae0c:	2a01      	cmp	r2, #1
 800ae0e:	dc6e      	bgt.n	800aeee <_dtoa_r+0x7ce>
 800ae10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae12:	2a00      	cmp	r2, #0
 800ae14:	d067      	beq.n	800aee6 <_dtoa_r+0x7c6>
 800ae16:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae1a:	9f07      	ldr	r7, [sp, #28]
 800ae1c:	9d05      	ldr	r5, [sp, #20]
 800ae1e:	9a05      	ldr	r2, [sp, #20]
 800ae20:	2101      	movs	r1, #1
 800ae22:	441a      	add	r2, r3
 800ae24:	4620      	mov	r0, r4
 800ae26:	9205      	str	r2, [sp, #20]
 800ae28:	4498      	add	r8, r3
 800ae2a:	f000 fb26 	bl	800b47a <__i2b>
 800ae2e:	4606      	mov	r6, r0
 800ae30:	2d00      	cmp	r5, #0
 800ae32:	dd0c      	ble.n	800ae4e <_dtoa_r+0x72e>
 800ae34:	f1b8 0f00 	cmp.w	r8, #0
 800ae38:	dd09      	ble.n	800ae4e <_dtoa_r+0x72e>
 800ae3a:	4545      	cmp	r5, r8
 800ae3c:	9a05      	ldr	r2, [sp, #20]
 800ae3e:	462b      	mov	r3, r5
 800ae40:	bfa8      	it	ge
 800ae42:	4643      	movge	r3, r8
 800ae44:	1ad2      	subs	r2, r2, r3
 800ae46:	9205      	str	r2, [sp, #20]
 800ae48:	1aed      	subs	r5, r5, r3
 800ae4a:	eba8 0803 	sub.w	r8, r8, r3
 800ae4e:	9b07      	ldr	r3, [sp, #28]
 800ae50:	b1eb      	cbz	r3, 800ae8e <_dtoa_r+0x76e>
 800ae52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d067      	beq.n	800af28 <_dtoa_r+0x808>
 800ae58:	b18f      	cbz	r7, 800ae7e <_dtoa_r+0x75e>
 800ae5a:	4631      	mov	r1, r6
 800ae5c:	463a      	mov	r2, r7
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f000 fbaa 	bl	800b5b8 <__pow5mult>
 800ae64:	9a04      	ldr	r2, [sp, #16]
 800ae66:	4601      	mov	r1, r0
 800ae68:	4606      	mov	r6, r0
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 fb0e 	bl	800b48c <__multiply>
 800ae70:	9904      	ldr	r1, [sp, #16]
 800ae72:	9008      	str	r0, [sp, #32]
 800ae74:	4620      	mov	r0, r4
 800ae76:	f000 fa60 	bl	800b33a <_Bfree>
 800ae7a:	9b08      	ldr	r3, [sp, #32]
 800ae7c:	9304      	str	r3, [sp, #16]
 800ae7e:	9b07      	ldr	r3, [sp, #28]
 800ae80:	1bda      	subs	r2, r3, r7
 800ae82:	d004      	beq.n	800ae8e <_dtoa_r+0x76e>
 800ae84:	9904      	ldr	r1, [sp, #16]
 800ae86:	4620      	mov	r0, r4
 800ae88:	f000 fb96 	bl	800b5b8 <__pow5mult>
 800ae8c:	9004      	str	r0, [sp, #16]
 800ae8e:	2101      	movs	r1, #1
 800ae90:	4620      	mov	r0, r4
 800ae92:	f000 faf2 	bl	800b47a <__i2b>
 800ae96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae98:	4607      	mov	r7, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 81d0 	beq.w	800b240 <_dtoa_r+0xb20>
 800aea0:	461a      	mov	r2, r3
 800aea2:	4601      	mov	r1, r0
 800aea4:	4620      	mov	r0, r4
 800aea6:	f000 fb87 	bl	800b5b8 <__pow5mult>
 800aeaa:	9b06      	ldr	r3, [sp, #24]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	4607      	mov	r7, r0
 800aeb0:	dc40      	bgt.n	800af34 <_dtoa_r+0x814>
 800aeb2:	9b00      	ldr	r3, [sp, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d139      	bne.n	800af2c <_dtoa_r+0x80c>
 800aeb8:	9b01      	ldr	r3, [sp, #4]
 800aeba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d136      	bne.n	800af30 <_dtoa_r+0x810>
 800aec2:	9b01      	ldr	r3, [sp, #4]
 800aec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aec8:	0d1b      	lsrs	r3, r3, #20
 800aeca:	051b      	lsls	r3, r3, #20
 800aecc:	b12b      	cbz	r3, 800aeda <_dtoa_r+0x7ba>
 800aece:	9b05      	ldr	r3, [sp, #20]
 800aed0:	3301      	adds	r3, #1
 800aed2:	9305      	str	r3, [sp, #20]
 800aed4:	f108 0801 	add.w	r8, r8, #1
 800aed8:	2301      	movs	r3, #1
 800aeda:	9307      	str	r3, [sp, #28]
 800aedc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d12a      	bne.n	800af38 <_dtoa_r+0x818>
 800aee2:	2001      	movs	r0, #1
 800aee4:	e030      	b.n	800af48 <_dtoa_r+0x828>
 800aee6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aee8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aeec:	e795      	b.n	800ae1a <_dtoa_r+0x6fa>
 800aeee:	9b07      	ldr	r3, [sp, #28]
 800aef0:	f109 37ff 	add.w	r7, r9, #4294967295
 800aef4:	42bb      	cmp	r3, r7
 800aef6:	bfbf      	itttt	lt
 800aef8:	9b07      	ldrlt	r3, [sp, #28]
 800aefa:	9707      	strlt	r7, [sp, #28]
 800aefc:	1afa      	sublt	r2, r7, r3
 800aefe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800af00:	bfbb      	ittet	lt
 800af02:	189b      	addlt	r3, r3, r2
 800af04:	930e      	strlt	r3, [sp, #56]	; 0x38
 800af06:	1bdf      	subge	r7, r3, r7
 800af08:	2700      	movlt	r7, #0
 800af0a:	f1b9 0f00 	cmp.w	r9, #0
 800af0e:	bfb5      	itete	lt
 800af10:	9b05      	ldrlt	r3, [sp, #20]
 800af12:	9d05      	ldrge	r5, [sp, #20]
 800af14:	eba3 0509 	sublt.w	r5, r3, r9
 800af18:	464b      	movge	r3, r9
 800af1a:	bfb8      	it	lt
 800af1c:	2300      	movlt	r3, #0
 800af1e:	e77e      	b.n	800ae1e <_dtoa_r+0x6fe>
 800af20:	9f07      	ldr	r7, [sp, #28]
 800af22:	9d05      	ldr	r5, [sp, #20]
 800af24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800af26:	e783      	b.n	800ae30 <_dtoa_r+0x710>
 800af28:	9a07      	ldr	r2, [sp, #28]
 800af2a:	e7ab      	b.n	800ae84 <_dtoa_r+0x764>
 800af2c:	2300      	movs	r3, #0
 800af2e:	e7d4      	b.n	800aeda <_dtoa_r+0x7ba>
 800af30:	9b00      	ldr	r3, [sp, #0]
 800af32:	e7d2      	b.n	800aeda <_dtoa_r+0x7ba>
 800af34:	2300      	movs	r3, #0
 800af36:	9307      	str	r3, [sp, #28]
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800af3e:	6918      	ldr	r0, [r3, #16]
 800af40:	f000 fa4d 	bl	800b3de <__hi0bits>
 800af44:	f1c0 0020 	rsb	r0, r0, #32
 800af48:	4440      	add	r0, r8
 800af4a:	f010 001f 	ands.w	r0, r0, #31
 800af4e:	d047      	beq.n	800afe0 <_dtoa_r+0x8c0>
 800af50:	f1c0 0320 	rsb	r3, r0, #32
 800af54:	2b04      	cmp	r3, #4
 800af56:	dd3b      	ble.n	800afd0 <_dtoa_r+0x8b0>
 800af58:	9b05      	ldr	r3, [sp, #20]
 800af5a:	f1c0 001c 	rsb	r0, r0, #28
 800af5e:	4403      	add	r3, r0
 800af60:	9305      	str	r3, [sp, #20]
 800af62:	4405      	add	r5, r0
 800af64:	4480      	add	r8, r0
 800af66:	9b05      	ldr	r3, [sp, #20]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	dd05      	ble.n	800af78 <_dtoa_r+0x858>
 800af6c:	461a      	mov	r2, r3
 800af6e:	9904      	ldr	r1, [sp, #16]
 800af70:	4620      	mov	r0, r4
 800af72:	f000 fb6f 	bl	800b654 <__lshift>
 800af76:	9004      	str	r0, [sp, #16]
 800af78:	f1b8 0f00 	cmp.w	r8, #0
 800af7c:	dd05      	ble.n	800af8a <_dtoa_r+0x86a>
 800af7e:	4639      	mov	r1, r7
 800af80:	4642      	mov	r2, r8
 800af82:	4620      	mov	r0, r4
 800af84:	f000 fb66 	bl	800b654 <__lshift>
 800af88:	4607      	mov	r7, r0
 800af8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af8c:	b353      	cbz	r3, 800afe4 <_dtoa_r+0x8c4>
 800af8e:	4639      	mov	r1, r7
 800af90:	9804      	ldr	r0, [sp, #16]
 800af92:	f000 fbb3 	bl	800b6fc <__mcmp>
 800af96:	2800      	cmp	r0, #0
 800af98:	da24      	bge.n	800afe4 <_dtoa_r+0x8c4>
 800af9a:	2300      	movs	r3, #0
 800af9c:	220a      	movs	r2, #10
 800af9e:	9904      	ldr	r1, [sp, #16]
 800afa0:	4620      	mov	r0, r4
 800afa2:	f000 f9e1 	bl	800b368 <__multadd>
 800afa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afa8:	9004      	str	r0, [sp, #16]
 800afaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f000 814d 	beq.w	800b24e <_dtoa_r+0xb2e>
 800afb4:	2300      	movs	r3, #0
 800afb6:	4631      	mov	r1, r6
 800afb8:	220a      	movs	r2, #10
 800afba:	4620      	mov	r0, r4
 800afbc:	f000 f9d4 	bl	800b368 <__multadd>
 800afc0:	9b02      	ldr	r3, [sp, #8]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	4606      	mov	r6, r0
 800afc6:	dc4f      	bgt.n	800b068 <_dtoa_r+0x948>
 800afc8:	9b06      	ldr	r3, [sp, #24]
 800afca:	2b02      	cmp	r3, #2
 800afcc:	dd4c      	ble.n	800b068 <_dtoa_r+0x948>
 800afce:	e011      	b.n	800aff4 <_dtoa_r+0x8d4>
 800afd0:	d0c9      	beq.n	800af66 <_dtoa_r+0x846>
 800afd2:	9a05      	ldr	r2, [sp, #20]
 800afd4:	331c      	adds	r3, #28
 800afd6:	441a      	add	r2, r3
 800afd8:	9205      	str	r2, [sp, #20]
 800afda:	441d      	add	r5, r3
 800afdc:	4498      	add	r8, r3
 800afde:	e7c2      	b.n	800af66 <_dtoa_r+0x846>
 800afe0:	4603      	mov	r3, r0
 800afe2:	e7f6      	b.n	800afd2 <_dtoa_r+0x8b2>
 800afe4:	f1b9 0f00 	cmp.w	r9, #0
 800afe8:	dc38      	bgt.n	800b05c <_dtoa_r+0x93c>
 800afea:	9b06      	ldr	r3, [sp, #24]
 800afec:	2b02      	cmp	r3, #2
 800afee:	dd35      	ble.n	800b05c <_dtoa_r+0x93c>
 800aff0:	f8cd 9008 	str.w	r9, [sp, #8]
 800aff4:	9b02      	ldr	r3, [sp, #8]
 800aff6:	b963      	cbnz	r3, 800b012 <_dtoa_r+0x8f2>
 800aff8:	4639      	mov	r1, r7
 800affa:	2205      	movs	r2, #5
 800affc:	4620      	mov	r0, r4
 800affe:	f000 f9b3 	bl	800b368 <__multadd>
 800b002:	4601      	mov	r1, r0
 800b004:	4607      	mov	r7, r0
 800b006:	9804      	ldr	r0, [sp, #16]
 800b008:	f000 fb78 	bl	800b6fc <__mcmp>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	f73f adcc 	bgt.w	800abaa <_dtoa_r+0x48a>
 800b012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b014:	465d      	mov	r5, fp
 800b016:	ea6f 0a03 	mvn.w	sl, r3
 800b01a:	f04f 0900 	mov.w	r9, #0
 800b01e:	4639      	mov	r1, r7
 800b020:	4620      	mov	r0, r4
 800b022:	f000 f98a 	bl	800b33a <_Bfree>
 800b026:	2e00      	cmp	r6, #0
 800b028:	f43f aeb7 	beq.w	800ad9a <_dtoa_r+0x67a>
 800b02c:	f1b9 0f00 	cmp.w	r9, #0
 800b030:	d005      	beq.n	800b03e <_dtoa_r+0x91e>
 800b032:	45b1      	cmp	r9, r6
 800b034:	d003      	beq.n	800b03e <_dtoa_r+0x91e>
 800b036:	4649      	mov	r1, r9
 800b038:	4620      	mov	r0, r4
 800b03a:	f000 f97e 	bl	800b33a <_Bfree>
 800b03e:	4631      	mov	r1, r6
 800b040:	4620      	mov	r0, r4
 800b042:	f000 f97a 	bl	800b33a <_Bfree>
 800b046:	e6a8      	b.n	800ad9a <_dtoa_r+0x67a>
 800b048:	2700      	movs	r7, #0
 800b04a:	463e      	mov	r6, r7
 800b04c:	e7e1      	b.n	800b012 <_dtoa_r+0x8f2>
 800b04e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b052:	463e      	mov	r6, r7
 800b054:	e5a9      	b.n	800abaa <_dtoa_r+0x48a>
 800b056:	bf00      	nop
 800b058:	40240000 	.word	0x40240000
 800b05c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b05e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b062:	2b00      	cmp	r3, #0
 800b064:	f000 80fa 	beq.w	800b25c <_dtoa_r+0xb3c>
 800b068:	2d00      	cmp	r5, #0
 800b06a:	dd05      	ble.n	800b078 <_dtoa_r+0x958>
 800b06c:	4631      	mov	r1, r6
 800b06e:	462a      	mov	r2, r5
 800b070:	4620      	mov	r0, r4
 800b072:	f000 faef 	bl	800b654 <__lshift>
 800b076:	4606      	mov	r6, r0
 800b078:	9b07      	ldr	r3, [sp, #28]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d04c      	beq.n	800b118 <_dtoa_r+0x9f8>
 800b07e:	6871      	ldr	r1, [r6, #4]
 800b080:	4620      	mov	r0, r4
 800b082:	f000 f926 	bl	800b2d2 <_Balloc>
 800b086:	6932      	ldr	r2, [r6, #16]
 800b088:	3202      	adds	r2, #2
 800b08a:	4605      	mov	r5, r0
 800b08c:	0092      	lsls	r2, r2, #2
 800b08e:	f106 010c 	add.w	r1, r6, #12
 800b092:	300c      	adds	r0, #12
 800b094:	f000 f912 	bl	800b2bc <memcpy>
 800b098:	2201      	movs	r2, #1
 800b09a:	4629      	mov	r1, r5
 800b09c:	4620      	mov	r0, r4
 800b09e:	f000 fad9 	bl	800b654 <__lshift>
 800b0a2:	9b00      	ldr	r3, [sp, #0]
 800b0a4:	f8cd b014 	str.w	fp, [sp, #20]
 800b0a8:	f003 0301 	and.w	r3, r3, #1
 800b0ac:	46b1      	mov	r9, r6
 800b0ae:	9307      	str	r3, [sp, #28]
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	4639      	mov	r1, r7
 800b0b4:	9804      	ldr	r0, [sp, #16]
 800b0b6:	f7ff faa7 	bl	800a608 <quorem>
 800b0ba:	4649      	mov	r1, r9
 800b0bc:	4605      	mov	r5, r0
 800b0be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b0c2:	9804      	ldr	r0, [sp, #16]
 800b0c4:	f000 fb1a 	bl	800b6fc <__mcmp>
 800b0c8:	4632      	mov	r2, r6
 800b0ca:	9000      	str	r0, [sp, #0]
 800b0cc:	4639      	mov	r1, r7
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f000 fb2e 	bl	800b730 <__mdiff>
 800b0d4:	68c3      	ldr	r3, [r0, #12]
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	bb03      	cbnz	r3, 800b11c <_dtoa_r+0x9fc>
 800b0da:	4601      	mov	r1, r0
 800b0dc:	9008      	str	r0, [sp, #32]
 800b0de:	9804      	ldr	r0, [sp, #16]
 800b0e0:	f000 fb0c 	bl	800b6fc <__mcmp>
 800b0e4:	9a08      	ldr	r2, [sp, #32]
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	9308      	str	r3, [sp, #32]
 800b0ee:	f000 f924 	bl	800b33a <_Bfree>
 800b0f2:	9b08      	ldr	r3, [sp, #32]
 800b0f4:	b9a3      	cbnz	r3, 800b120 <_dtoa_r+0xa00>
 800b0f6:	9a06      	ldr	r2, [sp, #24]
 800b0f8:	b992      	cbnz	r2, 800b120 <_dtoa_r+0xa00>
 800b0fa:	9a07      	ldr	r2, [sp, #28]
 800b0fc:	b982      	cbnz	r2, 800b120 <_dtoa_r+0xa00>
 800b0fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b102:	d029      	beq.n	800b158 <_dtoa_r+0xa38>
 800b104:	9b00      	ldr	r3, [sp, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	dd01      	ble.n	800b10e <_dtoa_r+0x9ee>
 800b10a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b10e:	9b05      	ldr	r3, [sp, #20]
 800b110:	1c5d      	adds	r5, r3, #1
 800b112:	f883 8000 	strb.w	r8, [r3]
 800b116:	e782      	b.n	800b01e <_dtoa_r+0x8fe>
 800b118:	4630      	mov	r0, r6
 800b11a:	e7c2      	b.n	800b0a2 <_dtoa_r+0x982>
 800b11c:	2301      	movs	r3, #1
 800b11e:	e7e3      	b.n	800b0e8 <_dtoa_r+0x9c8>
 800b120:	9a00      	ldr	r2, [sp, #0]
 800b122:	2a00      	cmp	r2, #0
 800b124:	db04      	blt.n	800b130 <_dtoa_r+0xa10>
 800b126:	d125      	bne.n	800b174 <_dtoa_r+0xa54>
 800b128:	9a06      	ldr	r2, [sp, #24]
 800b12a:	bb1a      	cbnz	r2, 800b174 <_dtoa_r+0xa54>
 800b12c:	9a07      	ldr	r2, [sp, #28]
 800b12e:	bb0a      	cbnz	r2, 800b174 <_dtoa_r+0xa54>
 800b130:	2b00      	cmp	r3, #0
 800b132:	ddec      	ble.n	800b10e <_dtoa_r+0x9ee>
 800b134:	2201      	movs	r2, #1
 800b136:	9904      	ldr	r1, [sp, #16]
 800b138:	4620      	mov	r0, r4
 800b13a:	f000 fa8b 	bl	800b654 <__lshift>
 800b13e:	4639      	mov	r1, r7
 800b140:	9004      	str	r0, [sp, #16]
 800b142:	f000 fadb 	bl	800b6fc <__mcmp>
 800b146:	2800      	cmp	r0, #0
 800b148:	dc03      	bgt.n	800b152 <_dtoa_r+0xa32>
 800b14a:	d1e0      	bne.n	800b10e <_dtoa_r+0x9ee>
 800b14c:	f018 0f01 	tst.w	r8, #1
 800b150:	d0dd      	beq.n	800b10e <_dtoa_r+0x9ee>
 800b152:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b156:	d1d8      	bne.n	800b10a <_dtoa_r+0x9ea>
 800b158:	9b05      	ldr	r3, [sp, #20]
 800b15a:	9a05      	ldr	r2, [sp, #20]
 800b15c:	1c5d      	adds	r5, r3, #1
 800b15e:	2339      	movs	r3, #57	; 0x39
 800b160:	7013      	strb	r3, [r2, #0]
 800b162:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b166:	2b39      	cmp	r3, #57	; 0x39
 800b168:	f105 32ff 	add.w	r2, r5, #4294967295
 800b16c:	d04f      	beq.n	800b20e <_dtoa_r+0xaee>
 800b16e:	3301      	adds	r3, #1
 800b170:	7013      	strb	r3, [r2, #0]
 800b172:	e754      	b.n	800b01e <_dtoa_r+0x8fe>
 800b174:	9a05      	ldr	r2, [sp, #20]
 800b176:	2b00      	cmp	r3, #0
 800b178:	f102 0501 	add.w	r5, r2, #1
 800b17c:	dd06      	ble.n	800b18c <_dtoa_r+0xa6c>
 800b17e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b182:	d0e9      	beq.n	800b158 <_dtoa_r+0xa38>
 800b184:	f108 0801 	add.w	r8, r8, #1
 800b188:	9b05      	ldr	r3, [sp, #20]
 800b18a:	e7c2      	b.n	800b112 <_dtoa_r+0x9f2>
 800b18c:	9a02      	ldr	r2, [sp, #8]
 800b18e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b192:	eba5 030b 	sub.w	r3, r5, fp
 800b196:	4293      	cmp	r3, r2
 800b198:	d021      	beq.n	800b1de <_dtoa_r+0xabe>
 800b19a:	2300      	movs	r3, #0
 800b19c:	220a      	movs	r2, #10
 800b19e:	9904      	ldr	r1, [sp, #16]
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f000 f8e1 	bl	800b368 <__multadd>
 800b1a6:	45b1      	cmp	r9, r6
 800b1a8:	9004      	str	r0, [sp, #16]
 800b1aa:	f04f 0300 	mov.w	r3, #0
 800b1ae:	f04f 020a 	mov.w	r2, #10
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	d105      	bne.n	800b1c4 <_dtoa_r+0xaa4>
 800b1b8:	f000 f8d6 	bl	800b368 <__multadd>
 800b1bc:	4681      	mov	r9, r0
 800b1be:	4606      	mov	r6, r0
 800b1c0:	9505      	str	r5, [sp, #20]
 800b1c2:	e776      	b.n	800b0b2 <_dtoa_r+0x992>
 800b1c4:	f000 f8d0 	bl	800b368 <__multadd>
 800b1c8:	4631      	mov	r1, r6
 800b1ca:	4681      	mov	r9, r0
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	220a      	movs	r2, #10
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f000 f8c9 	bl	800b368 <__multadd>
 800b1d6:	4606      	mov	r6, r0
 800b1d8:	e7f2      	b.n	800b1c0 <_dtoa_r+0xaa0>
 800b1da:	f04f 0900 	mov.w	r9, #0
 800b1de:	2201      	movs	r2, #1
 800b1e0:	9904      	ldr	r1, [sp, #16]
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f000 fa36 	bl	800b654 <__lshift>
 800b1e8:	4639      	mov	r1, r7
 800b1ea:	9004      	str	r0, [sp, #16]
 800b1ec:	f000 fa86 	bl	800b6fc <__mcmp>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	dcb6      	bgt.n	800b162 <_dtoa_r+0xa42>
 800b1f4:	d102      	bne.n	800b1fc <_dtoa_r+0xadc>
 800b1f6:	f018 0f01 	tst.w	r8, #1
 800b1fa:	d1b2      	bne.n	800b162 <_dtoa_r+0xa42>
 800b1fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b200:	2b30      	cmp	r3, #48	; 0x30
 800b202:	f105 32ff 	add.w	r2, r5, #4294967295
 800b206:	f47f af0a 	bne.w	800b01e <_dtoa_r+0x8fe>
 800b20a:	4615      	mov	r5, r2
 800b20c:	e7f6      	b.n	800b1fc <_dtoa_r+0xadc>
 800b20e:	4593      	cmp	fp, r2
 800b210:	d105      	bne.n	800b21e <_dtoa_r+0xafe>
 800b212:	2331      	movs	r3, #49	; 0x31
 800b214:	f10a 0a01 	add.w	sl, sl, #1
 800b218:	f88b 3000 	strb.w	r3, [fp]
 800b21c:	e6ff      	b.n	800b01e <_dtoa_r+0x8fe>
 800b21e:	4615      	mov	r5, r2
 800b220:	e79f      	b.n	800b162 <_dtoa_r+0xa42>
 800b222:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b288 <_dtoa_r+0xb68>
 800b226:	e007      	b.n	800b238 <_dtoa_r+0xb18>
 800b228:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b22a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b28c <_dtoa_r+0xb6c>
 800b22e:	b11b      	cbz	r3, 800b238 <_dtoa_r+0xb18>
 800b230:	f10b 0308 	add.w	r3, fp, #8
 800b234:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b236:	6013      	str	r3, [r2, #0]
 800b238:	4658      	mov	r0, fp
 800b23a:	b017      	add	sp, #92	; 0x5c
 800b23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b240:	9b06      	ldr	r3, [sp, #24]
 800b242:	2b01      	cmp	r3, #1
 800b244:	f77f ae35 	ble.w	800aeb2 <_dtoa_r+0x792>
 800b248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b24a:	9307      	str	r3, [sp, #28]
 800b24c:	e649      	b.n	800aee2 <_dtoa_r+0x7c2>
 800b24e:	9b02      	ldr	r3, [sp, #8]
 800b250:	2b00      	cmp	r3, #0
 800b252:	dc03      	bgt.n	800b25c <_dtoa_r+0xb3c>
 800b254:	9b06      	ldr	r3, [sp, #24]
 800b256:	2b02      	cmp	r3, #2
 800b258:	f73f aecc 	bgt.w	800aff4 <_dtoa_r+0x8d4>
 800b25c:	465d      	mov	r5, fp
 800b25e:	4639      	mov	r1, r7
 800b260:	9804      	ldr	r0, [sp, #16]
 800b262:	f7ff f9d1 	bl	800a608 <quorem>
 800b266:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b26a:	f805 8b01 	strb.w	r8, [r5], #1
 800b26e:	9a02      	ldr	r2, [sp, #8]
 800b270:	eba5 030b 	sub.w	r3, r5, fp
 800b274:	429a      	cmp	r2, r3
 800b276:	ddb0      	ble.n	800b1da <_dtoa_r+0xaba>
 800b278:	2300      	movs	r3, #0
 800b27a:	220a      	movs	r2, #10
 800b27c:	9904      	ldr	r1, [sp, #16]
 800b27e:	4620      	mov	r0, r4
 800b280:	f000 f872 	bl	800b368 <__multadd>
 800b284:	9004      	str	r0, [sp, #16]
 800b286:	e7ea      	b.n	800b25e <_dtoa_r+0xb3e>
 800b288:	0800cf94 	.word	0x0800cf94
 800b28c:	0800cfb8 	.word	0x0800cfb8

0800b290 <_localeconv_r>:
 800b290:	4b04      	ldr	r3, [pc, #16]	; (800b2a4 <_localeconv_r+0x14>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	6a18      	ldr	r0, [r3, #32]
 800b296:	4b04      	ldr	r3, [pc, #16]	; (800b2a8 <_localeconv_r+0x18>)
 800b298:	2800      	cmp	r0, #0
 800b29a:	bf08      	it	eq
 800b29c:	4618      	moveq	r0, r3
 800b29e:	30f0      	adds	r0, #240	; 0xf0
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	2000017c 	.word	0x2000017c
 800b2a8:	200001e0 	.word	0x200001e0

0800b2ac <malloc>:
 800b2ac:	4b02      	ldr	r3, [pc, #8]	; (800b2b8 <malloc+0xc>)
 800b2ae:	4601      	mov	r1, r0
 800b2b0:	6818      	ldr	r0, [r3, #0]
 800b2b2:	f000 bb45 	b.w	800b940 <_malloc_r>
 800b2b6:	bf00      	nop
 800b2b8:	2000017c 	.word	0x2000017c

0800b2bc <memcpy>:
 800b2bc:	b510      	push	{r4, lr}
 800b2be:	1e43      	subs	r3, r0, #1
 800b2c0:	440a      	add	r2, r1
 800b2c2:	4291      	cmp	r1, r2
 800b2c4:	d100      	bne.n	800b2c8 <memcpy+0xc>
 800b2c6:	bd10      	pop	{r4, pc}
 800b2c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2d0:	e7f7      	b.n	800b2c2 <memcpy+0x6>

0800b2d2 <_Balloc>:
 800b2d2:	b570      	push	{r4, r5, r6, lr}
 800b2d4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	460e      	mov	r6, r1
 800b2da:	b93d      	cbnz	r5, 800b2ec <_Balloc+0x1a>
 800b2dc:	2010      	movs	r0, #16
 800b2de:	f7ff ffe5 	bl	800b2ac <malloc>
 800b2e2:	6260      	str	r0, [r4, #36]	; 0x24
 800b2e4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b2e8:	6005      	str	r5, [r0, #0]
 800b2ea:	60c5      	str	r5, [r0, #12]
 800b2ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b2ee:	68eb      	ldr	r3, [r5, #12]
 800b2f0:	b183      	cbz	r3, 800b314 <_Balloc+0x42>
 800b2f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b2fa:	b9b8      	cbnz	r0, 800b32c <_Balloc+0x5a>
 800b2fc:	2101      	movs	r1, #1
 800b2fe:	fa01 f506 	lsl.w	r5, r1, r6
 800b302:	1d6a      	adds	r2, r5, #5
 800b304:	0092      	lsls	r2, r2, #2
 800b306:	4620      	mov	r0, r4
 800b308:	f000 fabe 	bl	800b888 <_calloc_r>
 800b30c:	b160      	cbz	r0, 800b328 <_Balloc+0x56>
 800b30e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b312:	e00e      	b.n	800b332 <_Balloc+0x60>
 800b314:	2221      	movs	r2, #33	; 0x21
 800b316:	2104      	movs	r1, #4
 800b318:	4620      	mov	r0, r4
 800b31a:	f000 fab5 	bl	800b888 <_calloc_r>
 800b31e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b320:	60e8      	str	r0, [r5, #12]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1e4      	bne.n	800b2f2 <_Balloc+0x20>
 800b328:	2000      	movs	r0, #0
 800b32a:	bd70      	pop	{r4, r5, r6, pc}
 800b32c:	6802      	ldr	r2, [r0, #0]
 800b32e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b332:	2300      	movs	r3, #0
 800b334:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b338:	e7f7      	b.n	800b32a <_Balloc+0x58>

0800b33a <_Bfree>:
 800b33a:	b570      	push	{r4, r5, r6, lr}
 800b33c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b33e:	4606      	mov	r6, r0
 800b340:	460d      	mov	r5, r1
 800b342:	b93c      	cbnz	r4, 800b354 <_Bfree+0x1a>
 800b344:	2010      	movs	r0, #16
 800b346:	f7ff ffb1 	bl	800b2ac <malloc>
 800b34a:	6270      	str	r0, [r6, #36]	; 0x24
 800b34c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b350:	6004      	str	r4, [r0, #0]
 800b352:	60c4      	str	r4, [r0, #12]
 800b354:	b13d      	cbz	r5, 800b366 <_Bfree+0x2c>
 800b356:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b358:	686a      	ldr	r2, [r5, #4]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b360:	6029      	str	r1, [r5, #0]
 800b362:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b366:	bd70      	pop	{r4, r5, r6, pc}

0800b368 <__multadd>:
 800b368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b36c:	690d      	ldr	r5, [r1, #16]
 800b36e:	461f      	mov	r7, r3
 800b370:	4606      	mov	r6, r0
 800b372:	460c      	mov	r4, r1
 800b374:	f101 0c14 	add.w	ip, r1, #20
 800b378:	2300      	movs	r3, #0
 800b37a:	f8dc 0000 	ldr.w	r0, [ip]
 800b37e:	b281      	uxth	r1, r0
 800b380:	fb02 7101 	mla	r1, r2, r1, r7
 800b384:	0c0f      	lsrs	r7, r1, #16
 800b386:	0c00      	lsrs	r0, r0, #16
 800b388:	fb02 7000 	mla	r0, r2, r0, r7
 800b38c:	b289      	uxth	r1, r1
 800b38e:	3301      	adds	r3, #1
 800b390:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b394:	429d      	cmp	r5, r3
 800b396:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b39a:	f84c 1b04 	str.w	r1, [ip], #4
 800b39e:	dcec      	bgt.n	800b37a <__multadd+0x12>
 800b3a0:	b1d7      	cbz	r7, 800b3d8 <__multadd+0x70>
 800b3a2:	68a3      	ldr	r3, [r4, #8]
 800b3a4:	42ab      	cmp	r3, r5
 800b3a6:	dc12      	bgt.n	800b3ce <__multadd+0x66>
 800b3a8:	6861      	ldr	r1, [r4, #4]
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	3101      	adds	r1, #1
 800b3ae:	f7ff ff90 	bl	800b2d2 <_Balloc>
 800b3b2:	6922      	ldr	r2, [r4, #16]
 800b3b4:	3202      	adds	r2, #2
 800b3b6:	f104 010c 	add.w	r1, r4, #12
 800b3ba:	4680      	mov	r8, r0
 800b3bc:	0092      	lsls	r2, r2, #2
 800b3be:	300c      	adds	r0, #12
 800b3c0:	f7ff ff7c 	bl	800b2bc <memcpy>
 800b3c4:	4621      	mov	r1, r4
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	f7ff ffb7 	bl	800b33a <_Bfree>
 800b3cc:	4644      	mov	r4, r8
 800b3ce:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3d2:	3501      	adds	r5, #1
 800b3d4:	615f      	str	r7, [r3, #20]
 800b3d6:	6125      	str	r5, [r4, #16]
 800b3d8:	4620      	mov	r0, r4
 800b3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b3de <__hi0bits>:
 800b3de:	0c02      	lsrs	r2, r0, #16
 800b3e0:	0412      	lsls	r2, r2, #16
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	b9b2      	cbnz	r2, 800b414 <__hi0bits+0x36>
 800b3e6:	0403      	lsls	r3, r0, #16
 800b3e8:	2010      	movs	r0, #16
 800b3ea:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b3ee:	bf04      	itt	eq
 800b3f0:	021b      	lsleq	r3, r3, #8
 800b3f2:	3008      	addeq	r0, #8
 800b3f4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b3f8:	bf04      	itt	eq
 800b3fa:	011b      	lsleq	r3, r3, #4
 800b3fc:	3004      	addeq	r0, #4
 800b3fe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b402:	bf04      	itt	eq
 800b404:	009b      	lsleq	r3, r3, #2
 800b406:	3002      	addeq	r0, #2
 800b408:	2b00      	cmp	r3, #0
 800b40a:	db06      	blt.n	800b41a <__hi0bits+0x3c>
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	d503      	bpl.n	800b418 <__hi0bits+0x3a>
 800b410:	3001      	adds	r0, #1
 800b412:	4770      	bx	lr
 800b414:	2000      	movs	r0, #0
 800b416:	e7e8      	b.n	800b3ea <__hi0bits+0xc>
 800b418:	2020      	movs	r0, #32
 800b41a:	4770      	bx	lr

0800b41c <__lo0bits>:
 800b41c:	6803      	ldr	r3, [r0, #0]
 800b41e:	f013 0207 	ands.w	r2, r3, #7
 800b422:	4601      	mov	r1, r0
 800b424:	d00b      	beq.n	800b43e <__lo0bits+0x22>
 800b426:	07da      	lsls	r2, r3, #31
 800b428:	d423      	bmi.n	800b472 <__lo0bits+0x56>
 800b42a:	0798      	lsls	r0, r3, #30
 800b42c:	bf49      	itett	mi
 800b42e:	085b      	lsrmi	r3, r3, #1
 800b430:	089b      	lsrpl	r3, r3, #2
 800b432:	2001      	movmi	r0, #1
 800b434:	600b      	strmi	r3, [r1, #0]
 800b436:	bf5c      	itt	pl
 800b438:	600b      	strpl	r3, [r1, #0]
 800b43a:	2002      	movpl	r0, #2
 800b43c:	4770      	bx	lr
 800b43e:	b298      	uxth	r0, r3
 800b440:	b9a8      	cbnz	r0, 800b46e <__lo0bits+0x52>
 800b442:	0c1b      	lsrs	r3, r3, #16
 800b444:	2010      	movs	r0, #16
 800b446:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b44a:	bf04      	itt	eq
 800b44c:	0a1b      	lsreq	r3, r3, #8
 800b44e:	3008      	addeq	r0, #8
 800b450:	071a      	lsls	r2, r3, #28
 800b452:	bf04      	itt	eq
 800b454:	091b      	lsreq	r3, r3, #4
 800b456:	3004      	addeq	r0, #4
 800b458:	079a      	lsls	r2, r3, #30
 800b45a:	bf04      	itt	eq
 800b45c:	089b      	lsreq	r3, r3, #2
 800b45e:	3002      	addeq	r0, #2
 800b460:	07da      	lsls	r2, r3, #31
 800b462:	d402      	bmi.n	800b46a <__lo0bits+0x4e>
 800b464:	085b      	lsrs	r3, r3, #1
 800b466:	d006      	beq.n	800b476 <__lo0bits+0x5a>
 800b468:	3001      	adds	r0, #1
 800b46a:	600b      	str	r3, [r1, #0]
 800b46c:	4770      	bx	lr
 800b46e:	4610      	mov	r0, r2
 800b470:	e7e9      	b.n	800b446 <__lo0bits+0x2a>
 800b472:	2000      	movs	r0, #0
 800b474:	4770      	bx	lr
 800b476:	2020      	movs	r0, #32
 800b478:	4770      	bx	lr

0800b47a <__i2b>:
 800b47a:	b510      	push	{r4, lr}
 800b47c:	460c      	mov	r4, r1
 800b47e:	2101      	movs	r1, #1
 800b480:	f7ff ff27 	bl	800b2d2 <_Balloc>
 800b484:	2201      	movs	r2, #1
 800b486:	6144      	str	r4, [r0, #20]
 800b488:	6102      	str	r2, [r0, #16]
 800b48a:	bd10      	pop	{r4, pc}

0800b48c <__multiply>:
 800b48c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b490:	4614      	mov	r4, r2
 800b492:	690a      	ldr	r2, [r1, #16]
 800b494:	6923      	ldr	r3, [r4, #16]
 800b496:	429a      	cmp	r2, r3
 800b498:	bfb8      	it	lt
 800b49a:	460b      	movlt	r3, r1
 800b49c:	4688      	mov	r8, r1
 800b49e:	bfbc      	itt	lt
 800b4a0:	46a0      	movlt	r8, r4
 800b4a2:	461c      	movlt	r4, r3
 800b4a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b4ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4b4:	eb07 0609 	add.w	r6, r7, r9
 800b4b8:	42b3      	cmp	r3, r6
 800b4ba:	bfb8      	it	lt
 800b4bc:	3101      	addlt	r1, #1
 800b4be:	f7ff ff08 	bl	800b2d2 <_Balloc>
 800b4c2:	f100 0514 	add.w	r5, r0, #20
 800b4c6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b4ca:	462b      	mov	r3, r5
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	4573      	cmp	r3, lr
 800b4d0:	d316      	bcc.n	800b500 <__multiply+0x74>
 800b4d2:	f104 0214 	add.w	r2, r4, #20
 800b4d6:	f108 0114 	add.w	r1, r8, #20
 800b4da:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b4de:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	9b00      	ldr	r3, [sp, #0]
 800b4e6:	9201      	str	r2, [sp, #4]
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d80c      	bhi.n	800b506 <__multiply+0x7a>
 800b4ec:	2e00      	cmp	r6, #0
 800b4ee:	dd03      	ble.n	800b4f8 <__multiply+0x6c>
 800b4f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d05d      	beq.n	800b5b4 <__multiply+0x128>
 800b4f8:	6106      	str	r6, [r0, #16]
 800b4fa:	b003      	add	sp, #12
 800b4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b500:	f843 2b04 	str.w	r2, [r3], #4
 800b504:	e7e3      	b.n	800b4ce <__multiply+0x42>
 800b506:	f8b2 b000 	ldrh.w	fp, [r2]
 800b50a:	f1bb 0f00 	cmp.w	fp, #0
 800b50e:	d023      	beq.n	800b558 <__multiply+0xcc>
 800b510:	4689      	mov	r9, r1
 800b512:	46ac      	mov	ip, r5
 800b514:	f04f 0800 	mov.w	r8, #0
 800b518:	f859 4b04 	ldr.w	r4, [r9], #4
 800b51c:	f8dc a000 	ldr.w	sl, [ip]
 800b520:	b2a3      	uxth	r3, r4
 800b522:	fa1f fa8a 	uxth.w	sl, sl
 800b526:	fb0b a303 	mla	r3, fp, r3, sl
 800b52a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b52e:	f8dc 4000 	ldr.w	r4, [ip]
 800b532:	4443      	add	r3, r8
 800b534:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b538:	fb0b 840a 	mla	r4, fp, sl, r8
 800b53c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b540:	46e2      	mov	sl, ip
 800b542:	b29b      	uxth	r3, r3
 800b544:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b548:	454f      	cmp	r7, r9
 800b54a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b54e:	f84a 3b04 	str.w	r3, [sl], #4
 800b552:	d82b      	bhi.n	800b5ac <__multiply+0x120>
 800b554:	f8cc 8004 	str.w	r8, [ip, #4]
 800b558:	9b01      	ldr	r3, [sp, #4]
 800b55a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b55e:	3204      	adds	r2, #4
 800b560:	f1ba 0f00 	cmp.w	sl, #0
 800b564:	d020      	beq.n	800b5a8 <__multiply+0x11c>
 800b566:	682b      	ldr	r3, [r5, #0]
 800b568:	4689      	mov	r9, r1
 800b56a:	46a8      	mov	r8, r5
 800b56c:	f04f 0b00 	mov.w	fp, #0
 800b570:	f8b9 c000 	ldrh.w	ip, [r9]
 800b574:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b578:	fb0a 440c 	mla	r4, sl, ip, r4
 800b57c:	445c      	add	r4, fp
 800b57e:	46c4      	mov	ip, r8
 800b580:	b29b      	uxth	r3, r3
 800b582:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b586:	f84c 3b04 	str.w	r3, [ip], #4
 800b58a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b58e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b592:	0c1b      	lsrs	r3, r3, #16
 800b594:	fb0a b303 	mla	r3, sl, r3, fp
 800b598:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b59c:	454f      	cmp	r7, r9
 800b59e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b5a2:	d805      	bhi.n	800b5b0 <__multiply+0x124>
 800b5a4:	f8c8 3004 	str.w	r3, [r8, #4]
 800b5a8:	3504      	adds	r5, #4
 800b5aa:	e79b      	b.n	800b4e4 <__multiply+0x58>
 800b5ac:	46d4      	mov	ip, sl
 800b5ae:	e7b3      	b.n	800b518 <__multiply+0x8c>
 800b5b0:	46e0      	mov	r8, ip
 800b5b2:	e7dd      	b.n	800b570 <__multiply+0xe4>
 800b5b4:	3e01      	subs	r6, #1
 800b5b6:	e799      	b.n	800b4ec <__multiply+0x60>

0800b5b8 <__pow5mult>:
 800b5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5bc:	4615      	mov	r5, r2
 800b5be:	f012 0203 	ands.w	r2, r2, #3
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	460f      	mov	r7, r1
 800b5c6:	d007      	beq.n	800b5d8 <__pow5mult+0x20>
 800b5c8:	3a01      	subs	r2, #1
 800b5ca:	4c21      	ldr	r4, [pc, #132]	; (800b650 <__pow5mult+0x98>)
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5d2:	f7ff fec9 	bl	800b368 <__multadd>
 800b5d6:	4607      	mov	r7, r0
 800b5d8:	10ad      	asrs	r5, r5, #2
 800b5da:	d035      	beq.n	800b648 <__pow5mult+0x90>
 800b5dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5de:	b93c      	cbnz	r4, 800b5f0 <__pow5mult+0x38>
 800b5e0:	2010      	movs	r0, #16
 800b5e2:	f7ff fe63 	bl	800b2ac <malloc>
 800b5e6:	6270      	str	r0, [r6, #36]	; 0x24
 800b5e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5ec:	6004      	str	r4, [r0, #0]
 800b5ee:	60c4      	str	r4, [r0, #12]
 800b5f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5f8:	b94c      	cbnz	r4, 800b60e <__pow5mult+0x56>
 800b5fa:	f240 2171 	movw	r1, #625	; 0x271
 800b5fe:	4630      	mov	r0, r6
 800b600:	f7ff ff3b 	bl	800b47a <__i2b>
 800b604:	2300      	movs	r3, #0
 800b606:	f8c8 0008 	str.w	r0, [r8, #8]
 800b60a:	4604      	mov	r4, r0
 800b60c:	6003      	str	r3, [r0, #0]
 800b60e:	f04f 0800 	mov.w	r8, #0
 800b612:	07eb      	lsls	r3, r5, #31
 800b614:	d50a      	bpl.n	800b62c <__pow5mult+0x74>
 800b616:	4639      	mov	r1, r7
 800b618:	4622      	mov	r2, r4
 800b61a:	4630      	mov	r0, r6
 800b61c:	f7ff ff36 	bl	800b48c <__multiply>
 800b620:	4639      	mov	r1, r7
 800b622:	4681      	mov	r9, r0
 800b624:	4630      	mov	r0, r6
 800b626:	f7ff fe88 	bl	800b33a <_Bfree>
 800b62a:	464f      	mov	r7, r9
 800b62c:	106d      	asrs	r5, r5, #1
 800b62e:	d00b      	beq.n	800b648 <__pow5mult+0x90>
 800b630:	6820      	ldr	r0, [r4, #0]
 800b632:	b938      	cbnz	r0, 800b644 <__pow5mult+0x8c>
 800b634:	4622      	mov	r2, r4
 800b636:	4621      	mov	r1, r4
 800b638:	4630      	mov	r0, r6
 800b63a:	f7ff ff27 	bl	800b48c <__multiply>
 800b63e:	6020      	str	r0, [r4, #0]
 800b640:	f8c0 8000 	str.w	r8, [r0]
 800b644:	4604      	mov	r4, r0
 800b646:	e7e4      	b.n	800b612 <__pow5mult+0x5a>
 800b648:	4638      	mov	r0, r7
 800b64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b64e:	bf00      	nop
 800b650:	0800d0b8 	.word	0x0800d0b8

0800b654 <__lshift>:
 800b654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b658:	460c      	mov	r4, r1
 800b65a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b65e:	6923      	ldr	r3, [r4, #16]
 800b660:	6849      	ldr	r1, [r1, #4]
 800b662:	eb0a 0903 	add.w	r9, sl, r3
 800b666:	68a3      	ldr	r3, [r4, #8]
 800b668:	4607      	mov	r7, r0
 800b66a:	4616      	mov	r6, r2
 800b66c:	f109 0501 	add.w	r5, r9, #1
 800b670:	42ab      	cmp	r3, r5
 800b672:	db32      	blt.n	800b6da <__lshift+0x86>
 800b674:	4638      	mov	r0, r7
 800b676:	f7ff fe2c 	bl	800b2d2 <_Balloc>
 800b67a:	2300      	movs	r3, #0
 800b67c:	4680      	mov	r8, r0
 800b67e:	f100 0114 	add.w	r1, r0, #20
 800b682:	461a      	mov	r2, r3
 800b684:	4553      	cmp	r3, sl
 800b686:	db2b      	blt.n	800b6e0 <__lshift+0x8c>
 800b688:	6920      	ldr	r0, [r4, #16]
 800b68a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b68e:	f104 0314 	add.w	r3, r4, #20
 800b692:	f016 021f 	ands.w	r2, r6, #31
 800b696:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b69a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b69e:	d025      	beq.n	800b6ec <__lshift+0x98>
 800b6a0:	f1c2 0e20 	rsb	lr, r2, #32
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	681e      	ldr	r6, [r3, #0]
 800b6a8:	468a      	mov	sl, r1
 800b6aa:	4096      	lsls	r6, r2
 800b6ac:	4330      	orrs	r0, r6
 800b6ae:	f84a 0b04 	str.w	r0, [sl], #4
 800b6b2:	f853 0b04 	ldr.w	r0, [r3], #4
 800b6b6:	459c      	cmp	ip, r3
 800b6b8:	fa20 f00e 	lsr.w	r0, r0, lr
 800b6bc:	d814      	bhi.n	800b6e8 <__lshift+0x94>
 800b6be:	6048      	str	r0, [r1, #4]
 800b6c0:	b108      	cbz	r0, 800b6c6 <__lshift+0x72>
 800b6c2:	f109 0502 	add.w	r5, r9, #2
 800b6c6:	3d01      	subs	r5, #1
 800b6c8:	4638      	mov	r0, r7
 800b6ca:	f8c8 5010 	str.w	r5, [r8, #16]
 800b6ce:	4621      	mov	r1, r4
 800b6d0:	f7ff fe33 	bl	800b33a <_Bfree>
 800b6d4:	4640      	mov	r0, r8
 800b6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6da:	3101      	adds	r1, #1
 800b6dc:	005b      	lsls	r3, r3, #1
 800b6de:	e7c7      	b.n	800b670 <__lshift+0x1c>
 800b6e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	e7cd      	b.n	800b684 <__lshift+0x30>
 800b6e8:	4651      	mov	r1, sl
 800b6ea:	e7dc      	b.n	800b6a6 <__lshift+0x52>
 800b6ec:	3904      	subs	r1, #4
 800b6ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6f2:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6f6:	459c      	cmp	ip, r3
 800b6f8:	d8f9      	bhi.n	800b6ee <__lshift+0x9a>
 800b6fa:	e7e4      	b.n	800b6c6 <__lshift+0x72>

0800b6fc <__mcmp>:
 800b6fc:	6903      	ldr	r3, [r0, #16]
 800b6fe:	690a      	ldr	r2, [r1, #16]
 800b700:	1a9b      	subs	r3, r3, r2
 800b702:	b530      	push	{r4, r5, lr}
 800b704:	d10c      	bne.n	800b720 <__mcmp+0x24>
 800b706:	0092      	lsls	r2, r2, #2
 800b708:	3014      	adds	r0, #20
 800b70a:	3114      	adds	r1, #20
 800b70c:	1884      	adds	r4, r0, r2
 800b70e:	4411      	add	r1, r2
 800b710:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b714:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b718:	4295      	cmp	r5, r2
 800b71a:	d003      	beq.n	800b724 <__mcmp+0x28>
 800b71c:	d305      	bcc.n	800b72a <__mcmp+0x2e>
 800b71e:	2301      	movs	r3, #1
 800b720:	4618      	mov	r0, r3
 800b722:	bd30      	pop	{r4, r5, pc}
 800b724:	42a0      	cmp	r0, r4
 800b726:	d3f3      	bcc.n	800b710 <__mcmp+0x14>
 800b728:	e7fa      	b.n	800b720 <__mcmp+0x24>
 800b72a:	f04f 33ff 	mov.w	r3, #4294967295
 800b72e:	e7f7      	b.n	800b720 <__mcmp+0x24>

0800b730 <__mdiff>:
 800b730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b734:	460d      	mov	r5, r1
 800b736:	4607      	mov	r7, r0
 800b738:	4611      	mov	r1, r2
 800b73a:	4628      	mov	r0, r5
 800b73c:	4614      	mov	r4, r2
 800b73e:	f7ff ffdd 	bl	800b6fc <__mcmp>
 800b742:	1e06      	subs	r6, r0, #0
 800b744:	d108      	bne.n	800b758 <__mdiff+0x28>
 800b746:	4631      	mov	r1, r6
 800b748:	4638      	mov	r0, r7
 800b74a:	f7ff fdc2 	bl	800b2d2 <_Balloc>
 800b74e:	2301      	movs	r3, #1
 800b750:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b758:	bfa4      	itt	ge
 800b75a:	4623      	movge	r3, r4
 800b75c:	462c      	movge	r4, r5
 800b75e:	4638      	mov	r0, r7
 800b760:	6861      	ldr	r1, [r4, #4]
 800b762:	bfa6      	itte	ge
 800b764:	461d      	movge	r5, r3
 800b766:	2600      	movge	r6, #0
 800b768:	2601      	movlt	r6, #1
 800b76a:	f7ff fdb2 	bl	800b2d2 <_Balloc>
 800b76e:	692b      	ldr	r3, [r5, #16]
 800b770:	60c6      	str	r6, [r0, #12]
 800b772:	6926      	ldr	r6, [r4, #16]
 800b774:	f105 0914 	add.w	r9, r5, #20
 800b778:	f104 0214 	add.w	r2, r4, #20
 800b77c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b780:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b784:	f100 0514 	add.w	r5, r0, #20
 800b788:	f04f 0e00 	mov.w	lr, #0
 800b78c:	f852 ab04 	ldr.w	sl, [r2], #4
 800b790:	f859 4b04 	ldr.w	r4, [r9], #4
 800b794:	fa1e f18a 	uxtah	r1, lr, sl
 800b798:	b2a3      	uxth	r3, r4
 800b79a:	1ac9      	subs	r1, r1, r3
 800b79c:	0c23      	lsrs	r3, r4, #16
 800b79e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b7a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b7a6:	b289      	uxth	r1, r1
 800b7a8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b7ac:	45c8      	cmp	r8, r9
 800b7ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b7b2:	4694      	mov	ip, r2
 800b7b4:	f845 3b04 	str.w	r3, [r5], #4
 800b7b8:	d8e8      	bhi.n	800b78c <__mdiff+0x5c>
 800b7ba:	45bc      	cmp	ip, r7
 800b7bc:	d304      	bcc.n	800b7c8 <__mdiff+0x98>
 800b7be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b7c2:	b183      	cbz	r3, 800b7e6 <__mdiff+0xb6>
 800b7c4:	6106      	str	r6, [r0, #16]
 800b7c6:	e7c5      	b.n	800b754 <__mdiff+0x24>
 800b7c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b7cc:	fa1e f381 	uxtah	r3, lr, r1
 800b7d0:	141a      	asrs	r2, r3, #16
 800b7d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7dc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b7e0:	f845 3b04 	str.w	r3, [r5], #4
 800b7e4:	e7e9      	b.n	800b7ba <__mdiff+0x8a>
 800b7e6:	3e01      	subs	r6, #1
 800b7e8:	e7e9      	b.n	800b7be <__mdiff+0x8e>

0800b7ea <__d2b>:
 800b7ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7ee:	460e      	mov	r6, r1
 800b7f0:	2101      	movs	r1, #1
 800b7f2:	ec59 8b10 	vmov	r8, r9, d0
 800b7f6:	4615      	mov	r5, r2
 800b7f8:	f7ff fd6b 	bl	800b2d2 <_Balloc>
 800b7fc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b800:	4607      	mov	r7, r0
 800b802:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b806:	bb34      	cbnz	r4, 800b856 <__d2b+0x6c>
 800b808:	9301      	str	r3, [sp, #4]
 800b80a:	f1b8 0300 	subs.w	r3, r8, #0
 800b80e:	d027      	beq.n	800b860 <__d2b+0x76>
 800b810:	a802      	add	r0, sp, #8
 800b812:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b816:	f7ff fe01 	bl	800b41c <__lo0bits>
 800b81a:	9900      	ldr	r1, [sp, #0]
 800b81c:	b1f0      	cbz	r0, 800b85c <__d2b+0x72>
 800b81e:	9a01      	ldr	r2, [sp, #4]
 800b820:	f1c0 0320 	rsb	r3, r0, #32
 800b824:	fa02 f303 	lsl.w	r3, r2, r3
 800b828:	430b      	orrs	r3, r1
 800b82a:	40c2      	lsrs	r2, r0
 800b82c:	617b      	str	r3, [r7, #20]
 800b82e:	9201      	str	r2, [sp, #4]
 800b830:	9b01      	ldr	r3, [sp, #4]
 800b832:	61bb      	str	r3, [r7, #24]
 800b834:	2b00      	cmp	r3, #0
 800b836:	bf14      	ite	ne
 800b838:	2102      	movne	r1, #2
 800b83a:	2101      	moveq	r1, #1
 800b83c:	6139      	str	r1, [r7, #16]
 800b83e:	b1c4      	cbz	r4, 800b872 <__d2b+0x88>
 800b840:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b844:	4404      	add	r4, r0
 800b846:	6034      	str	r4, [r6, #0]
 800b848:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b84c:	6028      	str	r0, [r5, #0]
 800b84e:	4638      	mov	r0, r7
 800b850:	b003      	add	sp, #12
 800b852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b85a:	e7d5      	b.n	800b808 <__d2b+0x1e>
 800b85c:	6179      	str	r1, [r7, #20]
 800b85e:	e7e7      	b.n	800b830 <__d2b+0x46>
 800b860:	a801      	add	r0, sp, #4
 800b862:	f7ff fddb 	bl	800b41c <__lo0bits>
 800b866:	9b01      	ldr	r3, [sp, #4]
 800b868:	617b      	str	r3, [r7, #20]
 800b86a:	2101      	movs	r1, #1
 800b86c:	6139      	str	r1, [r7, #16]
 800b86e:	3020      	adds	r0, #32
 800b870:	e7e5      	b.n	800b83e <__d2b+0x54>
 800b872:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b876:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b87a:	6030      	str	r0, [r6, #0]
 800b87c:	6918      	ldr	r0, [r3, #16]
 800b87e:	f7ff fdae 	bl	800b3de <__hi0bits>
 800b882:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b886:	e7e1      	b.n	800b84c <__d2b+0x62>

0800b888 <_calloc_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	fb02 f401 	mul.w	r4, r2, r1
 800b88e:	4621      	mov	r1, r4
 800b890:	f000 f856 	bl	800b940 <_malloc_r>
 800b894:	4605      	mov	r5, r0
 800b896:	b118      	cbz	r0, 800b8a0 <_calloc_r+0x18>
 800b898:	4622      	mov	r2, r4
 800b89a:	2100      	movs	r1, #0
 800b89c:	f7fe fa30 	bl	8009d00 <memset>
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}

0800b8a4 <_free_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	2900      	cmp	r1, #0
 800b8aa:	d045      	beq.n	800b938 <_free_r+0x94>
 800b8ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8b0:	1f0c      	subs	r4, r1, #4
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	bfb8      	it	lt
 800b8b6:	18e4      	addlt	r4, r4, r3
 800b8b8:	f000 fa29 	bl	800bd0e <__malloc_lock>
 800b8bc:	4a1f      	ldr	r2, [pc, #124]	; (800b93c <_free_r+0x98>)
 800b8be:	6813      	ldr	r3, [r2, #0]
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	b933      	cbnz	r3, 800b8d2 <_free_r+0x2e>
 800b8c4:	6063      	str	r3, [r4, #4]
 800b8c6:	6014      	str	r4, [r2, #0]
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8ce:	f000 ba1f 	b.w	800bd10 <__malloc_unlock>
 800b8d2:	42a3      	cmp	r3, r4
 800b8d4:	d90c      	bls.n	800b8f0 <_free_r+0x4c>
 800b8d6:	6821      	ldr	r1, [r4, #0]
 800b8d8:	1862      	adds	r2, r4, r1
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	bf04      	itt	eq
 800b8de:	681a      	ldreq	r2, [r3, #0]
 800b8e0:	685b      	ldreq	r3, [r3, #4]
 800b8e2:	6063      	str	r3, [r4, #4]
 800b8e4:	bf04      	itt	eq
 800b8e6:	1852      	addeq	r2, r2, r1
 800b8e8:	6022      	streq	r2, [r4, #0]
 800b8ea:	6004      	str	r4, [r0, #0]
 800b8ec:	e7ec      	b.n	800b8c8 <_free_r+0x24>
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	685a      	ldr	r2, [r3, #4]
 800b8f2:	b10a      	cbz	r2, 800b8f8 <_free_r+0x54>
 800b8f4:	42a2      	cmp	r2, r4
 800b8f6:	d9fa      	bls.n	800b8ee <_free_r+0x4a>
 800b8f8:	6819      	ldr	r1, [r3, #0]
 800b8fa:	1858      	adds	r0, r3, r1
 800b8fc:	42a0      	cmp	r0, r4
 800b8fe:	d10b      	bne.n	800b918 <_free_r+0x74>
 800b900:	6820      	ldr	r0, [r4, #0]
 800b902:	4401      	add	r1, r0
 800b904:	1858      	adds	r0, r3, r1
 800b906:	4282      	cmp	r2, r0
 800b908:	6019      	str	r1, [r3, #0]
 800b90a:	d1dd      	bne.n	800b8c8 <_free_r+0x24>
 800b90c:	6810      	ldr	r0, [r2, #0]
 800b90e:	6852      	ldr	r2, [r2, #4]
 800b910:	605a      	str	r2, [r3, #4]
 800b912:	4401      	add	r1, r0
 800b914:	6019      	str	r1, [r3, #0]
 800b916:	e7d7      	b.n	800b8c8 <_free_r+0x24>
 800b918:	d902      	bls.n	800b920 <_free_r+0x7c>
 800b91a:	230c      	movs	r3, #12
 800b91c:	602b      	str	r3, [r5, #0]
 800b91e:	e7d3      	b.n	800b8c8 <_free_r+0x24>
 800b920:	6820      	ldr	r0, [r4, #0]
 800b922:	1821      	adds	r1, r4, r0
 800b924:	428a      	cmp	r2, r1
 800b926:	bf04      	itt	eq
 800b928:	6811      	ldreq	r1, [r2, #0]
 800b92a:	6852      	ldreq	r2, [r2, #4]
 800b92c:	6062      	str	r2, [r4, #4]
 800b92e:	bf04      	itt	eq
 800b930:	1809      	addeq	r1, r1, r0
 800b932:	6021      	streq	r1, [r4, #0]
 800b934:	605c      	str	r4, [r3, #4]
 800b936:	e7c7      	b.n	800b8c8 <_free_r+0x24>
 800b938:	bd38      	pop	{r3, r4, r5, pc}
 800b93a:	bf00      	nop
 800b93c:	20000594 	.word	0x20000594

0800b940 <_malloc_r>:
 800b940:	b570      	push	{r4, r5, r6, lr}
 800b942:	1ccd      	adds	r5, r1, #3
 800b944:	f025 0503 	bic.w	r5, r5, #3
 800b948:	3508      	adds	r5, #8
 800b94a:	2d0c      	cmp	r5, #12
 800b94c:	bf38      	it	cc
 800b94e:	250c      	movcc	r5, #12
 800b950:	2d00      	cmp	r5, #0
 800b952:	4606      	mov	r6, r0
 800b954:	db01      	blt.n	800b95a <_malloc_r+0x1a>
 800b956:	42a9      	cmp	r1, r5
 800b958:	d903      	bls.n	800b962 <_malloc_r+0x22>
 800b95a:	230c      	movs	r3, #12
 800b95c:	6033      	str	r3, [r6, #0]
 800b95e:	2000      	movs	r0, #0
 800b960:	bd70      	pop	{r4, r5, r6, pc}
 800b962:	f000 f9d4 	bl	800bd0e <__malloc_lock>
 800b966:	4a21      	ldr	r2, [pc, #132]	; (800b9ec <_malloc_r+0xac>)
 800b968:	6814      	ldr	r4, [r2, #0]
 800b96a:	4621      	mov	r1, r4
 800b96c:	b991      	cbnz	r1, 800b994 <_malloc_r+0x54>
 800b96e:	4c20      	ldr	r4, [pc, #128]	; (800b9f0 <_malloc_r+0xb0>)
 800b970:	6823      	ldr	r3, [r4, #0]
 800b972:	b91b      	cbnz	r3, 800b97c <_malloc_r+0x3c>
 800b974:	4630      	mov	r0, r6
 800b976:	f000 f98f 	bl	800bc98 <_sbrk_r>
 800b97a:	6020      	str	r0, [r4, #0]
 800b97c:	4629      	mov	r1, r5
 800b97e:	4630      	mov	r0, r6
 800b980:	f000 f98a 	bl	800bc98 <_sbrk_r>
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	d124      	bne.n	800b9d2 <_malloc_r+0x92>
 800b988:	230c      	movs	r3, #12
 800b98a:	6033      	str	r3, [r6, #0]
 800b98c:	4630      	mov	r0, r6
 800b98e:	f000 f9bf 	bl	800bd10 <__malloc_unlock>
 800b992:	e7e4      	b.n	800b95e <_malloc_r+0x1e>
 800b994:	680b      	ldr	r3, [r1, #0]
 800b996:	1b5b      	subs	r3, r3, r5
 800b998:	d418      	bmi.n	800b9cc <_malloc_r+0x8c>
 800b99a:	2b0b      	cmp	r3, #11
 800b99c:	d90f      	bls.n	800b9be <_malloc_r+0x7e>
 800b99e:	600b      	str	r3, [r1, #0]
 800b9a0:	50cd      	str	r5, [r1, r3]
 800b9a2:	18cc      	adds	r4, r1, r3
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	f000 f9b3 	bl	800bd10 <__malloc_unlock>
 800b9aa:	f104 000b 	add.w	r0, r4, #11
 800b9ae:	1d23      	adds	r3, r4, #4
 800b9b0:	f020 0007 	bic.w	r0, r0, #7
 800b9b4:	1ac3      	subs	r3, r0, r3
 800b9b6:	d0d3      	beq.n	800b960 <_malloc_r+0x20>
 800b9b8:	425a      	negs	r2, r3
 800b9ba:	50e2      	str	r2, [r4, r3]
 800b9bc:	e7d0      	b.n	800b960 <_malloc_r+0x20>
 800b9be:	428c      	cmp	r4, r1
 800b9c0:	684b      	ldr	r3, [r1, #4]
 800b9c2:	bf16      	itet	ne
 800b9c4:	6063      	strne	r3, [r4, #4]
 800b9c6:	6013      	streq	r3, [r2, #0]
 800b9c8:	460c      	movne	r4, r1
 800b9ca:	e7eb      	b.n	800b9a4 <_malloc_r+0x64>
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	6849      	ldr	r1, [r1, #4]
 800b9d0:	e7cc      	b.n	800b96c <_malloc_r+0x2c>
 800b9d2:	1cc4      	adds	r4, r0, #3
 800b9d4:	f024 0403 	bic.w	r4, r4, #3
 800b9d8:	42a0      	cmp	r0, r4
 800b9da:	d005      	beq.n	800b9e8 <_malloc_r+0xa8>
 800b9dc:	1a21      	subs	r1, r4, r0
 800b9de:	4630      	mov	r0, r6
 800b9e0:	f000 f95a 	bl	800bc98 <_sbrk_r>
 800b9e4:	3001      	adds	r0, #1
 800b9e6:	d0cf      	beq.n	800b988 <_malloc_r+0x48>
 800b9e8:	6025      	str	r5, [r4, #0]
 800b9ea:	e7db      	b.n	800b9a4 <_malloc_r+0x64>
 800b9ec:	20000594 	.word	0x20000594
 800b9f0:	20000598 	.word	0x20000598

0800b9f4 <__ssputs_r>:
 800b9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9f8:	688e      	ldr	r6, [r1, #8]
 800b9fa:	429e      	cmp	r6, r3
 800b9fc:	4682      	mov	sl, r0
 800b9fe:	460c      	mov	r4, r1
 800ba00:	4690      	mov	r8, r2
 800ba02:	4699      	mov	r9, r3
 800ba04:	d837      	bhi.n	800ba76 <__ssputs_r+0x82>
 800ba06:	898a      	ldrh	r2, [r1, #12]
 800ba08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba0c:	d031      	beq.n	800ba72 <__ssputs_r+0x7e>
 800ba0e:	6825      	ldr	r5, [r4, #0]
 800ba10:	6909      	ldr	r1, [r1, #16]
 800ba12:	1a6f      	subs	r7, r5, r1
 800ba14:	6965      	ldr	r5, [r4, #20]
 800ba16:	2302      	movs	r3, #2
 800ba18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba1c:	fb95 f5f3 	sdiv	r5, r5, r3
 800ba20:	f109 0301 	add.w	r3, r9, #1
 800ba24:	443b      	add	r3, r7
 800ba26:	429d      	cmp	r5, r3
 800ba28:	bf38      	it	cc
 800ba2a:	461d      	movcc	r5, r3
 800ba2c:	0553      	lsls	r3, r2, #21
 800ba2e:	d530      	bpl.n	800ba92 <__ssputs_r+0x9e>
 800ba30:	4629      	mov	r1, r5
 800ba32:	f7ff ff85 	bl	800b940 <_malloc_r>
 800ba36:	4606      	mov	r6, r0
 800ba38:	b950      	cbnz	r0, 800ba50 <__ssputs_r+0x5c>
 800ba3a:	230c      	movs	r3, #12
 800ba3c:	f8ca 3000 	str.w	r3, [sl]
 800ba40:	89a3      	ldrh	r3, [r4, #12]
 800ba42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba46:	81a3      	strh	r3, [r4, #12]
 800ba48:	f04f 30ff 	mov.w	r0, #4294967295
 800ba4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba50:	463a      	mov	r2, r7
 800ba52:	6921      	ldr	r1, [r4, #16]
 800ba54:	f7ff fc32 	bl	800b2bc <memcpy>
 800ba58:	89a3      	ldrh	r3, [r4, #12]
 800ba5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba62:	81a3      	strh	r3, [r4, #12]
 800ba64:	6126      	str	r6, [r4, #16]
 800ba66:	6165      	str	r5, [r4, #20]
 800ba68:	443e      	add	r6, r7
 800ba6a:	1bed      	subs	r5, r5, r7
 800ba6c:	6026      	str	r6, [r4, #0]
 800ba6e:	60a5      	str	r5, [r4, #8]
 800ba70:	464e      	mov	r6, r9
 800ba72:	454e      	cmp	r6, r9
 800ba74:	d900      	bls.n	800ba78 <__ssputs_r+0x84>
 800ba76:	464e      	mov	r6, r9
 800ba78:	4632      	mov	r2, r6
 800ba7a:	4641      	mov	r1, r8
 800ba7c:	6820      	ldr	r0, [r4, #0]
 800ba7e:	f000 f92d 	bl	800bcdc <memmove>
 800ba82:	68a3      	ldr	r3, [r4, #8]
 800ba84:	1b9b      	subs	r3, r3, r6
 800ba86:	60a3      	str	r3, [r4, #8]
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	441e      	add	r6, r3
 800ba8c:	6026      	str	r6, [r4, #0]
 800ba8e:	2000      	movs	r0, #0
 800ba90:	e7dc      	b.n	800ba4c <__ssputs_r+0x58>
 800ba92:	462a      	mov	r2, r5
 800ba94:	f000 f93d 	bl	800bd12 <_realloc_r>
 800ba98:	4606      	mov	r6, r0
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d1e2      	bne.n	800ba64 <__ssputs_r+0x70>
 800ba9e:	6921      	ldr	r1, [r4, #16]
 800baa0:	4650      	mov	r0, sl
 800baa2:	f7ff feff 	bl	800b8a4 <_free_r>
 800baa6:	e7c8      	b.n	800ba3a <__ssputs_r+0x46>

0800baa8 <_svfiprintf_r>:
 800baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baac:	461d      	mov	r5, r3
 800baae:	898b      	ldrh	r3, [r1, #12]
 800bab0:	061f      	lsls	r7, r3, #24
 800bab2:	b09d      	sub	sp, #116	; 0x74
 800bab4:	4680      	mov	r8, r0
 800bab6:	460c      	mov	r4, r1
 800bab8:	4616      	mov	r6, r2
 800baba:	d50f      	bpl.n	800badc <_svfiprintf_r+0x34>
 800babc:	690b      	ldr	r3, [r1, #16]
 800babe:	b96b      	cbnz	r3, 800badc <_svfiprintf_r+0x34>
 800bac0:	2140      	movs	r1, #64	; 0x40
 800bac2:	f7ff ff3d 	bl	800b940 <_malloc_r>
 800bac6:	6020      	str	r0, [r4, #0]
 800bac8:	6120      	str	r0, [r4, #16]
 800baca:	b928      	cbnz	r0, 800bad8 <_svfiprintf_r+0x30>
 800bacc:	230c      	movs	r3, #12
 800bace:	f8c8 3000 	str.w	r3, [r8]
 800bad2:	f04f 30ff 	mov.w	r0, #4294967295
 800bad6:	e0c8      	b.n	800bc6a <_svfiprintf_r+0x1c2>
 800bad8:	2340      	movs	r3, #64	; 0x40
 800bada:	6163      	str	r3, [r4, #20]
 800badc:	2300      	movs	r3, #0
 800bade:	9309      	str	r3, [sp, #36]	; 0x24
 800bae0:	2320      	movs	r3, #32
 800bae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bae6:	2330      	movs	r3, #48	; 0x30
 800bae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baec:	9503      	str	r5, [sp, #12]
 800baee:	f04f 0b01 	mov.w	fp, #1
 800baf2:	4637      	mov	r7, r6
 800baf4:	463d      	mov	r5, r7
 800baf6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bafa:	b10b      	cbz	r3, 800bb00 <_svfiprintf_r+0x58>
 800bafc:	2b25      	cmp	r3, #37	; 0x25
 800bafe:	d13e      	bne.n	800bb7e <_svfiprintf_r+0xd6>
 800bb00:	ebb7 0a06 	subs.w	sl, r7, r6
 800bb04:	d00b      	beq.n	800bb1e <_svfiprintf_r+0x76>
 800bb06:	4653      	mov	r3, sl
 800bb08:	4632      	mov	r2, r6
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	4640      	mov	r0, r8
 800bb0e:	f7ff ff71 	bl	800b9f4 <__ssputs_r>
 800bb12:	3001      	adds	r0, #1
 800bb14:	f000 80a4 	beq.w	800bc60 <_svfiprintf_r+0x1b8>
 800bb18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb1a:	4453      	add	r3, sl
 800bb1c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb1e:	783b      	ldrb	r3, [r7, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 809d 	beq.w	800bc60 <_svfiprintf_r+0x1b8>
 800bb26:	2300      	movs	r3, #0
 800bb28:	f04f 32ff 	mov.w	r2, #4294967295
 800bb2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb30:	9304      	str	r3, [sp, #16]
 800bb32:	9307      	str	r3, [sp, #28]
 800bb34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb38:	931a      	str	r3, [sp, #104]	; 0x68
 800bb3a:	462f      	mov	r7, r5
 800bb3c:	2205      	movs	r2, #5
 800bb3e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bb42:	4850      	ldr	r0, [pc, #320]	; (800bc84 <_svfiprintf_r+0x1dc>)
 800bb44:	f7f4 fb4c 	bl	80001e0 <memchr>
 800bb48:	9b04      	ldr	r3, [sp, #16]
 800bb4a:	b9d0      	cbnz	r0, 800bb82 <_svfiprintf_r+0xda>
 800bb4c:	06d9      	lsls	r1, r3, #27
 800bb4e:	bf44      	itt	mi
 800bb50:	2220      	movmi	r2, #32
 800bb52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb56:	071a      	lsls	r2, r3, #28
 800bb58:	bf44      	itt	mi
 800bb5a:	222b      	movmi	r2, #43	; 0x2b
 800bb5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb60:	782a      	ldrb	r2, [r5, #0]
 800bb62:	2a2a      	cmp	r2, #42	; 0x2a
 800bb64:	d015      	beq.n	800bb92 <_svfiprintf_r+0xea>
 800bb66:	9a07      	ldr	r2, [sp, #28]
 800bb68:	462f      	mov	r7, r5
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	250a      	movs	r5, #10
 800bb6e:	4639      	mov	r1, r7
 800bb70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb74:	3b30      	subs	r3, #48	; 0x30
 800bb76:	2b09      	cmp	r3, #9
 800bb78:	d94d      	bls.n	800bc16 <_svfiprintf_r+0x16e>
 800bb7a:	b1b8      	cbz	r0, 800bbac <_svfiprintf_r+0x104>
 800bb7c:	e00f      	b.n	800bb9e <_svfiprintf_r+0xf6>
 800bb7e:	462f      	mov	r7, r5
 800bb80:	e7b8      	b.n	800baf4 <_svfiprintf_r+0x4c>
 800bb82:	4a40      	ldr	r2, [pc, #256]	; (800bc84 <_svfiprintf_r+0x1dc>)
 800bb84:	1a80      	subs	r0, r0, r2
 800bb86:	fa0b f000 	lsl.w	r0, fp, r0
 800bb8a:	4318      	orrs	r0, r3
 800bb8c:	9004      	str	r0, [sp, #16]
 800bb8e:	463d      	mov	r5, r7
 800bb90:	e7d3      	b.n	800bb3a <_svfiprintf_r+0x92>
 800bb92:	9a03      	ldr	r2, [sp, #12]
 800bb94:	1d11      	adds	r1, r2, #4
 800bb96:	6812      	ldr	r2, [r2, #0]
 800bb98:	9103      	str	r1, [sp, #12]
 800bb9a:	2a00      	cmp	r2, #0
 800bb9c:	db01      	blt.n	800bba2 <_svfiprintf_r+0xfa>
 800bb9e:	9207      	str	r2, [sp, #28]
 800bba0:	e004      	b.n	800bbac <_svfiprintf_r+0x104>
 800bba2:	4252      	negs	r2, r2
 800bba4:	f043 0302 	orr.w	r3, r3, #2
 800bba8:	9207      	str	r2, [sp, #28]
 800bbaa:	9304      	str	r3, [sp, #16]
 800bbac:	783b      	ldrb	r3, [r7, #0]
 800bbae:	2b2e      	cmp	r3, #46	; 0x2e
 800bbb0:	d10c      	bne.n	800bbcc <_svfiprintf_r+0x124>
 800bbb2:	787b      	ldrb	r3, [r7, #1]
 800bbb4:	2b2a      	cmp	r3, #42	; 0x2a
 800bbb6:	d133      	bne.n	800bc20 <_svfiprintf_r+0x178>
 800bbb8:	9b03      	ldr	r3, [sp, #12]
 800bbba:	1d1a      	adds	r2, r3, #4
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	9203      	str	r2, [sp, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	bfb8      	it	lt
 800bbc4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbc8:	3702      	adds	r7, #2
 800bbca:	9305      	str	r3, [sp, #20]
 800bbcc:	4d2e      	ldr	r5, [pc, #184]	; (800bc88 <_svfiprintf_r+0x1e0>)
 800bbce:	7839      	ldrb	r1, [r7, #0]
 800bbd0:	2203      	movs	r2, #3
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f7f4 fb04 	bl	80001e0 <memchr>
 800bbd8:	b138      	cbz	r0, 800bbea <_svfiprintf_r+0x142>
 800bbda:	2340      	movs	r3, #64	; 0x40
 800bbdc:	1b40      	subs	r0, r0, r5
 800bbde:	fa03 f000 	lsl.w	r0, r3, r0
 800bbe2:	9b04      	ldr	r3, [sp, #16]
 800bbe4:	4303      	orrs	r3, r0
 800bbe6:	3701      	adds	r7, #1
 800bbe8:	9304      	str	r3, [sp, #16]
 800bbea:	7839      	ldrb	r1, [r7, #0]
 800bbec:	4827      	ldr	r0, [pc, #156]	; (800bc8c <_svfiprintf_r+0x1e4>)
 800bbee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbf2:	2206      	movs	r2, #6
 800bbf4:	1c7e      	adds	r6, r7, #1
 800bbf6:	f7f4 faf3 	bl	80001e0 <memchr>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	d038      	beq.n	800bc70 <_svfiprintf_r+0x1c8>
 800bbfe:	4b24      	ldr	r3, [pc, #144]	; (800bc90 <_svfiprintf_r+0x1e8>)
 800bc00:	bb13      	cbnz	r3, 800bc48 <_svfiprintf_r+0x1a0>
 800bc02:	9b03      	ldr	r3, [sp, #12]
 800bc04:	3307      	adds	r3, #7
 800bc06:	f023 0307 	bic.w	r3, r3, #7
 800bc0a:	3308      	adds	r3, #8
 800bc0c:	9303      	str	r3, [sp, #12]
 800bc0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc10:	444b      	add	r3, r9
 800bc12:	9309      	str	r3, [sp, #36]	; 0x24
 800bc14:	e76d      	b.n	800baf2 <_svfiprintf_r+0x4a>
 800bc16:	fb05 3202 	mla	r2, r5, r2, r3
 800bc1a:	2001      	movs	r0, #1
 800bc1c:	460f      	mov	r7, r1
 800bc1e:	e7a6      	b.n	800bb6e <_svfiprintf_r+0xc6>
 800bc20:	2300      	movs	r3, #0
 800bc22:	3701      	adds	r7, #1
 800bc24:	9305      	str	r3, [sp, #20]
 800bc26:	4619      	mov	r1, r3
 800bc28:	250a      	movs	r5, #10
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc30:	3a30      	subs	r2, #48	; 0x30
 800bc32:	2a09      	cmp	r2, #9
 800bc34:	d903      	bls.n	800bc3e <_svfiprintf_r+0x196>
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d0c8      	beq.n	800bbcc <_svfiprintf_r+0x124>
 800bc3a:	9105      	str	r1, [sp, #20]
 800bc3c:	e7c6      	b.n	800bbcc <_svfiprintf_r+0x124>
 800bc3e:	fb05 2101 	mla	r1, r5, r1, r2
 800bc42:	2301      	movs	r3, #1
 800bc44:	4607      	mov	r7, r0
 800bc46:	e7f0      	b.n	800bc2a <_svfiprintf_r+0x182>
 800bc48:	ab03      	add	r3, sp, #12
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	4622      	mov	r2, r4
 800bc4e:	4b11      	ldr	r3, [pc, #68]	; (800bc94 <_svfiprintf_r+0x1ec>)
 800bc50:	a904      	add	r1, sp, #16
 800bc52:	4640      	mov	r0, r8
 800bc54:	f7fe f8f0 	bl	8009e38 <_printf_float>
 800bc58:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bc5c:	4681      	mov	r9, r0
 800bc5e:	d1d6      	bne.n	800bc0e <_svfiprintf_r+0x166>
 800bc60:	89a3      	ldrh	r3, [r4, #12]
 800bc62:	065b      	lsls	r3, r3, #25
 800bc64:	f53f af35 	bmi.w	800bad2 <_svfiprintf_r+0x2a>
 800bc68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc6a:	b01d      	add	sp, #116	; 0x74
 800bc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc70:	ab03      	add	r3, sp, #12
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	4622      	mov	r2, r4
 800bc76:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <_svfiprintf_r+0x1ec>)
 800bc78:	a904      	add	r1, sp, #16
 800bc7a:	4640      	mov	r0, r8
 800bc7c:	f7fe fb92 	bl	800a3a4 <_printf_i>
 800bc80:	e7ea      	b.n	800bc58 <_svfiprintf_r+0x1b0>
 800bc82:	bf00      	nop
 800bc84:	0800d0c4 	.word	0x0800d0c4
 800bc88:	0800d0ca 	.word	0x0800d0ca
 800bc8c:	0800d0ce 	.word	0x0800d0ce
 800bc90:	08009e39 	.word	0x08009e39
 800bc94:	0800b9f5 	.word	0x0800b9f5

0800bc98 <_sbrk_r>:
 800bc98:	b538      	push	{r3, r4, r5, lr}
 800bc9a:	4c06      	ldr	r4, [pc, #24]	; (800bcb4 <_sbrk_r+0x1c>)
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	4605      	mov	r5, r0
 800bca0:	4608      	mov	r0, r1
 800bca2:	6023      	str	r3, [r4, #0]
 800bca4:	f7f5 fcc4 	bl	8001630 <_sbrk>
 800bca8:	1c43      	adds	r3, r0, #1
 800bcaa:	d102      	bne.n	800bcb2 <_sbrk_r+0x1a>
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	b103      	cbz	r3, 800bcb2 <_sbrk_r+0x1a>
 800bcb0:	602b      	str	r3, [r5, #0]
 800bcb2:	bd38      	pop	{r3, r4, r5, pc}
 800bcb4:	2000161c 	.word	0x2000161c

0800bcb8 <__ascii_mbtowc>:
 800bcb8:	b082      	sub	sp, #8
 800bcba:	b901      	cbnz	r1, 800bcbe <__ascii_mbtowc+0x6>
 800bcbc:	a901      	add	r1, sp, #4
 800bcbe:	b142      	cbz	r2, 800bcd2 <__ascii_mbtowc+0x1a>
 800bcc0:	b14b      	cbz	r3, 800bcd6 <__ascii_mbtowc+0x1e>
 800bcc2:	7813      	ldrb	r3, [r2, #0]
 800bcc4:	600b      	str	r3, [r1, #0]
 800bcc6:	7812      	ldrb	r2, [r2, #0]
 800bcc8:	1c10      	adds	r0, r2, #0
 800bcca:	bf18      	it	ne
 800bccc:	2001      	movne	r0, #1
 800bcce:	b002      	add	sp, #8
 800bcd0:	4770      	bx	lr
 800bcd2:	4610      	mov	r0, r2
 800bcd4:	e7fb      	b.n	800bcce <__ascii_mbtowc+0x16>
 800bcd6:	f06f 0001 	mvn.w	r0, #1
 800bcda:	e7f8      	b.n	800bcce <__ascii_mbtowc+0x16>

0800bcdc <memmove>:
 800bcdc:	4288      	cmp	r0, r1
 800bcde:	b510      	push	{r4, lr}
 800bce0:	eb01 0302 	add.w	r3, r1, r2
 800bce4:	d807      	bhi.n	800bcf6 <memmove+0x1a>
 800bce6:	1e42      	subs	r2, r0, #1
 800bce8:	4299      	cmp	r1, r3
 800bcea:	d00a      	beq.n	800bd02 <memmove+0x26>
 800bcec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcf0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bcf4:	e7f8      	b.n	800bce8 <memmove+0xc>
 800bcf6:	4283      	cmp	r3, r0
 800bcf8:	d9f5      	bls.n	800bce6 <memmove+0xa>
 800bcfa:	1881      	adds	r1, r0, r2
 800bcfc:	1ad2      	subs	r2, r2, r3
 800bcfe:	42d3      	cmn	r3, r2
 800bd00:	d100      	bne.n	800bd04 <memmove+0x28>
 800bd02:	bd10      	pop	{r4, pc}
 800bd04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bd0c:	e7f7      	b.n	800bcfe <memmove+0x22>

0800bd0e <__malloc_lock>:
 800bd0e:	4770      	bx	lr

0800bd10 <__malloc_unlock>:
 800bd10:	4770      	bx	lr

0800bd12 <_realloc_r>:
 800bd12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd14:	4607      	mov	r7, r0
 800bd16:	4614      	mov	r4, r2
 800bd18:	460e      	mov	r6, r1
 800bd1a:	b921      	cbnz	r1, 800bd26 <_realloc_r+0x14>
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bd22:	f7ff be0d 	b.w	800b940 <_malloc_r>
 800bd26:	b922      	cbnz	r2, 800bd32 <_realloc_r+0x20>
 800bd28:	f7ff fdbc 	bl	800b8a4 <_free_r>
 800bd2c:	4625      	mov	r5, r4
 800bd2e:	4628      	mov	r0, r5
 800bd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd32:	f000 f821 	bl	800bd78 <_malloc_usable_size_r>
 800bd36:	42a0      	cmp	r0, r4
 800bd38:	d20f      	bcs.n	800bd5a <_realloc_r+0x48>
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	4638      	mov	r0, r7
 800bd3e:	f7ff fdff 	bl	800b940 <_malloc_r>
 800bd42:	4605      	mov	r5, r0
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d0f2      	beq.n	800bd2e <_realloc_r+0x1c>
 800bd48:	4631      	mov	r1, r6
 800bd4a:	4622      	mov	r2, r4
 800bd4c:	f7ff fab6 	bl	800b2bc <memcpy>
 800bd50:	4631      	mov	r1, r6
 800bd52:	4638      	mov	r0, r7
 800bd54:	f7ff fda6 	bl	800b8a4 <_free_r>
 800bd58:	e7e9      	b.n	800bd2e <_realloc_r+0x1c>
 800bd5a:	4635      	mov	r5, r6
 800bd5c:	e7e7      	b.n	800bd2e <_realloc_r+0x1c>

0800bd5e <__ascii_wctomb>:
 800bd5e:	b149      	cbz	r1, 800bd74 <__ascii_wctomb+0x16>
 800bd60:	2aff      	cmp	r2, #255	; 0xff
 800bd62:	bf85      	ittet	hi
 800bd64:	238a      	movhi	r3, #138	; 0x8a
 800bd66:	6003      	strhi	r3, [r0, #0]
 800bd68:	700a      	strbls	r2, [r1, #0]
 800bd6a:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd6e:	bf98      	it	ls
 800bd70:	2001      	movls	r0, #1
 800bd72:	4770      	bx	lr
 800bd74:	4608      	mov	r0, r1
 800bd76:	4770      	bx	lr

0800bd78 <_malloc_usable_size_r>:
 800bd78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd7c:	1f18      	subs	r0, r3, #4
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	bfbc      	itt	lt
 800bd82:	580b      	ldrlt	r3, [r1, r0]
 800bd84:	18c0      	addlt	r0, r0, r3
 800bd86:	4770      	bx	lr

0800bd88 <pow>:
 800bd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8c:	ed2d 8b04 	vpush	{d8-d9}
 800bd90:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800c064 <pow+0x2dc>
 800bd94:	b08d      	sub	sp, #52	; 0x34
 800bd96:	ec57 6b10 	vmov	r6, r7, d0
 800bd9a:	ec55 4b11 	vmov	r4, r5, d1
 800bd9e:	f000 f9bf 	bl	800c120 <__ieee754_pow>
 800bda2:	f999 3000 	ldrsb.w	r3, [r9]
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	eeb0 8a40 	vmov.f32	s16, s0
 800bdae:	eef0 8a60 	vmov.f32	s17, s1
 800bdb2:	46c8      	mov	r8, r9
 800bdb4:	d05f      	beq.n	800be76 <pow+0xee>
 800bdb6:	4622      	mov	r2, r4
 800bdb8:	462b      	mov	r3, r5
 800bdba:	4620      	mov	r0, r4
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	f7f4 feb5 	bl	8000b2c <__aeabi_dcmpun>
 800bdc2:	4683      	mov	fp, r0
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d156      	bne.n	800be76 <pow+0xee>
 800bdc8:	4632      	mov	r2, r6
 800bdca:	463b      	mov	r3, r7
 800bdcc:	4630      	mov	r0, r6
 800bdce:	4639      	mov	r1, r7
 800bdd0:	f7f4 feac 	bl	8000b2c <__aeabi_dcmpun>
 800bdd4:	9001      	str	r0, [sp, #4]
 800bdd6:	b1e8      	cbz	r0, 800be14 <pow+0x8c>
 800bdd8:	2200      	movs	r2, #0
 800bdda:	2300      	movs	r3, #0
 800bddc:	4620      	mov	r0, r4
 800bdde:	4629      	mov	r1, r5
 800bde0:	f7f4 fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d046      	beq.n	800be76 <pow+0xee>
 800bde8:	2301      	movs	r3, #1
 800bdea:	9302      	str	r3, [sp, #8]
 800bdec:	4b96      	ldr	r3, [pc, #600]	; (800c048 <pow+0x2c0>)
 800bdee:	9303      	str	r3, [sp, #12]
 800bdf0:	4b96      	ldr	r3, [pc, #600]	; (800c04c <pow+0x2c4>)
 800bdf2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bdfc:	9b00      	ldr	r3, [sp, #0]
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800be04:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800be08:	d033      	beq.n	800be72 <pow+0xea>
 800be0a:	a802      	add	r0, sp, #8
 800be0c:	f000 ff57 	bl	800ccbe <matherr>
 800be10:	bb48      	cbnz	r0, 800be66 <pow+0xde>
 800be12:	e05d      	b.n	800bed0 <pow+0x148>
 800be14:	f04f 0a00 	mov.w	sl, #0
 800be18:	f04f 0b00 	mov.w	fp, #0
 800be1c:	4652      	mov	r2, sl
 800be1e:	465b      	mov	r3, fp
 800be20:	4630      	mov	r0, r6
 800be22:	4639      	mov	r1, r7
 800be24:	f7f4 fe50 	bl	8000ac8 <__aeabi_dcmpeq>
 800be28:	ec4b ab19 	vmov	d9, sl, fp
 800be2c:	2800      	cmp	r0, #0
 800be2e:	d054      	beq.n	800beda <pow+0x152>
 800be30:	4652      	mov	r2, sl
 800be32:	465b      	mov	r3, fp
 800be34:	4620      	mov	r0, r4
 800be36:	4629      	mov	r1, r5
 800be38:	f7f4 fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 800be3c:	4680      	mov	r8, r0
 800be3e:	b318      	cbz	r0, 800be88 <pow+0x100>
 800be40:	2301      	movs	r3, #1
 800be42:	9302      	str	r3, [sp, #8]
 800be44:	4b80      	ldr	r3, [pc, #512]	; (800c048 <pow+0x2c0>)
 800be46:	9303      	str	r3, [sp, #12]
 800be48:	9b01      	ldr	r3, [sp, #4]
 800be4a:	930a      	str	r3, [sp, #40]	; 0x28
 800be4c:	9b00      	ldr	r3, [sp, #0]
 800be4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800be52:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800be56:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d0d5      	beq.n	800be0a <pow+0x82>
 800be5e:	4b7b      	ldr	r3, [pc, #492]	; (800c04c <pow+0x2c4>)
 800be60:	2200      	movs	r2, #0
 800be62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800be66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be68:	b11b      	cbz	r3, 800be72 <pow+0xea>
 800be6a:	f7fd ff1f 	bl	8009cac <__errno>
 800be6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be70:	6003      	str	r3, [r0, #0]
 800be72:	ed9d 8b08 	vldr	d8, [sp, #32]
 800be76:	eeb0 0a48 	vmov.f32	s0, s16
 800be7a:	eef0 0a68 	vmov.f32	s1, s17
 800be7e:	b00d      	add	sp, #52	; 0x34
 800be80:	ecbd 8b04 	vpop	{d8-d9}
 800be84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be88:	ec45 4b10 	vmov	d0, r4, r5
 800be8c:	f000 ff0f 	bl	800ccae <finite>
 800be90:	2800      	cmp	r0, #0
 800be92:	d0f0      	beq.n	800be76 <pow+0xee>
 800be94:	4652      	mov	r2, sl
 800be96:	465b      	mov	r3, fp
 800be98:	4620      	mov	r0, r4
 800be9a:	4629      	mov	r1, r5
 800be9c:	f7f4 fe1e 	bl	8000adc <__aeabi_dcmplt>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d0e8      	beq.n	800be76 <pow+0xee>
 800bea4:	2301      	movs	r3, #1
 800bea6:	9302      	str	r3, [sp, #8]
 800bea8:	4b67      	ldr	r3, [pc, #412]	; (800c048 <pow+0x2c0>)
 800beaa:	9303      	str	r3, [sp, #12]
 800beac:	f999 3000 	ldrsb.w	r3, [r9]
 800beb0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800beb4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800beb8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800bebc:	b913      	cbnz	r3, 800bec4 <pow+0x13c>
 800bebe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800bec2:	e7a2      	b.n	800be0a <pow+0x82>
 800bec4:	4962      	ldr	r1, [pc, #392]	; (800c050 <pow+0x2c8>)
 800bec6:	2000      	movs	r0, #0
 800bec8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800becc:	2b02      	cmp	r3, #2
 800bece:	d19c      	bne.n	800be0a <pow+0x82>
 800bed0:	f7fd feec 	bl	8009cac <__errno>
 800bed4:	2321      	movs	r3, #33	; 0x21
 800bed6:	6003      	str	r3, [r0, #0]
 800bed8:	e7c5      	b.n	800be66 <pow+0xde>
 800beda:	eeb0 0a48 	vmov.f32	s0, s16
 800bede:	eef0 0a68 	vmov.f32	s1, s17
 800bee2:	f000 fee4 	bl	800ccae <finite>
 800bee6:	9000      	str	r0, [sp, #0]
 800bee8:	2800      	cmp	r0, #0
 800beea:	f040 8081 	bne.w	800bff0 <pow+0x268>
 800beee:	ec47 6b10 	vmov	d0, r6, r7
 800bef2:	f000 fedc 	bl	800ccae <finite>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d07a      	beq.n	800bff0 <pow+0x268>
 800befa:	ec45 4b10 	vmov	d0, r4, r5
 800befe:	f000 fed6 	bl	800ccae <finite>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d074      	beq.n	800bff0 <pow+0x268>
 800bf06:	ec53 2b18 	vmov	r2, r3, d8
 800bf0a:	ee18 0a10 	vmov	r0, s16
 800bf0e:	4619      	mov	r1, r3
 800bf10:	f7f4 fe0c 	bl	8000b2c <__aeabi_dcmpun>
 800bf14:	f999 9000 	ldrsb.w	r9, [r9]
 800bf18:	4b4b      	ldr	r3, [pc, #300]	; (800c048 <pow+0x2c0>)
 800bf1a:	b1b0      	cbz	r0, 800bf4a <pow+0x1c2>
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf22:	9b00      	ldr	r3, [sp, #0]
 800bf24:	930a      	str	r3, [sp, #40]	; 0x28
 800bf26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bf2a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800bf2e:	f1b9 0f00 	cmp.w	r9, #0
 800bf32:	d0c4      	beq.n	800bebe <pow+0x136>
 800bf34:	4652      	mov	r2, sl
 800bf36:	465b      	mov	r3, fp
 800bf38:	4650      	mov	r0, sl
 800bf3a:	4659      	mov	r1, fp
 800bf3c:	f7f4 fc86 	bl	800084c <__aeabi_ddiv>
 800bf40:	f1b9 0f02 	cmp.w	r9, #2
 800bf44:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf48:	e7c1      	b.n	800bece <pow+0x146>
 800bf4a:	2203      	movs	r2, #3
 800bf4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf50:	900a      	str	r0, [sp, #40]	; 0x28
 800bf52:	4629      	mov	r1, r5
 800bf54:	4620      	mov	r0, r4
 800bf56:	2200      	movs	r2, #0
 800bf58:	4b3e      	ldr	r3, [pc, #248]	; (800c054 <pow+0x2cc>)
 800bf5a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800bf5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bf62:	f7f4 fb49 	bl	80005f8 <__aeabi_dmul>
 800bf66:	4604      	mov	r4, r0
 800bf68:	460d      	mov	r5, r1
 800bf6a:	f1b9 0f00 	cmp.w	r9, #0
 800bf6e:	d124      	bne.n	800bfba <pow+0x232>
 800bf70:	4b39      	ldr	r3, [pc, #228]	; (800c058 <pow+0x2d0>)
 800bf72:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bf76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	4652      	mov	r2, sl
 800bf7e:	465b      	mov	r3, fp
 800bf80:	4639      	mov	r1, r7
 800bf82:	f7f4 fdab 	bl	8000adc <__aeabi_dcmplt>
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d056      	beq.n	800c038 <pow+0x2b0>
 800bf8a:	ec45 4b10 	vmov	d0, r4, r5
 800bf8e:	f000 fea3 	bl	800ccd8 <rint>
 800bf92:	4622      	mov	r2, r4
 800bf94:	462b      	mov	r3, r5
 800bf96:	ec51 0b10 	vmov	r0, r1, d0
 800bf9a:	f7f4 fd95 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf9e:	b920      	cbnz	r0, 800bfaa <pow+0x222>
 800bfa0:	4b2e      	ldr	r3, [pc, #184]	; (800c05c <pow+0x2d4>)
 800bfa2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bfa6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bfaa:	f998 3000 	ldrsb.w	r3, [r8]
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d142      	bne.n	800c038 <pow+0x2b0>
 800bfb2:	f7fd fe7b 	bl	8009cac <__errno>
 800bfb6:	2322      	movs	r3, #34	; 0x22
 800bfb8:	e78d      	b.n	800bed6 <pow+0x14e>
 800bfba:	4b29      	ldr	r3, [pc, #164]	; (800c060 <pow+0x2d8>)
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	4652      	mov	r2, sl
 800bfc6:	465b      	mov	r3, fp
 800bfc8:	4639      	mov	r1, r7
 800bfca:	f7f4 fd87 	bl	8000adc <__aeabi_dcmplt>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d0eb      	beq.n	800bfaa <pow+0x222>
 800bfd2:	ec45 4b10 	vmov	d0, r4, r5
 800bfd6:	f000 fe7f 	bl	800ccd8 <rint>
 800bfda:	4622      	mov	r2, r4
 800bfdc:	462b      	mov	r3, r5
 800bfde:	ec51 0b10 	vmov	r0, r1, d0
 800bfe2:	f7f4 fd71 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d1df      	bne.n	800bfaa <pow+0x222>
 800bfea:	2200      	movs	r2, #0
 800bfec:	4b18      	ldr	r3, [pc, #96]	; (800c050 <pow+0x2c8>)
 800bfee:	e7da      	b.n	800bfa6 <pow+0x21e>
 800bff0:	2200      	movs	r2, #0
 800bff2:	2300      	movs	r3, #0
 800bff4:	ec51 0b18 	vmov	r0, r1, d8
 800bff8:	f7f4 fd66 	bl	8000ac8 <__aeabi_dcmpeq>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	f43f af3a 	beq.w	800be76 <pow+0xee>
 800c002:	ec47 6b10 	vmov	d0, r6, r7
 800c006:	f000 fe52 	bl	800ccae <finite>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	f43f af33 	beq.w	800be76 <pow+0xee>
 800c010:	ec45 4b10 	vmov	d0, r4, r5
 800c014:	f000 fe4b 	bl	800ccae <finite>
 800c018:	2800      	cmp	r0, #0
 800c01a:	f43f af2c 	beq.w	800be76 <pow+0xee>
 800c01e:	2304      	movs	r3, #4
 800c020:	9302      	str	r3, [sp, #8]
 800c022:	4b09      	ldr	r3, [pc, #36]	; (800c048 <pow+0x2c0>)
 800c024:	9303      	str	r3, [sp, #12]
 800c026:	2300      	movs	r3, #0
 800c028:	930a      	str	r3, [sp, #40]	; 0x28
 800c02a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c02e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c032:	ed8d 9b08 	vstr	d9, [sp, #32]
 800c036:	e7b8      	b.n	800bfaa <pow+0x222>
 800c038:	a802      	add	r0, sp, #8
 800c03a:	f000 fe40 	bl	800ccbe <matherr>
 800c03e:	2800      	cmp	r0, #0
 800c040:	f47f af11 	bne.w	800be66 <pow+0xde>
 800c044:	e7b5      	b.n	800bfb2 <pow+0x22a>
 800c046:	bf00      	nop
 800c048:	0800d1e0 	.word	0x0800d1e0
 800c04c:	3ff00000 	.word	0x3ff00000
 800c050:	fff00000 	.word	0xfff00000
 800c054:	3fe00000 	.word	0x3fe00000
 800c058:	47efffff 	.word	0x47efffff
 800c05c:	c7efffff 	.word	0xc7efffff
 800c060:	7ff00000 	.word	0x7ff00000
 800c064:	2000034c 	.word	0x2000034c

0800c068 <sqrt>:
 800c068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c06c:	ed2d 8b02 	vpush	{d8}
 800c070:	b08b      	sub	sp, #44	; 0x2c
 800c072:	ec55 4b10 	vmov	r4, r5, d0
 800c076:	f000 fd61 	bl	800cb3c <__ieee754_sqrt>
 800c07a:	4b26      	ldr	r3, [pc, #152]	; (800c114 <sqrt+0xac>)
 800c07c:	eeb0 8a40 	vmov.f32	s16, s0
 800c080:	eef0 8a60 	vmov.f32	s17, s1
 800c084:	f993 6000 	ldrsb.w	r6, [r3]
 800c088:	1c73      	adds	r3, r6, #1
 800c08a:	d02a      	beq.n	800c0e2 <sqrt+0x7a>
 800c08c:	4622      	mov	r2, r4
 800c08e:	462b      	mov	r3, r5
 800c090:	4620      	mov	r0, r4
 800c092:	4629      	mov	r1, r5
 800c094:	f7f4 fd4a 	bl	8000b2c <__aeabi_dcmpun>
 800c098:	4607      	mov	r7, r0
 800c09a:	bb10      	cbnz	r0, 800c0e2 <sqrt+0x7a>
 800c09c:	f04f 0800 	mov.w	r8, #0
 800c0a0:	f04f 0900 	mov.w	r9, #0
 800c0a4:	4642      	mov	r2, r8
 800c0a6:	464b      	mov	r3, r9
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	f7f4 fd16 	bl	8000adc <__aeabi_dcmplt>
 800c0b0:	b1b8      	cbz	r0, 800c0e2 <sqrt+0x7a>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	9300      	str	r3, [sp, #0]
 800c0b6:	4b18      	ldr	r3, [pc, #96]	; (800c118 <sqrt+0xb0>)
 800c0b8:	9301      	str	r3, [sp, #4]
 800c0ba:	9708      	str	r7, [sp, #32]
 800c0bc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c0c0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c0c4:	b9b6      	cbnz	r6, 800c0f4 <sqrt+0x8c>
 800c0c6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c0ca:	4668      	mov	r0, sp
 800c0cc:	f000 fdf7 	bl	800ccbe <matherr>
 800c0d0:	b1d0      	cbz	r0, 800c108 <sqrt+0xa0>
 800c0d2:	9b08      	ldr	r3, [sp, #32]
 800c0d4:	b11b      	cbz	r3, 800c0de <sqrt+0x76>
 800c0d6:	f7fd fde9 	bl	8009cac <__errno>
 800c0da:	9b08      	ldr	r3, [sp, #32]
 800c0dc:	6003      	str	r3, [r0, #0]
 800c0de:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c0e2:	eeb0 0a48 	vmov.f32	s0, s16
 800c0e6:	eef0 0a68 	vmov.f32	s1, s17
 800c0ea:	b00b      	add	sp, #44	; 0x2c
 800c0ec:	ecbd 8b02 	vpop	{d8}
 800c0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0f4:	4642      	mov	r2, r8
 800c0f6:	464b      	mov	r3, r9
 800c0f8:	4640      	mov	r0, r8
 800c0fa:	4649      	mov	r1, r9
 800c0fc:	f7f4 fba6 	bl	800084c <__aeabi_ddiv>
 800c100:	2e02      	cmp	r6, #2
 800c102:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c106:	d1e0      	bne.n	800c0ca <sqrt+0x62>
 800c108:	f7fd fdd0 	bl	8009cac <__errno>
 800c10c:	2321      	movs	r3, #33	; 0x21
 800c10e:	6003      	str	r3, [r0, #0]
 800c110:	e7df      	b.n	800c0d2 <sqrt+0x6a>
 800c112:	bf00      	nop
 800c114:	2000034c 	.word	0x2000034c
 800c118:	0800d1e4 	.word	0x0800d1e4
 800c11c:	00000000 	.word	0x00000000

0800c120 <__ieee754_pow>:
 800c120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c124:	b091      	sub	sp, #68	; 0x44
 800c126:	ed8d 1b00 	vstr	d1, [sp]
 800c12a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c12e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c132:	ea58 0302 	orrs.w	r3, r8, r2
 800c136:	ec57 6b10 	vmov	r6, r7, d0
 800c13a:	f000 84be 	beq.w	800caba <__ieee754_pow+0x99a>
 800c13e:	4b7a      	ldr	r3, [pc, #488]	; (800c328 <__ieee754_pow+0x208>)
 800c140:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c144:	429c      	cmp	r4, r3
 800c146:	463d      	mov	r5, r7
 800c148:	ee10 aa10 	vmov	sl, s0
 800c14c:	dc09      	bgt.n	800c162 <__ieee754_pow+0x42>
 800c14e:	d103      	bne.n	800c158 <__ieee754_pow+0x38>
 800c150:	b93e      	cbnz	r6, 800c162 <__ieee754_pow+0x42>
 800c152:	45a0      	cmp	r8, r4
 800c154:	dc0d      	bgt.n	800c172 <__ieee754_pow+0x52>
 800c156:	e001      	b.n	800c15c <__ieee754_pow+0x3c>
 800c158:	4598      	cmp	r8, r3
 800c15a:	dc02      	bgt.n	800c162 <__ieee754_pow+0x42>
 800c15c:	4598      	cmp	r8, r3
 800c15e:	d10e      	bne.n	800c17e <__ieee754_pow+0x5e>
 800c160:	b16a      	cbz	r2, 800c17e <__ieee754_pow+0x5e>
 800c162:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c166:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c16a:	ea54 030a 	orrs.w	r3, r4, sl
 800c16e:	f000 84a4 	beq.w	800caba <__ieee754_pow+0x99a>
 800c172:	486e      	ldr	r0, [pc, #440]	; (800c32c <__ieee754_pow+0x20c>)
 800c174:	b011      	add	sp, #68	; 0x44
 800c176:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c17a:	f000 bda5 	b.w	800ccc8 <nan>
 800c17e:	2d00      	cmp	r5, #0
 800c180:	da53      	bge.n	800c22a <__ieee754_pow+0x10a>
 800c182:	4b6b      	ldr	r3, [pc, #428]	; (800c330 <__ieee754_pow+0x210>)
 800c184:	4598      	cmp	r8, r3
 800c186:	dc4d      	bgt.n	800c224 <__ieee754_pow+0x104>
 800c188:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c18c:	4598      	cmp	r8, r3
 800c18e:	dd4c      	ble.n	800c22a <__ieee754_pow+0x10a>
 800c190:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c194:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c198:	2b14      	cmp	r3, #20
 800c19a:	dd26      	ble.n	800c1ea <__ieee754_pow+0xca>
 800c19c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c1a0:	fa22 f103 	lsr.w	r1, r2, r3
 800c1a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d13e      	bne.n	800c22a <__ieee754_pow+0x10a>
 800c1ac:	f001 0101 	and.w	r1, r1, #1
 800c1b0:	f1c1 0b02 	rsb	fp, r1, #2
 800c1b4:	2a00      	cmp	r2, #0
 800c1b6:	d15b      	bne.n	800c270 <__ieee754_pow+0x150>
 800c1b8:	4b5b      	ldr	r3, [pc, #364]	; (800c328 <__ieee754_pow+0x208>)
 800c1ba:	4598      	cmp	r8, r3
 800c1bc:	d124      	bne.n	800c208 <__ieee754_pow+0xe8>
 800c1be:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c1c2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c1c6:	ea53 030a 	orrs.w	r3, r3, sl
 800c1ca:	f000 8476 	beq.w	800caba <__ieee754_pow+0x99a>
 800c1ce:	4b59      	ldr	r3, [pc, #356]	; (800c334 <__ieee754_pow+0x214>)
 800c1d0:	429c      	cmp	r4, r3
 800c1d2:	dd2d      	ble.n	800c230 <__ieee754_pow+0x110>
 800c1d4:	f1b9 0f00 	cmp.w	r9, #0
 800c1d8:	f280 8473 	bge.w	800cac2 <__ieee754_pow+0x9a2>
 800c1dc:	2000      	movs	r0, #0
 800c1de:	2100      	movs	r1, #0
 800c1e0:	ec41 0b10 	vmov	d0, r0, r1
 800c1e4:	b011      	add	sp, #68	; 0x44
 800c1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ea:	2a00      	cmp	r2, #0
 800c1ec:	d13e      	bne.n	800c26c <__ieee754_pow+0x14c>
 800c1ee:	f1c3 0314 	rsb	r3, r3, #20
 800c1f2:	fa48 f103 	asr.w	r1, r8, r3
 800c1f6:	fa01 f303 	lsl.w	r3, r1, r3
 800c1fa:	4543      	cmp	r3, r8
 800c1fc:	f040 8469 	bne.w	800cad2 <__ieee754_pow+0x9b2>
 800c200:	f001 0101 	and.w	r1, r1, #1
 800c204:	f1c1 0b02 	rsb	fp, r1, #2
 800c208:	4b4b      	ldr	r3, [pc, #300]	; (800c338 <__ieee754_pow+0x218>)
 800c20a:	4598      	cmp	r8, r3
 800c20c:	d118      	bne.n	800c240 <__ieee754_pow+0x120>
 800c20e:	f1b9 0f00 	cmp.w	r9, #0
 800c212:	f280 845a 	bge.w	800caca <__ieee754_pow+0x9aa>
 800c216:	4948      	ldr	r1, [pc, #288]	; (800c338 <__ieee754_pow+0x218>)
 800c218:	4632      	mov	r2, r6
 800c21a:	463b      	mov	r3, r7
 800c21c:	2000      	movs	r0, #0
 800c21e:	f7f4 fb15 	bl	800084c <__aeabi_ddiv>
 800c222:	e7dd      	b.n	800c1e0 <__ieee754_pow+0xc0>
 800c224:	f04f 0b02 	mov.w	fp, #2
 800c228:	e7c4      	b.n	800c1b4 <__ieee754_pow+0x94>
 800c22a:	f04f 0b00 	mov.w	fp, #0
 800c22e:	e7c1      	b.n	800c1b4 <__ieee754_pow+0x94>
 800c230:	f1b9 0f00 	cmp.w	r9, #0
 800c234:	dad2      	bge.n	800c1dc <__ieee754_pow+0xbc>
 800c236:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c23a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c23e:	e7cf      	b.n	800c1e0 <__ieee754_pow+0xc0>
 800c240:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c244:	d106      	bne.n	800c254 <__ieee754_pow+0x134>
 800c246:	4632      	mov	r2, r6
 800c248:	463b      	mov	r3, r7
 800c24a:	4610      	mov	r0, r2
 800c24c:	4619      	mov	r1, r3
 800c24e:	f7f4 f9d3 	bl	80005f8 <__aeabi_dmul>
 800c252:	e7c5      	b.n	800c1e0 <__ieee754_pow+0xc0>
 800c254:	4b39      	ldr	r3, [pc, #228]	; (800c33c <__ieee754_pow+0x21c>)
 800c256:	4599      	cmp	r9, r3
 800c258:	d10a      	bne.n	800c270 <__ieee754_pow+0x150>
 800c25a:	2d00      	cmp	r5, #0
 800c25c:	db08      	blt.n	800c270 <__ieee754_pow+0x150>
 800c25e:	ec47 6b10 	vmov	d0, r6, r7
 800c262:	b011      	add	sp, #68	; 0x44
 800c264:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c268:	f000 bc68 	b.w	800cb3c <__ieee754_sqrt>
 800c26c:	f04f 0b00 	mov.w	fp, #0
 800c270:	ec47 6b10 	vmov	d0, r6, r7
 800c274:	f000 fd12 	bl	800cc9c <fabs>
 800c278:	ec51 0b10 	vmov	r0, r1, d0
 800c27c:	f1ba 0f00 	cmp.w	sl, #0
 800c280:	d127      	bne.n	800c2d2 <__ieee754_pow+0x1b2>
 800c282:	b124      	cbz	r4, 800c28e <__ieee754_pow+0x16e>
 800c284:	4b2c      	ldr	r3, [pc, #176]	; (800c338 <__ieee754_pow+0x218>)
 800c286:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d121      	bne.n	800c2d2 <__ieee754_pow+0x1b2>
 800c28e:	f1b9 0f00 	cmp.w	r9, #0
 800c292:	da05      	bge.n	800c2a0 <__ieee754_pow+0x180>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	2000      	movs	r0, #0
 800c29a:	4927      	ldr	r1, [pc, #156]	; (800c338 <__ieee754_pow+0x218>)
 800c29c:	f7f4 fad6 	bl	800084c <__aeabi_ddiv>
 800c2a0:	2d00      	cmp	r5, #0
 800c2a2:	da9d      	bge.n	800c1e0 <__ieee754_pow+0xc0>
 800c2a4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c2a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c2ac:	ea54 030b 	orrs.w	r3, r4, fp
 800c2b0:	d108      	bne.n	800c2c4 <__ieee754_pow+0x1a4>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	4610      	mov	r0, r2
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	f7f3 ffe5 	bl	8000288 <__aeabi_dsub>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	e7ac      	b.n	800c21e <__ieee754_pow+0xfe>
 800c2c4:	f1bb 0f01 	cmp.w	fp, #1
 800c2c8:	d18a      	bne.n	800c1e0 <__ieee754_pow+0xc0>
 800c2ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	e786      	b.n	800c1e0 <__ieee754_pow+0xc0>
 800c2d2:	0fed      	lsrs	r5, r5, #31
 800c2d4:	1e6b      	subs	r3, r5, #1
 800c2d6:	930d      	str	r3, [sp, #52]	; 0x34
 800c2d8:	ea5b 0303 	orrs.w	r3, fp, r3
 800c2dc:	d102      	bne.n	800c2e4 <__ieee754_pow+0x1c4>
 800c2de:	4632      	mov	r2, r6
 800c2e0:	463b      	mov	r3, r7
 800c2e2:	e7e8      	b.n	800c2b6 <__ieee754_pow+0x196>
 800c2e4:	4b16      	ldr	r3, [pc, #88]	; (800c340 <__ieee754_pow+0x220>)
 800c2e6:	4598      	cmp	r8, r3
 800c2e8:	f340 80fe 	ble.w	800c4e8 <__ieee754_pow+0x3c8>
 800c2ec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c2f0:	4598      	cmp	r8, r3
 800c2f2:	dd0a      	ble.n	800c30a <__ieee754_pow+0x1ea>
 800c2f4:	4b0f      	ldr	r3, [pc, #60]	; (800c334 <__ieee754_pow+0x214>)
 800c2f6:	429c      	cmp	r4, r3
 800c2f8:	dc0d      	bgt.n	800c316 <__ieee754_pow+0x1f6>
 800c2fa:	f1b9 0f00 	cmp.w	r9, #0
 800c2fe:	f6bf af6d 	bge.w	800c1dc <__ieee754_pow+0xbc>
 800c302:	a307      	add	r3, pc, #28	; (adr r3, 800c320 <__ieee754_pow+0x200>)
 800c304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c308:	e79f      	b.n	800c24a <__ieee754_pow+0x12a>
 800c30a:	4b0e      	ldr	r3, [pc, #56]	; (800c344 <__ieee754_pow+0x224>)
 800c30c:	429c      	cmp	r4, r3
 800c30e:	ddf4      	ble.n	800c2fa <__ieee754_pow+0x1da>
 800c310:	4b09      	ldr	r3, [pc, #36]	; (800c338 <__ieee754_pow+0x218>)
 800c312:	429c      	cmp	r4, r3
 800c314:	dd18      	ble.n	800c348 <__ieee754_pow+0x228>
 800c316:	f1b9 0f00 	cmp.w	r9, #0
 800c31a:	dcf2      	bgt.n	800c302 <__ieee754_pow+0x1e2>
 800c31c:	e75e      	b.n	800c1dc <__ieee754_pow+0xbc>
 800c31e:	bf00      	nop
 800c320:	8800759c 	.word	0x8800759c
 800c324:	7e37e43c 	.word	0x7e37e43c
 800c328:	7ff00000 	.word	0x7ff00000
 800c32c:	0800d0c9 	.word	0x0800d0c9
 800c330:	433fffff 	.word	0x433fffff
 800c334:	3fefffff 	.word	0x3fefffff
 800c338:	3ff00000 	.word	0x3ff00000
 800c33c:	3fe00000 	.word	0x3fe00000
 800c340:	41e00000 	.word	0x41e00000
 800c344:	3feffffe 	.word	0x3feffffe
 800c348:	2200      	movs	r2, #0
 800c34a:	4b63      	ldr	r3, [pc, #396]	; (800c4d8 <__ieee754_pow+0x3b8>)
 800c34c:	f7f3 ff9c 	bl	8000288 <__aeabi_dsub>
 800c350:	a355      	add	r3, pc, #340	; (adr r3, 800c4a8 <__ieee754_pow+0x388>)
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	4604      	mov	r4, r0
 800c358:	460d      	mov	r5, r1
 800c35a:	f7f4 f94d 	bl	80005f8 <__aeabi_dmul>
 800c35e:	a354      	add	r3, pc, #336	; (adr r3, 800c4b0 <__ieee754_pow+0x390>)
 800c360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c364:	4606      	mov	r6, r0
 800c366:	460f      	mov	r7, r1
 800c368:	4620      	mov	r0, r4
 800c36a:	4629      	mov	r1, r5
 800c36c:	f7f4 f944 	bl	80005f8 <__aeabi_dmul>
 800c370:	2200      	movs	r2, #0
 800c372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c376:	4b59      	ldr	r3, [pc, #356]	; (800c4dc <__ieee754_pow+0x3bc>)
 800c378:	4620      	mov	r0, r4
 800c37a:	4629      	mov	r1, r5
 800c37c:	f7f4 f93c 	bl	80005f8 <__aeabi_dmul>
 800c380:	4602      	mov	r2, r0
 800c382:	460b      	mov	r3, r1
 800c384:	a14c      	add	r1, pc, #304	; (adr r1, 800c4b8 <__ieee754_pow+0x398>)
 800c386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c38a:	f7f3 ff7d 	bl	8000288 <__aeabi_dsub>
 800c38e:	4622      	mov	r2, r4
 800c390:	462b      	mov	r3, r5
 800c392:	f7f4 f931 	bl	80005f8 <__aeabi_dmul>
 800c396:	4602      	mov	r2, r0
 800c398:	460b      	mov	r3, r1
 800c39a:	2000      	movs	r0, #0
 800c39c:	4950      	ldr	r1, [pc, #320]	; (800c4e0 <__ieee754_pow+0x3c0>)
 800c39e:	f7f3 ff73 	bl	8000288 <__aeabi_dsub>
 800c3a2:	4622      	mov	r2, r4
 800c3a4:	462b      	mov	r3, r5
 800c3a6:	4680      	mov	r8, r0
 800c3a8:	4689      	mov	r9, r1
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	f7f4 f923 	bl	80005f8 <__aeabi_dmul>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	4640      	mov	r0, r8
 800c3b8:	4649      	mov	r1, r9
 800c3ba:	f7f4 f91d 	bl	80005f8 <__aeabi_dmul>
 800c3be:	a340      	add	r3, pc, #256	; (adr r3, 800c4c0 <__ieee754_pow+0x3a0>)
 800c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c4:	f7f4 f918 	bl	80005f8 <__aeabi_dmul>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3d0:	f7f3 ff5a 	bl	8000288 <__aeabi_dsub>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4604      	mov	r4, r0
 800c3da:	460d      	mov	r5, r1
 800c3dc:	4630      	mov	r0, r6
 800c3de:	4639      	mov	r1, r7
 800c3e0:	f7f3 ff54 	bl	800028c <__adddf3>
 800c3e4:	2000      	movs	r0, #0
 800c3e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3ea:	4632      	mov	r2, r6
 800c3ec:	463b      	mov	r3, r7
 800c3ee:	f7f3 ff4b 	bl	8000288 <__aeabi_dsub>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	f7f3 ff45 	bl	8000288 <__aeabi_dsub>
 800c3fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c400:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c404:	4313      	orrs	r3, r2
 800c406:	4606      	mov	r6, r0
 800c408:	460f      	mov	r7, r1
 800c40a:	f040 81eb 	bne.w	800c7e4 <__ieee754_pow+0x6c4>
 800c40e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800c4c8 <__ieee754_pow+0x3a8>
 800c412:	e9dd 4500 	ldrd	r4, r5, [sp]
 800c416:	2400      	movs	r4, #0
 800c418:	4622      	mov	r2, r4
 800c41a:	462b      	mov	r3, r5
 800c41c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c420:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c424:	f7f3 ff30 	bl	8000288 <__aeabi_dsub>
 800c428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c42c:	f7f4 f8e4 	bl	80005f8 <__aeabi_dmul>
 800c430:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c434:	4680      	mov	r8, r0
 800c436:	4689      	mov	r9, r1
 800c438:	4630      	mov	r0, r6
 800c43a:	4639      	mov	r1, r7
 800c43c:	f7f4 f8dc 	bl	80005f8 <__aeabi_dmul>
 800c440:	4602      	mov	r2, r0
 800c442:	460b      	mov	r3, r1
 800c444:	4640      	mov	r0, r8
 800c446:	4649      	mov	r1, r9
 800c448:	f7f3 ff20 	bl	800028c <__adddf3>
 800c44c:	4622      	mov	r2, r4
 800c44e:	462b      	mov	r3, r5
 800c450:	4680      	mov	r8, r0
 800c452:	4689      	mov	r9, r1
 800c454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c458:	f7f4 f8ce 	bl	80005f8 <__aeabi_dmul>
 800c45c:	460b      	mov	r3, r1
 800c45e:	4604      	mov	r4, r0
 800c460:	460d      	mov	r5, r1
 800c462:	4602      	mov	r2, r0
 800c464:	4649      	mov	r1, r9
 800c466:	4640      	mov	r0, r8
 800c468:	e9cd 4500 	strd	r4, r5, [sp]
 800c46c:	f7f3 ff0e 	bl	800028c <__adddf3>
 800c470:	4b1c      	ldr	r3, [pc, #112]	; (800c4e4 <__ieee754_pow+0x3c4>)
 800c472:	4299      	cmp	r1, r3
 800c474:	4606      	mov	r6, r0
 800c476:	460f      	mov	r7, r1
 800c478:	468b      	mov	fp, r1
 800c47a:	f340 82f7 	ble.w	800ca6c <__ieee754_pow+0x94c>
 800c47e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c482:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c486:	4303      	orrs	r3, r0
 800c488:	f000 81ea 	beq.w	800c860 <__ieee754_pow+0x740>
 800c48c:	a310      	add	r3, pc, #64	; (adr r3, 800c4d0 <__ieee754_pow+0x3b0>)
 800c48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c496:	f7f4 f8af 	bl	80005f8 <__aeabi_dmul>
 800c49a:	a30d      	add	r3, pc, #52	; (adr r3, 800c4d0 <__ieee754_pow+0x3b0>)
 800c49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a0:	e6d5      	b.n	800c24e <__ieee754_pow+0x12e>
 800c4a2:	bf00      	nop
 800c4a4:	f3af 8000 	nop.w
 800c4a8:	60000000 	.word	0x60000000
 800c4ac:	3ff71547 	.word	0x3ff71547
 800c4b0:	f85ddf44 	.word	0xf85ddf44
 800c4b4:	3e54ae0b 	.word	0x3e54ae0b
 800c4b8:	55555555 	.word	0x55555555
 800c4bc:	3fd55555 	.word	0x3fd55555
 800c4c0:	652b82fe 	.word	0x652b82fe
 800c4c4:	3ff71547 	.word	0x3ff71547
 800c4c8:	00000000 	.word	0x00000000
 800c4cc:	bff00000 	.word	0xbff00000
 800c4d0:	8800759c 	.word	0x8800759c
 800c4d4:	7e37e43c 	.word	0x7e37e43c
 800c4d8:	3ff00000 	.word	0x3ff00000
 800c4dc:	3fd00000 	.word	0x3fd00000
 800c4e0:	3fe00000 	.word	0x3fe00000
 800c4e4:	408fffff 	.word	0x408fffff
 800c4e8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c4ec:	f04f 0200 	mov.w	r2, #0
 800c4f0:	da05      	bge.n	800c4fe <__ieee754_pow+0x3de>
 800c4f2:	4bd3      	ldr	r3, [pc, #844]	; (800c840 <__ieee754_pow+0x720>)
 800c4f4:	f7f4 f880 	bl	80005f8 <__aeabi_dmul>
 800c4f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c4fc:	460c      	mov	r4, r1
 800c4fe:	1523      	asrs	r3, r4, #20
 800c500:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c504:	4413      	add	r3, r2
 800c506:	9309      	str	r3, [sp, #36]	; 0x24
 800c508:	4bce      	ldr	r3, [pc, #824]	; (800c844 <__ieee754_pow+0x724>)
 800c50a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c50e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c512:	429c      	cmp	r4, r3
 800c514:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c518:	dd08      	ble.n	800c52c <__ieee754_pow+0x40c>
 800c51a:	4bcb      	ldr	r3, [pc, #812]	; (800c848 <__ieee754_pow+0x728>)
 800c51c:	429c      	cmp	r4, r3
 800c51e:	f340 815e 	ble.w	800c7de <__ieee754_pow+0x6be>
 800c522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c524:	3301      	adds	r3, #1
 800c526:	9309      	str	r3, [sp, #36]	; 0x24
 800c528:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c52c:	f04f 0a00 	mov.w	sl, #0
 800c530:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c534:	930c      	str	r3, [sp, #48]	; 0x30
 800c536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c538:	4bc4      	ldr	r3, [pc, #784]	; (800c84c <__ieee754_pow+0x72c>)
 800c53a:	4413      	add	r3, r2
 800c53c:	ed93 7b00 	vldr	d7, [r3]
 800c540:	4629      	mov	r1, r5
 800c542:	ec53 2b17 	vmov	r2, r3, d7
 800c546:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c54a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c54e:	f7f3 fe9b 	bl	8000288 <__aeabi_dsub>
 800c552:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c556:	4606      	mov	r6, r0
 800c558:	460f      	mov	r7, r1
 800c55a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c55e:	f7f3 fe95 	bl	800028c <__adddf3>
 800c562:	4602      	mov	r2, r0
 800c564:	460b      	mov	r3, r1
 800c566:	2000      	movs	r0, #0
 800c568:	49b9      	ldr	r1, [pc, #740]	; (800c850 <__ieee754_pow+0x730>)
 800c56a:	f7f4 f96f 	bl	800084c <__aeabi_ddiv>
 800c56e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c572:	4602      	mov	r2, r0
 800c574:	460b      	mov	r3, r1
 800c576:	4630      	mov	r0, r6
 800c578:	4639      	mov	r1, r7
 800c57a:	f7f4 f83d 	bl	80005f8 <__aeabi_dmul>
 800c57e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c582:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c586:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c58a:	2300      	movs	r3, #0
 800c58c:	9302      	str	r3, [sp, #8]
 800c58e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c592:	106d      	asrs	r5, r5, #1
 800c594:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c598:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c59c:	2200      	movs	r2, #0
 800c59e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c5a2:	4640      	mov	r0, r8
 800c5a4:	4649      	mov	r1, r9
 800c5a6:	4614      	mov	r4, r2
 800c5a8:	461d      	mov	r5, r3
 800c5aa:	f7f4 f825 	bl	80005f8 <__aeabi_dmul>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	4639      	mov	r1, r7
 800c5b6:	f7f3 fe67 	bl	8000288 <__aeabi_dsub>
 800c5ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5be:	4606      	mov	r6, r0
 800c5c0:	460f      	mov	r7, r1
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	f7f3 fe5f 	bl	8000288 <__aeabi_dsub>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c5d2:	f7f3 fe59 	bl	8000288 <__aeabi_dsub>
 800c5d6:	4642      	mov	r2, r8
 800c5d8:	464b      	mov	r3, r9
 800c5da:	f7f4 f80d 	bl	80005f8 <__aeabi_dmul>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	4639      	mov	r1, r7
 800c5e6:	f7f3 fe4f 	bl	8000288 <__aeabi_dsub>
 800c5ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c5ee:	f7f4 f803 	bl	80005f8 <__aeabi_dmul>
 800c5f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c5fa:	4610      	mov	r0, r2
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	f7f3 fffb 	bl	80005f8 <__aeabi_dmul>
 800c602:	a37b      	add	r3, pc, #492	; (adr r3, 800c7f0 <__ieee754_pow+0x6d0>)
 800c604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c608:	4604      	mov	r4, r0
 800c60a:	460d      	mov	r5, r1
 800c60c:	f7f3 fff4 	bl	80005f8 <__aeabi_dmul>
 800c610:	a379      	add	r3, pc, #484	; (adr r3, 800c7f8 <__ieee754_pow+0x6d8>)
 800c612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c616:	f7f3 fe39 	bl	800028c <__adddf3>
 800c61a:	4622      	mov	r2, r4
 800c61c:	462b      	mov	r3, r5
 800c61e:	f7f3 ffeb 	bl	80005f8 <__aeabi_dmul>
 800c622:	a377      	add	r3, pc, #476	; (adr r3, 800c800 <__ieee754_pow+0x6e0>)
 800c624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c628:	f7f3 fe30 	bl	800028c <__adddf3>
 800c62c:	4622      	mov	r2, r4
 800c62e:	462b      	mov	r3, r5
 800c630:	f7f3 ffe2 	bl	80005f8 <__aeabi_dmul>
 800c634:	a374      	add	r3, pc, #464	; (adr r3, 800c808 <__ieee754_pow+0x6e8>)
 800c636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63a:	f7f3 fe27 	bl	800028c <__adddf3>
 800c63e:	4622      	mov	r2, r4
 800c640:	462b      	mov	r3, r5
 800c642:	f7f3 ffd9 	bl	80005f8 <__aeabi_dmul>
 800c646:	a372      	add	r3, pc, #456	; (adr r3, 800c810 <__ieee754_pow+0x6f0>)
 800c648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64c:	f7f3 fe1e 	bl	800028c <__adddf3>
 800c650:	4622      	mov	r2, r4
 800c652:	462b      	mov	r3, r5
 800c654:	f7f3 ffd0 	bl	80005f8 <__aeabi_dmul>
 800c658:	a36f      	add	r3, pc, #444	; (adr r3, 800c818 <__ieee754_pow+0x6f8>)
 800c65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65e:	f7f3 fe15 	bl	800028c <__adddf3>
 800c662:	4622      	mov	r2, r4
 800c664:	4606      	mov	r6, r0
 800c666:	460f      	mov	r7, r1
 800c668:	462b      	mov	r3, r5
 800c66a:	4620      	mov	r0, r4
 800c66c:	4629      	mov	r1, r5
 800c66e:	f7f3 ffc3 	bl	80005f8 <__aeabi_dmul>
 800c672:	4602      	mov	r2, r0
 800c674:	460b      	mov	r3, r1
 800c676:	4630      	mov	r0, r6
 800c678:	4639      	mov	r1, r7
 800c67a:	f7f3 ffbd 	bl	80005f8 <__aeabi_dmul>
 800c67e:	4642      	mov	r2, r8
 800c680:	4604      	mov	r4, r0
 800c682:	460d      	mov	r5, r1
 800c684:	464b      	mov	r3, r9
 800c686:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c68a:	f7f3 fdff 	bl	800028c <__adddf3>
 800c68e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c692:	f7f3 ffb1 	bl	80005f8 <__aeabi_dmul>
 800c696:	4622      	mov	r2, r4
 800c698:	462b      	mov	r3, r5
 800c69a:	f7f3 fdf7 	bl	800028c <__adddf3>
 800c69e:	4642      	mov	r2, r8
 800c6a0:	4606      	mov	r6, r0
 800c6a2:	460f      	mov	r7, r1
 800c6a4:	464b      	mov	r3, r9
 800c6a6:	4640      	mov	r0, r8
 800c6a8:	4649      	mov	r1, r9
 800c6aa:	f7f3 ffa5 	bl	80005f8 <__aeabi_dmul>
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	4b68      	ldr	r3, [pc, #416]	; (800c854 <__ieee754_pow+0x734>)
 800c6b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c6b6:	f7f3 fde9 	bl	800028c <__adddf3>
 800c6ba:	4632      	mov	r2, r6
 800c6bc:	463b      	mov	r3, r7
 800c6be:	f7f3 fde5 	bl	800028c <__adddf3>
 800c6c2:	9802      	ldr	r0, [sp, #8]
 800c6c4:	460d      	mov	r5, r1
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	4640      	mov	r0, r8
 800c6ce:	4649      	mov	r1, r9
 800c6d0:	f7f3 ff92 	bl	80005f8 <__aeabi_dmul>
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	4680      	mov	r8, r0
 800c6d8:	4689      	mov	r9, r1
 800c6da:	4b5e      	ldr	r3, [pc, #376]	; (800c854 <__ieee754_pow+0x734>)
 800c6dc:	4620      	mov	r0, r4
 800c6de:	4629      	mov	r1, r5
 800c6e0:	f7f3 fdd2 	bl	8000288 <__aeabi_dsub>
 800c6e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c6e8:	f7f3 fdce 	bl	8000288 <__aeabi_dsub>
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	4639      	mov	r1, r7
 800c6f4:	f7f3 fdc8 	bl	8000288 <__aeabi_dsub>
 800c6f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6fc:	f7f3 ff7c 	bl	80005f8 <__aeabi_dmul>
 800c700:	4622      	mov	r2, r4
 800c702:	4606      	mov	r6, r0
 800c704:	460f      	mov	r7, r1
 800c706:	462b      	mov	r3, r5
 800c708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c70c:	f7f3 ff74 	bl	80005f8 <__aeabi_dmul>
 800c710:	4602      	mov	r2, r0
 800c712:	460b      	mov	r3, r1
 800c714:	4630      	mov	r0, r6
 800c716:	4639      	mov	r1, r7
 800c718:	f7f3 fdb8 	bl	800028c <__adddf3>
 800c71c:	4606      	mov	r6, r0
 800c71e:	460f      	mov	r7, r1
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4640      	mov	r0, r8
 800c726:	4649      	mov	r1, r9
 800c728:	f7f3 fdb0 	bl	800028c <__adddf3>
 800c72c:	9802      	ldr	r0, [sp, #8]
 800c72e:	a33c      	add	r3, pc, #240	; (adr r3, 800c820 <__ieee754_pow+0x700>)
 800c730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c734:	4604      	mov	r4, r0
 800c736:	460d      	mov	r5, r1
 800c738:	f7f3 ff5e 	bl	80005f8 <__aeabi_dmul>
 800c73c:	4642      	mov	r2, r8
 800c73e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c742:	464b      	mov	r3, r9
 800c744:	4620      	mov	r0, r4
 800c746:	4629      	mov	r1, r5
 800c748:	f7f3 fd9e 	bl	8000288 <__aeabi_dsub>
 800c74c:	4602      	mov	r2, r0
 800c74e:	460b      	mov	r3, r1
 800c750:	4630      	mov	r0, r6
 800c752:	4639      	mov	r1, r7
 800c754:	f7f3 fd98 	bl	8000288 <__aeabi_dsub>
 800c758:	a333      	add	r3, pc, #204	; (adr r3, 800c828 <__ieee754_pow+0x708>)
 800c75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75e:	f7f3 ff4b 	bl	80005f8 <__aeabi_dmul>
 800c762:	a333      	add	r3, pc, #204	; (adr r3, 800c830 <__ieee754_pow+0x710>)
 800c764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c768:	4606      	mov	r6, r0
 800c76a:	460f      	mov	r7, r1
 800c76c:	4620      	mov	r0, r4
 800c76e:	4629      	mov	r1, r5
 800c770:	f7f3 ff42 	bl	80005f8 <__aeabi_dmul>
 800c774:	4602      	mov	r2, r0
 800c776:	460b      	mov	r3, r1
 800c778:	4630      	mov	r0, r6
 800c77a:	4639      	mov	r1, r7
 800c77c:	f7f3 fd86 	bl	800028c <__adddf3>
 800c780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c782:	4b35      	ldr	r3, [pc, #212]	; (800c858 <__ieee754_pow+0x738>)
 800c784:	4413      	add	r3, r2
 800c786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78a:	f7f3 fd7f 	bl	800028c <__adddf3>
 800c78e:	4604      	mov	r4, r0
 800c790:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c792:	460d      	mov	r5, r1
 800c794:	f7f3 fec6 	bl	8000524 <__aeabi_i2d>
 800c798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c79a:	4b30      	ldr	r3, [pc, #192]	; (800c85c <__ieee754_pow+0x73c>)
 800c79c:	4413      	add	r3, r2
 800c79e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7a2:	4606      	mov	r6, r0
 800c7a4:	460f      	mov	r7, r1
 800c7a6:	4622      	mov	r2, r4
 800c7a8:	462b      	mov	r3, r5
 800c7aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7ae:	f7f3 fd6d 	bl	800028c <__adddf3>
 800c7b2:	4642      	mov	r2, r8
 800c7b4:	464b      	mov	r3, r9
 800c7b6:	f7f3 fd69 	bl	800028c <__adddf3>
 800c7ba:	4632      	mov	r2, r6
 800c7bc:	463b      	mov	r3, r7
 800c7be:	f7f3 fd65 	bl	800028c <__adddf3>
 800c7c2:	9802      	ldr	r0, [sp, #8]
 800c7c4:	4632      	mov	r2, r6
 800c7c6:	463b      	mov	r3, r7
 800c7c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c7cc:	f7f3 fd5c 	bl	8000288 <__aeabi_dsub>
 800c7d0:	4642      	mov	r2, r8
 800c7d2:	464b      	mov	r3, r9
 800c7d4:	f7f3 fd58 	bl	8000288 <__aeabi_dsub>
 800c7d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c7dc:	e607      	b.n	800c3ee <__ieee754_pow+0x2ce>
 800c7de:	f04f 0a01 	mov.w	sl, #1
 800c7e2:	e6a5      	b.n	800c530 <__ieee754_pow+0x410>
 800c7e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c838 <__ieee754_pow+0x718>
 800c7e8:	e613      	b.n	800c412 <__ieee754_pow+0x2f2>
 800c7ea:	bf00      	nop
 800c7ec:	f3af 8000 	nop.w
 800c7f0:	4a454eef 	.word	0x4a454eef
 800c7f4:	3fca7e28 	.word	0x3fca7e28
 800c7f8:	93c9db65 	.word	0x93c9db65
 800c7fc:	3fcd864a 	.word	0x3fcd864a
 800c800:	a91d4101 	.word	0xa91d4101
 800c804:	3fd17460 	.word	0x3fd17460
 800c808:	518f264d 	.word	0x518f264d
 800c80c:	3fd55555 	.word	0x3fd55555
 800c810:	db6fabff 	.word	0xdb6fabff
 800c814:	3fdb6db6 	.word	0x3fdb6db6
 800c818:	33333303 	.word	0x33333303
 800c81c:	3fe33333 	.word	0x3fe33333
 800c820:	e0000000 	.word	0xe0000000
 800c824:	3feec709 	.word	0x3feec709
 800c828:	dc3a03fd 	.word	0xdc3a03fd
 800c82c:	3feec709 	.word	0x3feec709
 800c830:	145b01f5 	.word	0x145b01f5
 800c834:	be3e2fe0 	.word	0xbe3e2fe0
 800c838:	00000000 	.word	0x00000000
 800c83c:	3ff00000 	.word	0x3ff00000
 800c840:	43400000 	.word	0x43400000
 800c844:	0003988e 	.word	0x0003988e
 800c848:	000bb679 	.word	0x000bb679
 800c84c:	0800d1f0 	.word	0x0800d1f0
 800c850:	3ff00000 	.word	0x3ff00000
 800c854:	40080000 	.word	0x40080000
 800c858:	0800d210 	.word	0x0800d210
 800c85c:	0800d200 	.word	0x0800d200
 800c860:	a3b4      	add	r3, pc, #720	; (adr r3, 800cb34 <__ieee754_pow+0xa14>)
 800c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c866:	4640      	mov	r0, r8
 800c868:	4649      	mov	r1, r9
 800c86a:	f7f3 fd0f 	bl	800028c <__adddf3>
 800c86e:	4622      	mov	r2, r4
 800c870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c874:	462b      	mov	r3, r5
 800c876:	4630      	mov	r0, r6
 800c878:	4639      	mov	r1, r7
 800c87a:	f7f3 fd05 	bl	8000288 <__aeabi_dsub>
 800c87e:	4602      	mov	r2, r0
 800c880:	460b      	mov	r3, r1
 800c882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c886:	f7f4 f947 	bl	8000b18 <__aeabi_dcmpgt>
 800c88a:	2800      	cmp	r0, #0
 800c88c:	f47f adfe 	bne.w	800c48c <__ieee754_pow+0x36c>
 800c890:	4aa3      	ldr	r2, [pc, #652]	; (800cb20 <__ieee754_pow+0xa00>)
 800c892:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c896:	4293      	cmp	r3, r2
 800c898:	f340 810a 	ble.w	800cab0 <__ieee754_pow+0x990>
 800c89c:	151b      	asrs	r3, r3, #20
 800c89e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c8a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c8a6:	fa4a f303 	asr.w	r3, sl, r3
 800c8aa:	445b      	add	r3, fp
 800c8ac:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c8b0:	4e9c      	ldr	r6, [pc, #624]	; (800cb24 <__ieee754_pow+0xa04>)
 800c8b2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c8b6:	4116      	asrs	r6, r2
 800c8b8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c8bc:	2000      	movs	r0, #0
 800c8be:	ea23 0106 	bic.w	r1, r3, r6
 800c8c2:	f1c2 0214 	rsb	r2, r2, #20
 800c8c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c8ca:	fa4a fa02 	asr.w	sl, sl, r2
 800c8ce:	f1bb 0f00 	cmp.w	fp, #0
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	4629      	mov	r1, r5
 800c8da:	bfb8      	it	lt
 800c8dc:	f1ca 0a00 	rsblt	sl, sl, #0
 800c8e0:	f7f3 fcd2 	bl	8000288 <__aeabi_dsub>
 800c8e4:	e9cd 0100 	strd	r0, r1, [sp]
 800c8e8:	4642      	mov	r2, r8
 800c8ea:	464b      	mov	r3, r9
 800c8ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8f0:	f7f3 fccc 	bl	800028c <__adddf3>
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	a378      	add	r3, pc, #480	; (adr r3, 800cad8 <__ieee754_pow+0x9b8>)
 800c8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	460d      	mov	r5, r1
 800c900:	f7f3 fe7a 	bl	80005f8 <__aeabi_dmul>
 800c904:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c908:	4606      	mov	r6, r0
 800c90a:	460f      	mov	r7, r1
 800c90c:	4620      	mov	r0, r4
 800c90e:	4629      	mov	r1, r5
 800c910:	f7f3 fcba 	bl	8000288 <__aeabi_dsub>
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	4640      	mov	r0, r8
 800c91a:	4649      	mov	r1, r9
 800c91c:	f7f3 fcb4 	bl	8000288 <__aeabi_dsub>
 800c920:	a36f      	add	r3, pc, #444	; (adr r3, 800cae0 <__ieee754_pow+0x9c0>)
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	f7f3 fe67 	bl	80005f8 <__aeabi_dmul>
 800c92a:	a36f      	add	r3, pc, #444	; (adr r3, 800cae8 <__ieee754_pow+0x9c8>)
 800c92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c930:	4680      	mov	r8, r0
 800c932:	4689      	mov	r9, r1
 800c934:	4620      	mov	r0, r4
 800c936:	4629      	mov	r1, r5
 800c938:	f7f3 fe5e 	bl	80005f8 <__aeabi_dmul>
 800c93c:	4602      	mov	r2, r0
 800c93e:	460b      	mov	r3, r1
 800c940:	4640      	mov	r0, r8
 800c942:	4649      	mov	r1, r9
 800c944:	f7f3 fca2 	bl	800028c <__adddf3>
 800c948:	4604      	mov	r4, r0
 800c94a:	460d      	mov	r5, r1
 800c94c:	4602      	mov	r2, r0
 800c94e:	460b      	mov	r3, r1
 800c950:	4630      	mov	r0, r6
 800c952:	4639      	mov	r1, r7
 800c954:	f7f3 fc9a 	bl	800028c <__adddf3>
 800c958:	4632      	mov	r2, r6
 800c95a:	463b      	mov	r3, r7
 800c95c:	4680      	mov	r8, r0
 800c95e:	4689      	mov	r9, r1
 800c960:	f7f3 fc92 	bl	8000288 <__aeabi_dsub>
 800c964:	4602      	mov	r2, r0
 800c966:	460b      	mov	r3, r1
 800c968:	4620      	mov	r0, r4
 800c96a:	4629      	mov	r1, r5
 800c96c:	f7f3 fc8c 	bl	8000288 <__aeabi_dsub>
 800c970:	4642      	mov	r2, r8
 800c972:	4606      	mov	r6, r0
 800c974:	460f      	mov	r7, r1
 800c976:	464b      	mov	r3, r9
 800c978:	4640      	mov	r0, r8
 800c97a:	4649      	mov	r1, r9
 800c97c:	f7f3 fe3c 	bl	80005f8 <__aeabi_dmul>
 800c980:	a35b      	add	r3, pc, #364	; (adr r3, 800caf0 <__ieee754_pow+0x9d0>)
 800c982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c986:	4604      	mov	r4, r0
 800c988:	460d      	mov	r5, r1
 800c98a:	f7f3 fe35 	bl	80005f8 <__aeabi_dmul>
 800c98e:	a35a      	add	r3, pc, #360	; (adr r3, 800caf8 <__ieee754_pow+0x9d8>)
 800c990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c994:	f7f3 fc78 	bl	8000288 <__aeabi_dsub>
 800c998:	4622      	mov	r2, r4
 800c99a:	462b      	mov	r3, r5
 800c99c:	f7f3 fe2c 	bl	80005f8 <__aeabi_dmul>
 800c9a0:	a357      	add	r3, pc, #348	; (adr r3, 800cb00 <__ieee754_pow+0x9e0>)
 800c9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a6:	f7f3 fc71 	bl	800028c <__adddf3>
 800c9aa:	4622      	mov	r2, r4
 800c9ac:	462b      	mov	r3, r5
 800c9ae:	f7f3 fe23 	bl	80005f8 <__aeabi_dmul>
 800c9b2:	a355      	add	r3, pc, #340	; (adr r3, 800cb08 <__ieee754_pow+0x9e8>)
 800c9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b8:	f7f3 fc66 	bl	8000288 <__aeabi_dsub>
 800c9bc:	4622      	mov	r2, r4
 800c9be:	462b      	mov	r3, r5
 800c9c0:	f7f3 fe1a 	bl	80005f8 <__aeabi_dmul>
 800c9c4:	a352      	add	r3, pc, #328	; (adr r3, 800cb10 <__ieee754_pow+0x9f0>)
 800c9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ca:	f7f3 fc5f 	bl	800028c <__adddf3>
 800c9ce:	4622      	mov	r2, r4
 800c9d0:	462b      	mov	r3, r5
 800c9d2:	f7f3 fe11 	bl	80005f8 <__aeabi_dmul>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	460b      	mov	r3, r1
 800c9da:	4640      	mov	r0, r8
 800c9dc:	4649      	mov	r1, r9
 800c9de:	f7f3 fc53 	bl	8000288 <__aeabi_dsub>
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	460d      	mov	r5, r1
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	4640      	mov	r0, r8
 800c9ec:	4649      	mov	r1, r9
 800c9ee:	f7f3 fe03 	bl	80005f8 <__aeabi_dmul>
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	e9cd 0100 	strd	r0, r1, [sp]
 800c9f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	4629      	mov	r1, r5
 800ca00:	f7f3 fc42 	bl	8000288 <__aeabi_dsub>
 800ca04:	4602      	mov	r2, r0
 800ca06:	460b      	mov	r3, r1
 800ca08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca0c:	f7f3 ff1e 	bl	800084c <__aeabi_ddiv>
 800ca10:	4632      	mov	r2, r6
 800ca12:	4604      	mov	r4, r0
 800ca14:	460d      	mov	r5, r1
 800ca16:	463b      	mov	r3, r7
 800ca18:	4640      	mov	r0, r8
 800ca1a:	4649      	mov	r1, r9
 800ca1c:	f7f3 fdec 	bl	80005f8 <__aeabi_dmul>
 800ca20:	4632      	mov	r2, r6
 800ca22:	463b      	mov	r3, r7
 800ca24:	f7f3 fc32 	bl	800028c <__adddf3>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	4629      	mov	r1, r5
 800ca30:	f7f3 fc2a 	bl	8000288 <__aeabi_dsub>
 800ca34:	4642      	mov	r2, r8
 800ca36:	464b      	mov	r3, r9
 800ca38:	f7f3 fc26 	bl	8000288 <__aeabi_dsub>
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	460b      	mov	r3, r1
 800ca40:	2000      	movs	r0, #0
 800ca42:	4939      	ldr	r1, [pc, #228]	; (800cb28 <__ieee754_pow+0xa08>)
 800ca44:	f7f3 fc20 	bl	8000288 <__aeabi_dsub>
 800ca48:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ca4c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ca50:	4602      	mov	r2, r0
 800ca52:	460b      	mov	r3, r1
 800ca54:	da2f      	bge.n	800cab6 <__ieee754_pow+0x996>
 800ca56:	4650      	mov	r0, sl
 800ca58:	ec43 2b10 	vmov	d0, r2, r3
 800ca5c:	f000 f9c0 	bl	800cde0 <scalbn>
 800ca60:	ec51 0b10 	vmov	r0, r1, d0
 800ca64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca68:	f7ff bbf1 	b.w	800c24e <__ieee754_pow+0x12e>
 800ca6c:	4b2f      	ldr	r3, [pc, #188]	; (800cb2c <__ieee754_pow+0xa0c>)
 800ca6e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ca72:	429e      	cmp	r6, r3
 800ca74:	f77f af0c 	ble.w	800c890 <__ieee754_pow+0x770>
 800ca78:	4b2d      	ldr	r3, [pc, #180]	; (800cb30 <__ieee754_pow+0xa10>)
 800ca7a:	440b      	add	r3, r1
 800ca7c:	4303      	orrs	r3, r0
 800ca7e:	d00b      	beq.n	800ca98 <__ieee754_pow+0x978>
 800ca80:	a325      	add	r3, pc, #148	; (adr r3, 800cb18 <__ieee754_pow+0x9f8>)
 800ca82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca8a:	f7f3 fdb5 	bl	80005f8 <__aeabi_dmul>
 800ca8e:	a322      	add	r3, pc, #136	; (adr r3, 800cb18 <__ieee754_pow+0x9f8>)
 800ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca94:	f7ff bbdb 	b.w	800c24e <__ieee754_pow+0x12e>
 800ca98:	4622      	mov	r2, r4
 800ca9a:	462b      	mov	r3, r5
 800ca9c:	f7f3 fbf4 	bl	8000288 <__aeabi_dsub>
 800caa0:	4642      	mov	r2, r8
 800caa2:	464b      	mov	r3, r9
 800caa4:	f7f4 f82e 	bl	8000b04 <__aeabi_dcmpge>
 800caa8:	2800      	cmp	r0, #0
 800caaa:	f43f aef1 	beq.w	800c890 <__ieee754_pow+0x770>
 800caae:	e7e7      	b.n	800ca80 <__ieee754_pow+0x960>
 800cab0:	f04f 0a00 	mov.w	sl, #0
 800cab4:	e718      	b.n	800c8e8 <__ieee754_pow+0x7c8>
 800cab6:	4621      	mov	r1, r4
 800cab8:	e7d4      	b.n	800ca64 <__ieee754_pow+0x944>
 800caba:	2000      	movs	r0, #0
 800cabc:	491a      	ldr	r1, [pc, #104]	; (800cb28 <__ieee754_pow+0xa08>)
 800cabe:	f7ff bb8f 	b.w	800c1e0 <__ieee754_pow+0xc0>
 800cac2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cac6:	f7ff bb8b 	b.w	800c1e0 <__ieee754_pow+0xc0>
 800caca:	4630      	mov	r0, r6
 800cacc:	4639      	mov	r1, r7
 800cace:	f7ff bb87 	b.w	800c1e0 <__ieee754_pow+0xc0>
 800cad2:	4693      	mov	fp, r2
 800cad4:	f7ff bb98 	b.w	800c208 <__ieee754_pow+0xe8>
 800cad8:	00000000 	.word	0x00000000
 800cadc:	3fe62e43 	.word	0x3fe62e43
 800cae0:	fefa39ef 	.word	0xfefa39ef
 800cae4:	3fe62e42 	.word	0x3fe62e42
 800cae8:	0ca86c39 	.word	0x0ca86c39
 800caec:	be205c61 	.word	0xbe205c61
 800caf0:	72bea4d0 	.word	0x72bea4d0
 800caf4:	3e663769 	.word	0x3e663769
 800caf8:	c5d26bf1 	.word	0xc5d26bf1
 800cafc:	3ebbbd41 	.word	0x3ebbbd41
 800cb00:	af25de2c 	.word	0xaf25de2c
 800cb04:	3f11566a 	.word	0x3f11566a
 800cb08:	16bebd93 	.word	0x16bebd93
 800cb0c:	3f66c16c 	.word	0x3f66c16c
 800cb10:	5555553e 	.word	0x5555553e
 800cb14:	3fc55555 	.word	0x3fc55555
 800cb18:	c2f8f359 	.word	0xc2f8f359
 800cb1c:	01a56e1f 	.word	0x01a56e1f
 800cb20:	3fe00000 	.word	0x3fe00000
 800cb24:	000fffff 	.word	0x000fffff
 800cb28:	3ff00000 	.word	0x3ff00000
 800cb2c:	4090cbff 	.word	0x4090cbff
 800cb30:	3f6f3400 	.word	0x3f6f3400
 800cb34:	652b82fe 	.word	0x652b82fe
 800cb38:	3c971547 	.word	0x3c971547

0800cb3c <__ieee754_sqrt>:
 800cb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb40:	4955      	ldr	r1, [pc, #340]	; (800cc98 <__ieee754_sqrt+0x15c>)
 800cb42:	ec55 4b10 	vmov	r4, r5, d0
 800cb46:	43a9      	bics	r1, r5
 800cb48:	462b      	mov	r3, r5
 800cb4a:	462a      	mov	r2, r5
 800cb4c:	d112      	bne.n	800cb74 <__ieee754_sqrt+0x38>
 800cb4e:	ee10 2a10 	vmov	r2, s0
 800cb52:	ee10 0a10 	vmov	r0, s0
 800cb56:	4629      	mov	r1, r5
 800cb58:	f7f3 fd4e 	bl	80005f8 <__aeabi_dmul>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	4620      	mov	r0, r4
 800cb62:	4629      	mov	r1, r5
 800cb64:	f7f3 fb92 	bl	800028c <__adddf3>
 800cb68:	4604      	mov	r4, r0
 800cb6a:	460d      	mov	r5, r1
 800cb6c:	ec45 4b10 	vmov	d0, r4, r5
 800cb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb74:	2d00      	cmp	r5, #0
 800cb76:	ee10 0a10 	vmov	r0, s0
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	dc0f      	bgt.n	800cb9e <__ieee754_sqrt+0x62>
 800cb7e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cb82:	4330      	orrs	r0, r6
 800cb84:	d0f2      	beq.n	800cb6c <__ieee754_sqrt+0x30>
 800cb86:	b155      	cbz	r5, 800cb9e <__ieee754_sqrt+0x62>
 800cb88:	ee10 2a10 	vmov	r2, s0
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	4629      	mov	r1, r5
 800cb90:	f7f3 fb7a 	bl	8000288 <__aeabi_dsub>
 800cb94:	4602      	mov	r2, r0
 800cb96:	460b      	mov	r3, r1
 800cb98:	f7f3 fe58 	bl	800084c <__aeabi_ddiv>
 800cb9c:	e7e4      	b.n	800cb68 <__ieee754_sqrt+0x2c>
 800cb9e:	151b      	asrs	r3, r3, #20
 800cba0:	d073      	beq.n	800cc8a <__ieee754_sqrt+0x14e>
 800cba2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cba6:	07dd      	lsls	r5, r3, #31
 800cba8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cbac:	bf48      	it	mi
 800cbae:	0fc8      	lsrmi	r0, r1, #31
 800cbb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cbb4:	bf44      	itt	mi
 800cbb6:	0049      	lslmi	r1, r1, #1
 800cbb8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800cbbc:	2500      	movs	r5, #0
 800cbbe:	1058      	asrs	r0, r3, #1
 800cbc0:	0fcb      	lsrs	r3, r1, #31
 800cbc2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800cbc6:	0049      	lsls	r1, r1, #1
 800cbc8:	2316      	movs	r3, #22
 800cbca:	462c      	mov	r4, r5
 800cbcc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800cbd0:	19a7      	adds	r7, r4, r6
 800cbd2:	4297      	cmp	r7, r2
 800cbd4:	bfde      	ittt	le
 800cbd6:	19bc      	addle	r4, r7, r6
 800cbd8:	1bd2      	suble	r2, r2, r7
 800cbda:	19ad      	addle	r5, r5, r6
 800cbdc:	0fcf      	lsrs	r7, r1, #31
 800cbde:	3b01      	subs	r3, #1
 800cbe0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800cbe4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cbe8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cbec:	d1f0      	bne.n	800cbd0 <__ieee754_sqrt+0x94>
 800cbee:	f04f 0c20 	mov.w	ip, #32
 800cbf2:	469e      	mov	lr, r3
 800cbf4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cbf8:	42a2      	cmp	r2, r4
 800cbfa:	eb06 070e 	add.w	r7, r6, lr
 800cbfe:	dc02      	bgt.n	800cc06 <__ieee754_sqrt+0xca>
 800cc00:	d112      	bne.n	800cc28 <__ieee754_sqrt+0xec>
 800cc02:	428f      	cmp	r7, r1
 800cc04:	d810      	bhi.n	800cc28 <__ieee754_sqrt+0xec>
 800cc06:	2f00      	cmp	r7, #0
 800cc08:	eb07 0e06 	add.w	lr, r7, r6
 800cc0c:	da42      	bge.n	800cc94 <__ieee754_sqrt+0x158>
 800cc0e:	f1be 0f00 	cmp.w	lr, #0
 800cc12:	db3f      	blt.n	800cc94 <__ieee754_sqrt+0x158>
 800cc14:	f104 0801 	add.w	r8, r4, #1
 800cc18:	1b12      	subs	r2, r2, r4
 800cc1a:	428f      	cmp	r7, r1
 800cc1c:	bf88      	it	hi
 800cc1e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cc22:	1bc9      	subs	r1, r1, r7
 800cc24:	4433      	add	r3, r6
 800cc26:	4644      	mov	r4, r8
 800cc28:	0052      	lsls	r2, r2, #1
 800cc2a:	f1bc 0c01 	subs.w	ip, ip, #1
 800cc2e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800cc32:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cc36:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cc3a:	d1dd      	bne.n	800cbf8 <__ieee754_sqrt+0xbc>
 800cc3c:	430a      	orrs	r2, r1
 800cc3e:	d006      	beq.n	800cc4e <__ieee754_sqrt+0x112>
 800cc40:	1c5c      	adds	r4, r3, #1
 800cc42:	bf13      	iteet	ne
 800cc44:	3301      	addne	r3, #1
 800cc46:	3501      	addeq	r5, #1
 800cc48:	4663      	moveq	r3, ip
 800cc4a:	f023 0301 	bicne.w	r3, r3, #1
 800cc4e:	106a      	asrs	r2, r5, #1
 800cc50:	085b      	lsrs	r3, r3, #1
 800cc52:	07e9      	lsls	r1, r5, #31
 800cc54:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800cc58:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800cc5c:	bf48      	it	mi
 800cc5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800cc62:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800cc66:	461c      	mov	r4, r3
 800cc68:	e780      	b.n	800cb6c <__ieee754_sqrt+0x30>
 800cc6a:	0aca      	lsrs	r2, r1, #11
 800cc6c:	3815      	subs	r0, #21
 800cc6e:	0549      	lsls	r1, r1, #21
 800cc70:	2a00      	cmp	r2, #0
 800cc72:	d0fa      	beq.n	800cc6a <__ieee754_sqrt+0x12e>
 800cc74:	02d6      	lsls	r6, r2, #11
 800cc76:	d50a      	bpl.n	800cc8e <__ieee754_sqrt+0x152>
 800cc78:	f1c3 0420 	rsb	r4, r3, #32
 800cc7c:	fa21 f404 	lsr.w	r4, r1, r4
 800cc80:	1e5d      	subs	r5, r3, #1
 800cc82:	4099      	lsls	r1, r3
 800cc84:	4322      	orrs	r2, r4
 800cc86:	1b43      	subs	r3, r0, r5
 800cc88:	e78b      	b.n	800cba2 <__ieee754_sqrt+0x66>
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	e7f0      	b.n	800cc70 <__ieee754_sqrt+0x134>
 800cc8e:	0052      	lsls	r2, r2, #1
 800cc90:	3301      	adds	r3, #1
 800cc92:	e7ef      	b.n	800cc74 <__ieee754_sqrt+0x138>
 800cc94:	46a0      	mov	r8, r4
 800cc96:	e7bf      	b.n	800cc18 <__ieee754_sqrt+0xdc>
 800cc98:	7ff00000 	.word	0x7ff00000

0800cc9c <fabs>:
 800cc9c:	ec51 0b10 	vmov	r0, r1, d0
 800cca0:	ee10 2a10 	vmov	r2, s0
 800cca4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cca8:	ec43 2b10 	vmov	d0, r2, r3
 800ccac:	4770      	bx	lr

0800ccae <finite>:
 800ccae:	ee10 3a90 	vmov	r3, s1
 800ccb2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800ccb6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ccba:	0fc0      	lsrs	r0, r0, #31
 800ccbc:	4770      	bx	lr

0800ccbe <matherr>:
 800ccbe:	2000      	movs	r0, #0
 800ccc0:	4770      	bx	lr
 800ccc2:	0000      	movs	r0, r0
 800ccc4:	0000      	movs	r0, r0
	...

0800ccc8 <nan>:
 800ccc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ccd0 <nan+0x8>
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	00000000 	.word	0x00000000
 800ccd4:	7ff80000 	.word	0x7ff80000

0800ccd8 <rint>:
 800ccd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccda:	ec51 0b10 	vmov	r0, r1, d0
 800ccde:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cce2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800cce6:	2e13      	cmp	r6, #19
 800cce8:	460b      	mov	r3, r1
 800ccea:	ee10 4a10 	vmov	r4, s0
 800ccee:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ccf2:	dc56      	bgt.n	800cda2 <rint+0xca>
 800ccf4:	2e00      	cmp	r6, #0
 800ccf6:	da2b      	bge.n	800cd50 <rint+0x78>
 800ccf8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ccfc:	4302      	orrs	r2, r0
 800ccfe:	d023      	beq.n	800cd48 <rint+0x70>
 800cd00:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800cd04:	4302      	orrs	r2, r0
 800cd06:	4254      	negs	r4, r2
 800cd08:	4314      	orrs	r4, r2
 800cd0a:	0c4b      	lsrs	r3, r1, #17
 800cd0c:	0b24      	lsrs	r4, r4, #12
 800cd0e:	045b      	lsls	r3, r3, #17
 800cd10:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800cd14:	ea44 0103 	orr.w	r1, r4, r3
 800cd18:	460b      	mov	r3, r1
 800cd1a:	492f      	ldr	r1, [pc, #188]	; (800cdd8 <rint+0x100>)
 800cd1c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800cd20:	e9d1 6700 	ldrd	r6, r7, [r1]
 800cd24:	4602      	mov	r2, r0
 800cd26:	4639      	mov	r1, r7
 800cd28:	4630      	mov	r0, r6
 800cd2a:	f7f3 faaf 	bl	800028c <__adddf3>
 800cd2e:	e9cd 0100 	strd	r0, r1, [sp]
 800cd32:	463b      	mov	r3, r7
 800cd34:	4632      	mov	r2, r6
 800cd36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd3a:	f7f3 faa5 	bl	8000288 <__aeabi_dsub>
 800cd3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd42:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800cd46:	4639      	mov	r1, r7
 800cd48:	ec41 0b10 	vmov	d0, r0, r1
 800cd4c:	b003      	add	sp, #12
 800cd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd50:	4a22      	ldr	r2, [pc, #136]	; (800cddc <rint+0x104>)
 800cd52:	4132      	asrs	r2, r6
 800cd54:	ea01 0702 	and.w	r7, r1, r2
 800cd58:	4307      	orrs	r7, r0
 800cd5a:	d0f5      	beq.n	800cd48 <rint+0x70>
 800cd5c:	0852      	lsrs	r2, r2, #1
 800cd5e:	4011      	ands	r1, r2
 800cd60:	430c      	orrs	r4, r1
 800cd62:	d00b      	beq.n	800cd7c <rint+0xa4>
 800cd64:	ea23 0202 	bic.w	r2, r3, r2
 800cd68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cd6c:	2e13      	cmp	r6, #19
 800cd6e:	fa43 f306 	asr.w	r3, r3, r6
 800cd72:	bf0c      	ite	eq
 800cd74:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800cd78:	2400      	movne	r4, #0
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	4916      	ldr	r1, [pc, #88]	; (800cdd8 <rint+0x100>)
 800cd7e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800cd82:	4622      	mov	r2, r4
 800cd84:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd88:	4620      	mov	r0, r4
 800cd8a:	4629      	mov	r1, r5
 800cd8c:	f7f3 fa7e 	bl	800028c <__adddf3>
 800cd90:	e9cd 0100 	strd	r0, r1, [sp]
 800cd94:	4622      	mov	r2, r4
 800cd96:	462b      	mov	r3, r5
 800cd98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd9c:	f7f3 fa74 	bl	8000288 <__aeabi_dsub>
 800cda0:	e7d2      	b.n	800cd48 <rint+0x70>
 800cda2:	2e33      	cmp	r6, #51	; 0x33
 800cda4:	dd07      	ble.n	800cdb6 <rint+0xde>
 800cda6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cdaa:	d1cd      	bne.n	800cd48 <rint+0x70>
 800cdac:	ee10 2a10 	vmov	r2, s0
 800cdb0:	f7f3 fa6c 	bl	800028c <__adddf3>
 800cdb4:	e7c8      	b.n	800cd48 <rint+0x70>
 800cdb6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800cdba:	f04f 32ff 	mov.w	r2, #4294967295
 800cdbe:	40f2      	lsrs	r2, r6
 800cdc0:	4210      	tst	r0, r2
 800cdc2:	d0c1      	beq.n	800cd48 <rint+0x70>
 800cdc4:	0852      	lsrs	r2, r2, #1
 800cdc6:	4210      	tst	r0, r2
 800cdc8:	bf1f      	itttt	ne
 800cdca:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800cdce:	ea20 0202 	bicne.w	r2, r0, r2
 800cdd2:	4134      	asrne	r4, r6
 800cdd4:	4314      	orrne	r4, r2
 800cdd6:	e7d1      	b.n	800cd7c <rint+0xa4>
 800cdd8:	0800d220 	.word	0x0800d220
 800cddc:	000fffff 	.word	0x000fffff

0800cde0 <scalbn>:
 800cde0:	b570      	push	{r4, r5, r6, lr}
 800cde2:	ec55 4b10 	vmov	r4, r5, d0
 800cde6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cdea:	4606      	mov	r6, r0
 800cdec:	462b      	mov	r3, r5
 800cdee:	b9aa      	cbnz	r2, 800ce1c <scalbn+0x3c>
 800cdf0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cdf4:	4323      	orrs	r3, r4
 800cdf6:	d03b      	beq.n	800ce70 <scalbn+0x90>
 800cdf8:	4b31      	ldr	r3, [pc, #196]	; (800cec0 <scalbn+0xe0>)
 800cdfa:	4629      	mov	r1, r5
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	ee10 0a10 	vmov	r0, s0
 800ce02:	f7f3 fbf9 	bl	80005f8 <__aeabi_dmul>
 800ce06:	4b2f      	ldr	r3, [pc, #188]	; (800cec4 <scalbn+0xe4>)
 800ce08:	429e      	cmp	r6, r3
 800ce0a:	4604      	mov	r4, r0
 800ce0c:	460d      	mov	r5, r1
 800ce0e:	da12      	bge.n	800ce36 <scalbn+0x56>
 800ce10:	a327      	add	r3, pc, #156	; (adr r3, 800ceb0 <scalbn+0xd0>)
 800ce12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce16:	f7f3 fbef 	bl	80005f8 <__aeabi_dmul>
 800ce1a:	e009      	b.n	800ce30 <scalbn+0x50>
 800ce1c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ce20:	428a      	cmp	r2, r1
 800ce22:	d10c      	bne.n	800ce3e <scalbn+0x5e>
 800ce24:	ee10 2a10 	vmov	r2, s0
 800ce28:	4620      	mov	r0, r4
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	f7f3 fa2e 	bl	800028c <__adddf3>
 800ce30:	4604      	mov	r4, r0
 800ce32:	460d      	mov	r5, r1
 800ce34:	e01c      	b.n	800ce70 <scalbn+0x90>
 800ce36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	3a36      	subs	r2, #54	; 0x36
 800ce3e:	4432      	add	r2, r6
 800ce40:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ce44:	428a      	cmp	r2, r1
 800ce46:	dd0b      	ble.n	800ce60 <scalbn+0x80>
 800ce48:	ec45 4b11 	vmov	d1, r4, r5
 800ce4c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800ceb8 <scalbn+0xd8>
 800ce50:	f000 f83c 	bl	800cecc <copysign>
 800ce54:	a318      	add	r3, pc, #96	; (adr r3, 800ceb8 <scalbn+0xd8>)
 800ce56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5a:	ec51 0b10 	vmov	r0, r1, d0
 800ce5e:	e7da      	b.n	800ce16 <scalbn+0x36>
 800ce60:	2a00      	cmp	r2, #0
 800ce62:	dd08      	ble.n	800ce76 <scalbn+0x96>
 800ce64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce70:	ec45 4b10 	vmov	d0, r4, r5
 800ce74:	bd70      	pop	{r4, r5, r6, pc}
 800ce76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ce7a:	da0d      	bge.n	800ce98 <scalbn+0xb8>
 800ce7c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ce80:	429e      	cmp	r6, r3
 800ce82:	ec45 4b11 	vmov	d1, r4, r5
 800ce86:	dce1      	bgt.n	800ce4c <scalbn+0x6c>
 800ce88:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800ceb0 <scalbn+0xd0>
 800ce8c:	f000 f81e 	bl	800cecc <copysign>
 800ce90:	a307      	add	r3, pc, #28	; (adr r3, 800ceb0 <scalbn+0xd0>)
 800ce92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce96:	e7e0      	b.n	800ce5a <scalbn+0x7a>
 800ce98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce9c:	3236      	adds	r2, #54	; 0x36
 800ce9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cea2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cea6:	4620      	mov	r0, r4
 800cea8:	4629      	mov	r1, r5
 800ceaa:	2200      	movs	r2, #0
 800ceac:	4b06      	ldr	r3, [pc, #24]	; (800cec8 <scalbn+0xe8>)
 800ceae:	e7b2      	b.n	800ce16 <scalbn+0x36>
 800ceb0:	c2f8f359 	.word	0xc2f8f359
 800ceb4:	01a56e1f 	.word	0x01a56e1f
 800ceb8:	8800759c 	.word	0x8800759c
 800cebc:	7e37e43c 	.word	0x7e37e43c
 800cec0:	43500000 	.word	0x43500000
 800cec4:	ffff3cb0 	.word	0xffff3cb0
 800cec8:	3c900000 	.word	0x3c900000

0800cecc <copysign>:
 800cecc:	ec51 0b10 	vmov	r0, r1, d0
 800ced0:	ee11 0a90 	vmov	r0, s3
 800ced4:	ee10 2a10 	vmov	r2, s0
 800ced8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cedc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800cee0:	ea41 0300 	orr.w	r3, r1, r0
 800cee4:	ec43 2b10 	vmov	d0, r2, r3
 800cee8:	4770      	bx	lr
	...

0800ceec <_init>:
 800ceec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceee:	bf00      	nop
 800cef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cef2:	bc08      	pop	{r3}
 800cef4:	469e      	mov	lr, r3
 800cef6:	4770      	bx	lr

0800cef8 <_fini>:
 800cef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cefa:	bf00      	nop
 800cefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cefe:	bc08      	pop	{r3}
 800cf00:	469e      	mov	lr, r3
 800cf02:	4770      	bx	lr
